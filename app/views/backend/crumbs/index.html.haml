- if @worked_on
  :ruby
    # array of crumbs ready to be managed by VisualizationHelper
    crumbs = []
  
    interventions_paths = Crumb.of_date(@worked_on).interventions_paths(current_user)
    production_supports = []
    production_supports = Crumb.production_supports(interventions_paths.flatten) if interventions_paths.present?
    interventions_paths.each do |intervention_path|
      name = interventions_paths.index(intervention_path)
      started_at = intervention_path.first.read_at
      stopped_at = intervention_path.last.read_at
      doer = intervention_path.first.user
  
      intervention_path.each do |crumb|
        item =  {
          name:         name,
          read_at:      crumb.read_at,
          nature:       crumb.nature,
          shape:        crumb.geolocation,
          started_at:   started_at,
          stopped_at:   stopped_at,
          doer_id:      doer.id,
          crumb_id:     crumb.id
        }
        crumbs << item
      end
    end
    
    interventions_paths = {}
    previous_crumb = nil
    crumbs.each do |item|
      interventions_paths[item[:name]] ||= []
      interventions_paths[item[:name]] << item
      popup_content = []
      popup_content << {label: :nature, value: item[:nature] }
      popup_content << {label: :date, value: Crumb.find(item[:crumb_id]).read_at.to_formatted_s(:long)}
      popup_content << render('form', crumb: item[:crumb_id], previous: previous_crumb)
      item[:popup] = {content: popup_content}
      previous_crumb = item[:crumb_id]
    end
  
    supports = production_supports.collect do |support|
      {activity: support.activity_name, shape: (support.shape ? support.shape_to_ewkt : nil)}
    end
  
  = kujaku do |k|
    - k.select current_user.unconverted_crumb_days.collect{|d| [d.l, d]}, name: :worked_on, selected: @worked_on
  
  = beehive do |b|
    - b.cell :map do
      = visualization do |v|
        - if supports.any?
          - v.serie :production_supports, supports
          - v.categories :activity, :production_supports
        - v.serie :interventions, crumbs
        - v.paths :started_at, :interventions
        - v.background 'OpenStreetMap.HOT'
        - v.background 'Thunderforest.Transport'
        - v.background 'Thunderforest.Outdoors'
        - v.control :zoom
        - v.control :scale
        - v.control :fullscreen
        - v.control :layer_selector
  
    -# b.cell :interventions_paths do # TODO: implement slider
      = render 'time_slider', crumbs: crumbs
    - interventions_paths.each do |name, intervention_path|
      - b.cell intervention_path.first[:started_at].l do
        = render 'intervention', path: intervention_path  
- else
  = :no_crumbs_to_check.tl
