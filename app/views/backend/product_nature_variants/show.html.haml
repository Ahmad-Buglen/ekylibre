- main_toolbar do |t|
  - t.edit resource

= beehive do |b|
  - b.hbox do
    - b.cell :general do
      .info
        %span.title= ProductNatureVariant.human_attribute_name(:nature)
        %span.value= link_to(resource.nature.name, controller: :product_natures, action: :show, id: resource.nature_id)
      - for reading in resource.readings
        .info
          %span.title= reading.indicator.human_name
          %span.value= reading.value.l

      -# .info
        %span.title= ProductNatureVariant.human_attribute_name(:net_mass)
        %span.value= resource.products.map(&:net_mass).compact.sum
      -# .info
        %span.title= ProductNatureVariant.human_attribute_name(:net_volume)
        %span.value= resource.products.map(&:net_volume).compact.sum

    - b.cell do
      = attributes_list(resource) do |l|
        - l.attribute :name
        - l.attribute :commercial_name
        - l.attribute :unit_name
        - l.attribute :variety
        - l.attribute :derivative_of
        - if resource.picture.exists?
          = image_tag(resource.picture.url(:thumb))

  - b.hbox do
    - b.cell(:products) do
      = list(:products)
    - if resource.products.any?
      - b.cell(:stocks) do
        :ruby
            dataset = resource.products

            series = []

            for product in dataset
              items = ProductReading.where(indicator_name: "population", product: product).order(:read_at)
              item_h = items.sort.inject({}) do |hash, pair|
                hash[pair.read_at.to_usec] = pair.value.to_d
                hash
              end
              data = []
              data = item_h.collect{|k,v| [k, v.to_s.to_f] }
              series << {name: product.name ,data: data }
            end

        = spline_chart(series, legend: { layout: 'vertical', align: 'bottom', vertical_align: 'bottom', border_width: 0 }, y_axis: {title: { text: :population.tl}, min: 0}, x_axis: {type: 'datetime', title: { enabled: true, text: :months.tl}})

  - b.hbox do
    - b.cell(:prices) do
      = toolbar do |t|
        - t.new variants: Catalog.reorder(:name).to_a.inject({}){|h,c| h[c.name] = {catalog_id: c.id}; h}, params: {controller: :catalog_prices, variant_id: resource.id, redirect: request.path}
      = list(:prices)
    - if resource.prices.any?
      - b.cell(:prices_evolutions) do
        :ruby
          prices = resource.prices.reorder(:started_at)

          series = []
          threads = prices.pluck(:thread).uniq

          for thread in threads
            list = prices.of_thread(thread)
            if list.any?
              items = prices.of_thread(thread).sort.collect do |price|
                [price.started_at.to_usec, price.amount.to_s.to_f]
              end
              series << {name: list.first.catalog.name, data: items }
            end
          end

        = spline_chart(series, legend: { layout: 'horizontal', align: 'center', vertical_align: 'bottom', border_width: 0 }, y_axis: {title: { text: :price.tl}, min: 0}, x_axis: {type: 'datetime', title: { text: :months.tl}})
