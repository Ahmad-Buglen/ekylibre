:ruby
  data = resource.supports.collect do |support|

    popup_content = []

    popup_content << {label: :campaign.tl, value: link_to(support.production.campaign.name, backend_campaign_path(support.production.campaign))}
    popup_content << {label: :activity.tl, value: link_to(support.production.activity.name, backend_activity_path(support.production.activity))}
    popup_content << {label: :production_support.tl, value: link_to(support.name, backend_production_support_path(support))}

    for item in [:nitrogen_concentration, :phosphorus_concentration, :potassium_concentration]
      if value = support.soil_enrichment_indicator_content_per_area(item)
        popup_content << {label: item.tl, value: value.to_s.to_f.round(2)}
      end
    end



    interventions = support.interventions
    if interventions.any?
      last_intervention = interventions.max{|a,b| a.started_at <=> b.started_at }
      popup_content << {label: :last_intervention.tl, value: link_to( "NÂ°" + last_intervention.number, backend_intervention_path(last_intervention)) }
    end

    popup_content << render('popup', support: support)

    { name:       support.name,
      shape:      support.shape,
      campaign:   support.campaign_name,
      activity:   support.activity_name,
      production: support.production_name,
      tool_cost:  support.tool_cost.to_s.to_f.round(2),
      input_cost: support.input_cost.to_s.to_f.round(2),
      time_cost:  support.time_cost.to_s.to_f.round(2),
      nitrogen_concentration:   support.soil_enrichment_indicator_content_per_area(:nitrogen_concentration).to_s.to_f.round(2),
      phosphorus_concentration: support.soil_enrichment_indicator_content_per_area(:phosphorus_concentration).to_s.to_f.round(2),
      potassium_concentration:  support.soil_enrichment_indicator_content_per_area(:potassium_concentration).to_s.to_f.round(2),
      interventions_count: support.interventions.count,
      popup: {header: true, content: popup_content}
    }
  end
  supports_quantity = resource.supports_quantity

- main_toolbar do |t|
  - t.edit resource

= janus do |j|
  - if resource.with_supports and resource.supports.any? and variety = Nomen::Varieties[resource.support_variety] and variety <= :cultivable_zone
    - j.face :map, title: :costs_map do
      - visualization(box: {height: "100%"}) do |v|
        - v.serie :main, data
        - v.background "OpenStreetMap.HOT"
        - v.background "OpenStreetMap.Mapnik"
        - v.background "Thunderforest.Landscape"
        - v.background "Esri.WorldImagery"
        - v.choropleth :interventions_count, :main
        - v.choropleth :nitrogen_concentration, :main, stop_color: "#777777"
        - v.choropleth :phosphorus_concentration, :main, stop_color: "#11BB99"
        - v.choropleth :potassium_concentration, :main, stop_color: "#AA00AA"
        - v.choropleth :tool_cost, :main, stop_color: "#00AA00"
        - v.choropleth :input_cost, :main, stop_color: "#1122DD"
        - v.choropleth :time_cost, :main, stop_color: "#E77000"
        - v.control :zoom
        - v.control :scale
        - v.control :fullscreen
        - v.control :layer_selector

  - j.face :cobbles do
    = cobbles do |c|
      - c.cobble :general_informations do
        = attributes_list do |l|
          - l.attribute :name
          - l.attribute :cultivation_variant, url: true
          - l.attribute :started_at
          - l.attribute :stopped_at
          - l.attribute :state
          - l.attribute :campaign, url: true
          - l.attribute :activity, url: true

      -# For budgets
      - if resource.budgets.any?
        - c.cobble(:budget) do
          = render "margins", supports_quantity: supports_quantity
      - if resource.auxiliary? and resource.distributions.any?
        - c.cobble(:distributions, title: Production.human_attribute_name(:distributions)) do
          :ruby
            data = []
            resource.distributions.reorder(:affectation_percentage).find_each do |distribution|
              y = distribution.affectation_percentage.to_s.to_f
              data << {name: :label_value.th(label: distribution.main_production_name, value: number_to_percentage(y, precision: 2)), y: y }
            end
            series = [{type: 'pie', name: Production.human_attribute_name(:distributions), data: data}]

          = pie_chart(series, legend: true)

      - if resource.with_supports and resource.supports.any? and resource.support_variant.has_indicator?(:shape)

        -# TODO need to be renovated but the idea is here
        - total_earn = nil
        - total_cost = nil
        - currency = Nomen::Currencies.find(Preference[:currency])
        - precision = currency.precision - 2
        - unit = Nomen::Units[resource.support_variant_unit]
        - c.cobble(:costs) do
          .big-infos.costs
            - total_cost = 0
            - [:input, :tool, :doer].each do |type|
              - cost = (resource.cost(type) || 0.0).round.to_i
              - total_cost += cost
              .big-info.cost
                %span.title= "evaluated_#{type}_cost".tl
                %span.value
                  %i.picto{class: "picto-#{type}"}
                  - if resource.with_supports and supports_quantity > 0 and unit
                    = :amount_per_unit.tl(amount: (cost/supports_quantity).round(precision).to_i.l(currency: currency.name), unit: unit.symbol)
                  - else
                    = cost.round(precision).to_i.l(currency: currency.name)
            .big-info.cost.important
              %span.title= :total_cost.tl
              %span.value
                - if resource.with_supports and supports_quantity > 0 and unit
                  = :amount_per_unit.tl(amount: (total_cost/supports_quantity).round(precision).to_i.l(currency: currency.name), unit: unit.symbol)
                - else
                  = total_cost.round(precision).to_i.l(currency: currency.name)

        - if resource.earn > 0.0
          - c.cobble(:earns) do
            .big-infos-costs.costs
              - total_earn = (resource.earn || 0.0).round.to_i
              .big-info.cost.important
                %span.title= :total_earn.tl
                %span.value
                  - if resource.with_supports and supports_quantity > 0 and unit
                    = :amount_per_unit.tl(amount: (total_earn/supports_quantity).round(precision).to_i.l(currency: currency.name), unit: unit.symbol)
                  - else
                    = total_earn.round(precision).to_i.l(currency: currency.name)
              - if total_cost > 0.0
                - gross_profit = ((total_earn - total_cost) || 0.0).round.to_i
                .big-info.cost.important
                  %span.title= :gross_profit.tl
                  %span.value
                    - if resource.with_supports and supports_quantity > 0 and unit
                      = :amount_per_unit.tl(amount: (gross_profit/supports_quantity).round(precision).to_i.l(currency: currency.name), unit: unit.symbol)
                    - else
                      = gross_profit.round(precision).to_i.l(currency: currency.name)


      - if resource.with_supports
        - c.cobble(:supports) do
          = cobble_list(:supports)
        - if resource.supports.any?
          - c.cobble(:supports_chart, title: Production.human_attribute_name(:supports)) do
            :ruby
              supports_serie = resource.supports.collect do |support|
                { name: support.name, y: support.quantity.to_s.to_f, color: cycle(*theme_colors) }
              end
              series = []
              series << {name: resource.support_variant.name, data: supports_serie, size: "80%"}

              if resource.support_variant_unit
                support_variant_unit = Nomen::Units.find(resource.support_variant_unit)
              else
                support_variant_unit = Nomen::Units[:unity]
              end

            = pie_chart(series, tooltip: {point_format: "{point.y: 1.2f}#{support_variant_unit ? support_variant_unit.symbol : ''}"}, title: {text: "#{supports_quantity.round(3).l}#{support_variant_unit ? support_variant_unit.symbol : ''}"}, plot_options: { pie: { allow_point_select: true, cursor: 'pointer', show_in_legend: true}}, legend: true)

        - if resource.cultivation_variant and Nomen::Varieties[resource.cultivation_variety] and Nomen::Varieties[resource.cultivation_variety] <= :animal
          - c.cobble :last_analyses do
            = cell :last_analyses, params: {campaign_id: resource.campaign_id}


      - c.cobble :interventions do
        = cobble_list(:interventions)
