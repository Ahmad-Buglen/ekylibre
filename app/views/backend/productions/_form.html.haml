= field_set do
  = f.referenced_association :activity, :source => :main
  = f.referenced_association :campaign, :source => :currents
  = f.referenced_association :variant
  = f.referenced_association :support_variant
  = f.input :static_support, :show => :supports
  = f.input :state, as: :radio_buttons
  = f.input :started_at
  = f.input :stopped_at
  = f.input :working_indicator
  = f.input :working_unit
  = f.custom_fields

= field_set(:budgets) do
  %table#budget_visualization
    %tr.support_nested_fields
      %td
      = f.backend_fields_for :supports do |support_form|
        = render 'support_fields', f: support_form
      %td
        = link_to_add_association :'+', f, :supports, partial: 'support_fields'
    = f.backend_fields_for :budgets do |budget_form|
      = render 'budget_fields', f: budget_form
    %tr#expenses
      %td{colspan: '100%', data:{budgets_direction: :expense}}
        = f.input :homogeneous_expenses, wrapper: :nested
        = :expenses
    - template = '<td data-support-total="expense">inserted</td>'
    %tr{data:{budget_add: :expense, appendable: template}}
      %td
        = link_to_add_association :'+', f, :budgets, partial: 'budget_fields', render_options:{locals:{direction: :expense}}, data:{association_insertion_node: "tr[data-budget-add='expense']", asosciation_insertion_traversal: 'closest', association_insertion_method: :before}
      -f.object.supports.count.times do
        %td{data:{support_total: :expense}}
      %td{data:{budgets_global_amount: :expense, append_before: true}}
        = :budgets_global_expense
    %tr#revenues
      %td{colspan: '100%', data:{budgets_direction: :revenue}}
        = f.input :homogeneous_revenues, wrapper: :nested
        = :revenues
    - template = '<td data-support-total="revenue">inserted</td>'
    %tr{data:{budget_add: :revenue, appendable: template}}
      %td
        = link_to_add_association :'+', f, :budgets, partial: 'budget_fields', render_options:{locals:{direction: :revenue}}, data:{association_insertion_node: "tr[data-budget-add='revenue']", association_insertion_traversal: 'closest', association_insertion_method: :before}
      -f.object.supports.count.times do
        %td{data:{support_total: :revenue}}
      %td{data:{budgets_global_amount: :revenue, append_before: true}}
        = :budgets_global_revenue
    - template = '<td data-balance="support">inserted</td>'
    %tr{data:{balance: true, appendable: template}}
      %td
        = :balance
      -f.object.supports.count.times do
        %td{data:{balance: :support}}
          = :empty
      %td{data:{balance: :global, append_before: true}}
        = :globally_empty
