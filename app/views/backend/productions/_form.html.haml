= field_set do
  = f.input :name
  = f.association :activity, as: :hidden
  = f.association :activity, disabled: true
  = f.association :campaign, as: :hidden
  = f.association :campaign, disabled: true
  - if variety = f.object.activity.cultivation_variety
    = f.referenced_association :cultivation_variant, source: {scope: {of_variety: variety}}
  - if variety = f.object.activity.support_variety
    = f.referenced_association :support_variant, source: {scope: {of_variety: variety}}
    .with-supports= f.variant_quantifier_of :support_variant
  = f.input :started_at
  = f.input :stopped_at
  = f.input :irrigated
  = f.input :nitrate_fixing
  = f.custom_fields

:ruby
  currency = Nomen::Currencies[Preference[:currency]]
  currency_symbol = currency.symbol || currency.name
  precision = currency.precision

- if f.object.activity and f.object.auxiliary?
  :ruby
    unless f.object.distributions.any?
      f.object.activity_distributions.each do |distribution|
        if production = Production.find_by(activity_id: distribution.main_activity_id, campaign_id: f.object.campaign_id)
          f.object.distributions.build(affectation_percentage: distribution.affectation_percentage, main_production_id: production.id)
        end
      end
    end
  = field_set(Production.human_attribute_name(:distributions)) do
    = f.nested_association(:distributions, locals: {campaign: f.object.campaign})

.with-supports
  = field_set(Production.human_attribute_name(:supports)) do
    = render "supports_form", f: f

= field_set(Production.human_attribute_name(:budget)) do
  = render "budgets_form", direction: :expense, f: f, currency_symbol: currency_symbol
  = render "budgets_form", direction: :revenue, f: f, currency_symbol: currency_symbol
  %table
    %thead
      %tr.total
        %th
        %th{colspan: 2}= :expenses.tl
        %th{colspan: 2}= :revenues.tl
        %th{colspan: 2}= :balance.tl
    %tbody
      %tr.total
        %th= "enumerize.production_budget.computation_method.per_production".t
        %td.decimal#expenses-per-production{data: {use: "#expenses-total"}}
        %td.currency= currency_symbol
        %td.decimal#revenues-per-production{data: {use: "#revenues-total"}}
        %td.currency= currency_symbol
        %td.decimal#balance-per-production{data: {difference: "#revenues-per-production - #expenses-per-production", calculate_round: precision}}
        %td.currency= currency_symbol
      %tr.total.working-unit-only
        %th= "enumerize.production_budget.computation_method.per_working_unit".t
        %td.decimal#expenses-per-working-unit{data: {division: "#expenses-per-production / #supports-quantity", calculate_round: precision}}
        %td.currency= currency_symbol
        %td.decimal#revenues-per-working-unit{data: {division: "#revenues-per-production / #supports-quantity", calculate_round: precision}}
        %td.currency= currency_symbol
        %td.decimal#balance-per-working-unit{data: {division: "#balance-per-production / #supports-quantity", calculate_round: precision}}
        %td.currency= currency_symbol
