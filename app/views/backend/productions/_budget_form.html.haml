- currency = Nomen::Currencies[Preference[:currency]]
- symbols = Nomen::Units.list.inject({}){|h, i| h.store(i.name, i.symbol); h}.with_indifferent_access
%table#budget{data: {budget: "true", symbols: symbols}}
  %thead
    %tr.support_nested_fields
      %th
      %th
        = f.backend_fields_for :supports do |support_form|
          = render 'support_fields', f: support_form
      %td.add
        = link_to_add_association '+', f, :supports, partial: 'support_fields'
    -#= f.backend_fields_for :budgets do |budget_form|
      = render 'budget_fields', f: budget_form

  %tfoot
    - template = "<td data-balance='support'>0.0</td>"
    %tr#balance{data: {balance: true, appendable: template}}
      %th= :balance.tl
      - f.object.supports.count.times do
        %td.subtotal{data: {balance: :support}}= 0.0
      %td.subtotal{data: {append_before: true, balance: :global}}= 0.0

  %tbody

    %tr#expenses
      %th{data: {budgets_direction: :expense}}
        = f.input :homogeneous_expenses, wrapper: :nested
      %th.label{colspan: f.object.supports.count}= :expenses.tl
      %th= :total.tl
    - template = "<td data-support-total='expense'>0.0</td>"
    %tr{data: {budget_add: :expense, appendable: template}}
      %td.add
        = link_to_add_association '+', f, :budgets, partial: 'budget_fields', render_options: {locals: {direction: :expense}}, data: {association_insertion_node: "tr[data-budget-add='expense']", association_insertion_traversal: 'closest', association_insertion_method: :before}
      - f.object.supports.count.times do
        %td.subtotal{data: {support_total: :expense}}= 0.0
      %td.subtotal{data: {append_before: true, budgets_global_amount: :expense}}= 0.0

    %tr#revenues
      %th{data: {budgets_direction: :revenue}}
        = f.input :homogeneous_revenues, wrapper: :nested
      %th.label{colspan: f.object.supports.count}= :revenues.tl
      %th= :total.tl
    - template = "<td data-support-total='revenue'>0.0</td>"
    %tr{data: {budget_add: :revenue, appendable: template}}
      %td.add
        = link_to_add_association '+', f, :budgets, partial: 'budget_fields', render_options: {locals: {direction: :revenue}}, data: {association_insertion_node: "tr[data-budget-add='revenue']", association_insertion_traversal: 'closest', association_insertion_method: :before}
      - f.object.supports.count.times do
        %td.subtotal{data: {support_total: :revenue}}= 0.0
      %td.subtotal{data: {append_before: true, budgets_global_amount: :revenue}}= 0.0

