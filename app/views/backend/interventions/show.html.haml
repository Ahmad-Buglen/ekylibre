- main_toolbar do |t|
  - t.edit resource
  - t.export do |e|
    - e.intervention_sheet resource.number, resource
  - if resource.destroyable?
    - t.destroy resource, method: :delete, "data-confirm" => :are_you_sure.tl
  - if resource.runnable?
    - t.run resource, method: :post, "data-confirm" => :are_you_sure.tl

= cobbles do |c|
  - count = 0
  - map = visualization do |v|
    - v.background "OpenStreetMap.HOT"
    - v.background "OpenStreetMap.Mapnik"
    - v.background "Thunderforest.Landscape"
    - v.background "Esri.WorldImagery"
    - resource.product_parameters.each do |cast|
      - shape = cast.working_zone
      - shape ||= cast.product.shape(at: resource.started_at) if cast.product
      - if shape
        - v.serie cast.id, [{name: cast.name, shape: shape}]
        - v.simple (cast.product ? cast.product.name : cast.variant ? cast.variant.name : cast.name), cast.id, fill_color: cycle(theme_colors)
        - count += 1
    - resource.product_parameters.each do |cast|
      - if cast.crumbs.any?
        - v.serie "path_#{cast.id}", cast.crumbs.reorder(:read_at).collect{|c| {name: cast.name, shape: c.geolocation}}
        - v.path (cast.product ? cast.product.name : cast.variant ? cast.variant.name : cast.name), "path_#{cast.id}"
        - count += 1
    - v.control :zoom
    - v.control :scale
    - v.control :fullscreen
    - v.control :layer_selector
  - if count > 0
    - c.cobble :resource_map, title: :map.tl do
      = map

  - tractor_cast = resource.product_parameters.find_by(reference_name: 'tractor')
  - if tractor_cast && tractor_cast.product
    :ruby
      tractor = tractor_cast.product
      series = []
      [:fuel_consumption].each do |indicator_name|
        indicator = Nomen::Indicator[indicator_name]
        readings = ProductReading.where(indicator_name: indicator_name, product: tractor).between(resource.started_at, resource.stopped_at)
        next unless readings.any?
        data = readings.reorder(:read_at).map do |reading|
          [reading.read_at.to_usec, reading.value.round(2).to_s.to_f]
        end
        series << {
          type: indicator.curve,
          name: indicator.human_name,
          data: data,
          tooltip: {
            value_suffix: " #{Nomen::Unit[indicator.unit].symbol}"
          }
        }
      end
    - if series.any?
      - c.cobble(:chart) do
        = spline_highcharts(series, y_axis: {title: {text: :indicator_value.tl} , opposite: true}, tooltip: { shared: true }, x_axis: {type: 'datetime', crosshair: true}, legend: true)

  - c.cobble(:costs) do
    .big-infos.costs
      - total = 0
      - for type in [:input, :tool, :doer]
        - cost = (resource.cost(type) || 0.0).round.to_i
        - total += cost
        .big-info.cost
          %span.title= "evaluated_#{type}_cost".tl
          %span.value
            %i.picto{class: "picto-#{type}"}
            = cost.l(currency: Preference[:currency])

      .big-info.cost.important
        %span.title= "total_cost".tl
        %span.value= total.l(currency: Preference[:currency])

  - if resource.product_parameters.any?
    - c.cobble(:parameters) do
      %ul.product_parameters= render partial: 'product_parameter', collection: resource.product_parameters

  - c.cobble(:general_informations) do
    .big-infos
      .med-info.important
        %span.title= Intervention.human_attribute_name(:state)
        %span.value= lights(resource.status)
      .med-info
        %span.title= Intervention.human_attribute_name(:working_duration)
        %span.value
          %i.picto.picto-timelapse
          = human_duration(resource.working_duration)
      .med-info
        %span.title= Intervention.human_attribute_name(:whole_duration)
        %span.value
          %i.picto.picto-timelapse
          = human_duration(resource.whole_duration)
      .med-info
        %span.title= Intervention.human_attribute_name(:started_at)
        %span.value
          %i.picto.picto-clock-o
          = resource.started_at.l
      .med-info
        %span.title= Intervention.human_attribute_name(:stopped_at)
        %span.value
          %i.picto.picto-clock-o
          = resource.stopped_at.l

    -# if resource.production_support
      .info
        %span.title= :production_support.tl
        %span.value= link_to(resource.production_support.name, {controller: :production_supports, action: :show, id: resource.production_support})

      - if resource.storage
        .info
          %span.title= ProductionSupport.human_attribute_name(:storage)
          %span.value= link_to(resource.storage.name, {controller: :products, action: :show, id: resource.storage})

    - if resource.prescription
      .info
        %span.title= Intervention.human_attribute_name(:prescription)
        %span.value= link_to(resource.prescription.name, {controller: :prescriptions, action: :show, id: resource.prescription})

    - if resource.issue
      .info
        %span.title= Intervention.human_attribute_name(:issue)
        %span.value= link_to(resource.issue.name, {controller: :issues, action: :show, id: resource.issue})

    - if resource.description?
      .info
        %span.title= Intervention.human_attribute_name(:description)
        %span.value= resource.description
