
-# if !f.object.new_record? or procedure = Procedo[params[:procedure]]
- if procedure = f.object.reference
  = field_set do
    = f.input :reference_name, as: :hidden
    = f.referenced_association :production_support
    = f.referenced_association :issue
    = f.input :recommended, show: :prescriptions
    = f.input :provisional
    -#= f.referenced_association :production
    = f.input :started_at
    = f.input :stopped_at

  = field_set(:prescriptions) do
    = f.referenced_association :prescription
    = f.referenced_association :recommender

  = field_set :casting do
    - if f.object.new_record? and f.object.casts.empty?
      - for name, variable in procedure.variables
        - f.object.casts.new(reference_name: name)
    = f.backend_fields_for :casts do |v|
      - reference = v.object.reference
      = v.input :reference_name, as: :hidden
      - if reference.new?
        = v.input("actor", :wrapper => :append, :value => 0, wrapper_html: {class: "inline special"}, label: reference.human_name) do
          - if reference.need_population?
            = v.input_field :population
          - if reference.known_variant?
            %span.add-on= reference.variant_indication
          - else
            = v.referenced_association_field :variant, source: {scope: reference.scope_hash.merge(availables: true)}
      - else
        = v.referenced_association :actor, label: reference.human_name, source: {scope: reference.scope_hash.merge(availables: true)}

  -# field_set :operations do
    - if f.object.operations.empty? or f.object.new_record?
      - for id, operation in procedure.operations
        - f.object.operations.new(position: id)
    = f.backend_fields_for :operations do |v|
      = v.input :position, as: :hidden
      = v.input :started_at, label: v.object.reference.human_name, hint: v.object.reference.human_expressions.to_sentence
      -# = v.input :stopped_at, label: v.object.reference.human_name

  - if f.object.errors.count > 0
    = f.object.errors.messages.inspect


- else # Root Procedure Natures
  :ruby
    natures = []
    nature = Nomen::ProcedureNatures[params[:procedure_nature]]
    natures += (nature ? nature.children : Nomen::ProcedureNatures.roots)
    natures.delete_if{|n| Procedo.procedures_of_nature_and_its_children(n.name).empty?}
    default_params = {}
    for x in [:production_support_id, :issue_id, :prescription_id]
      if params[x]
        default_params[x] = params[x]
      end
    end
    links = []
    if natures.any?
      for n in natures
        procedures = Procedo.procedures_of_nature(n.name.to_sym).sort{|a,b| a.human_name <=> b.human_name}
        if procedures.size == 1
          procedure = procedures.first
          links << [procedure.human_name, default_params.merge(reference_name: procedure.name), class: "btn"]
        else
          links << [n.human_name, default_params.merge(procedure_nature: n.name), class: "btn btn-important"]
        end
      end
    end
    if nature
      procedures = Procedo.procedures_of_nature(nature.name.to_sym)
      if procedures.any?
        for procedure in Procedo.procedures_of_nature(nature.name.to_sym).sort{|a,b| a.human_name <=> b.human_name}
          links << [procedure.human_name, default_params.merge(reference_name: procedure.name), class: "btn"]
        end
      end
    end
    links.sort!{|a,b| a.first <=> b.first }

  - f.clear_actions!
  - if links.any?
    .proposal-list
      - for link in links
        = link_to(*link)
