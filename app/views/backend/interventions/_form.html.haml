- if procedure = f.object.reference
  = hidden_field_tag nil, compute_backend_interventions_path(format: :json), data: {procedure_computing: procedure.name}
  - if !f.object.production and params[:production_support_id] and support = ProductionSupport.find_by(id: params[:production_support_id])
    - f.object.production = support.production
  = field_set do
    = f.input :reference_name, as: :hidden
    = f.referenced_association :production, new: false, source: :of_currents_campaigns, input_html: {data: {procedure: procedure.name, procedure_global: "production", intervention_updater: "global:production"}}
    .with-supports
      = f.referenced_association :production_support, new: false, source: :of_currents_campaigns, input_html: {data: {procedure: procedure.name, procedure_global: "support", intervention_updater: "global:support"}}
    = f.referenced_association :issue
    = f.input :recommended, show: :prescriptions
    = f.input :provisional
    -#= f.referenced_association :production
    = f.input :started_at, input_html: {data: {procedure: procedure.name, procedure_global: "at", intervention_updater: "global:at"}}
    = f.input :stopped_at
    = f.input :description
    = f.custom_fields

  = field_set(:prescriptions) do
    = f.referenced_association :prescription
    = f.referenced_association :recommender

  = field_set :casting do
    - if f.object.new_record? and f.object.casts.empty?
      - for name, variable in procedure.variables
        - f.object.casts.new(reference_name: name)
    = f.backend_fields_for :casts do |v|
      - reference = v.object.reference
      = v.input :reference_name, as: :hidden
      - if reference and reference.type_product?
        - if reference.handlers.any?
          = v.input("actor", wrapper_html: {class: "inline special"}, label: reference.human_name) do
            - for need in reference.needs
              - v.object.send("#{need}=", v.object.send(need))
              = v.input_field(need, as: :hidden, data: {procedure: procedure.name, variable: reference.name, variable_destination: need})
            .handlers
              -# Handlers
              - for handler in reference.handlers
                .handler{class: handler.widget}
                  .title= handler.human_name
                  .value
                    - if handler.widget == :number
                      = number_field_tag(nil, nil, data: {procedure: procedure.name, variable: reference.name, variable_handler: handler.name, intervention_updater: "casting:#{reference.name}:handlers:#{handler.name}"})
                      - if handler.unit?
                        .add-on= handler.unit.symbol
                    - elsif handler.widget == :map
                      = shape_field_tag(nil, nil, data: {procedure: procedure.name, variable: reference.name, variable_handler: handler.name, intervention_updater: "casting:#{reference.name}:handlers:#{handler.name}"})
              -# Variant
              - if reference.new?
                - if reference.known_variant?
                  = v.association :variant, as: :hidden, input_html: {data: {procedure: procedure.name, variable: reference.name, variable_variant: reference.name, intervention_updater: "casting:#{reference.name}:variant"}}
                - else
                  .handler.long
                    .title= InterventionCast.human_attribute_name(:variant)
                    .value= v.referenced_association_field :variant, source: {scope: reference.scope_hash.merge(availables: true)}, new: false, input_html: {data: {procedure: procedure.name, variable: reference.name, variable_variant: reference.name, intervention_updater: "casting:#{reference.name}:variant"}}
              - else
                .handler.long
                  .title= InterventionCast.human_attribute_name(:actor)
                  .value= v.referenced_association_field :actor, label: reference.human_name, source: {scope: reference.scope_hash.merge(availables: true)}, new: false, input_html: {data: {procedure: procedure.name, variable: reference.name, variable_actor: reference.name, intervention_updater: "casting:#{reference.name}:actor"}}
        - else
          = v.referenced_association :actor, label: reference.human_name, source: {scope: reference.scope_hash.merge(availables: true)}, new: false, input_html: {data: {procedure: procedure.name, variable: reference.name, variable_actor: reference.name, intervention_updater: "casting:#{reference.name}:actor"}}
      - elsif reference.type_variant?
        = v.referenced_association :variant, label: reference.human_name, source: {scope: reference.scope_hash}, new: false, input_html: {data: {procedure: procedure.name, variable: reference.name, variable_variant: reference.name, intervention_updater: "casting:#{reference.name}:variant"}}
      - else
        - raise "Unknown type: #{reference.type.inspect}"



- else # Root Procedure Natures
  - main_campaign_selector
  - proposed = []
  - default_params = {action: :new}
  .activity-families{data: {collapse: "accordion"}}
    - for family in Activity.of_campaign(current_campaign).pluck(:family).collect{|f| Nomen::ActivityFamilies[f]}.compact.uniq.sort{|a,b| a.human_name <=> b.human_name }
      - procedures = Procedo.procedures_of_activity_family(family.name.to_sym)
      - if procedures.any?
        - proposed += procedures
        %h3
          %i
          = family.human_name
        .proposal-list
          - for procedure in procedures.sort{|a,b| a.human_name <=> b.human_name }
            = link_to(procedure.human_name, default_params.merge(reference_name: procedure.name).merge(params), class: "btn")
    - remainings = Procedo.list.values - proposed
    - if remainings.any?
      %h3.others
        %i
        = :others.tl
      .proposal-list
        - for procedure in remainings.sort{|a,b| a.human_name <=> b.human_name }
          = link_to(procedure.human_name, default_params.merge(reference_name: procedure.name).merge(params), class: "btn")

  - f.clear_actions!
