-# if !f.object.new_record? or procedure = Procedo[params[:procedure]]
- if procedure = f.object.reference
  = hidden_field_tag nil, compute_backend_interventions_path(format: :json), data: {procedure_computing: procedure.name}
  = field_set do
    = f.input :reference_name, as: :hidden
    = f.referenced_association :production_support, input_html: {data: {procedure: procedure.name, procedure_global: "support", intervention_updater: "global:support"}}
    = f.referenced_association :issue
    = f.input :recommended, show: :prescriptions
    = f.input :provisional
    -#= f.referenced_association :production
    = f.input :started_at, input_html: {data: {procedure: procedure.name, procedure_global: "at", intervention_updater: "global:at"}}
    = f.input :stopped_at

  = field_set(:prescriptions) do
    = f.referenced_association :prescription
    = f.referenced_association :recommender

  = field_set :casting do
    - if f.object.new_record? and f.object.casts.empty?
      - for name, variable in procedure.variables
        - f.object.casts.new(reference_name: name)
    = f.backend_fields_for :casts do |v|
      - reference = v.object.reference
      = v.input :reference_name, as: :hidden
      - if reference.new?
        = v.input("actor", wrapper_html: {class: "inline special"}, label: reference.human_name) do
          - for need in reference.needs
            = v.input_field(need, as: :hidden, data: {procedure: procedure.name, variable: reference.name, variable_destination: need})
          .handlers
            - for handler in reference.handlers
              .handler{class: handler.destination}
                .title= handler.human_name
                .value
                  - if handler.widget == :number
                    = number_field_tag(nil, nil, data: {procedure: procedure.name, variable: reference.name, variable_handler: handler.name, intervention_updater: "casting:#{reference.name}:handlers:#{handler.name}"})
                    - if handler.unit?
                      .add-on= handler.unit.symbol
                  - elsif handler.widget == :map
                    = shape_field_tag(nil, nil, data: {procedure: procedure.name, variable: reference.name, variable_handler: handler.name, intervention_updater: "casting:#{reference.name}:handlers:#{handler.name}"})
            -# Variant
            - if reference.known_variant?
              = v.association :variant, as: :hidden, input_html: {data: {procedure: procedure.name, variable: reference.name, variable_variant: reference.name, intervention_updater: "casting:#{reference.name}:variant"}}
            - else
              .handler.long
                .title= InterventionCast.human_attribute_name(:variant)
                .value= v.referenced_association_field :variant, source: {scope: reference.scope_hash.merge(availables: true)}, input_html: {data: {procedure: procedure.name, variable: reference.name, variable_variant: reference.name, intervention_updater: "casting:#{reference.name}:variant"}}
      - else
        = v.referenced_association :actor, label: reference.human_name, source: {scope: reference.scope_hash.merge(availables: true)}, input_html: {data: {procedure: procedure.name, variable: reference.name, variable_actor: reference.name, intervention_updater: "casting:#{reference.name}:actor"}}

  - if f.object.errors.count > 0
    = f.object.errors.messages.inspect


- else # Root Procedure Natures
  :ruby
    natures = []
    nature = Nomen::ProcedureNatures[params[:procedure_nature]]
    natures += (nature ? nature.children : Nomen::ProcedureNatures.roots)
    natures.delete_if{|n| Procedo.procedures_of_nature_and_its_children(n.name).empty?}
    default_params = {}
    for x in [:production_support_id, :issue_id, :prescription_id]
      if params[x]
        default_params[x] = params[x]
      end
    end
    links = []
    if natures.any?
      for n in natures
        procedures = Procedo.procedures_of_nature(n.name.to_sym).sort{|a,b| a.human_name <=> b.human_name}
        if procedures.size == 1
          procedure = procedures.first
          links << [procedure.human_name, default_params.merge(reference_name: procedure.name), class: "btn"]
        else
          links << [n.human_name, default_params.merge(procedure_nature: n.name), class: "btn btn-important"]
        end
      end
    end
    if nature
      procedures = Procedo.procedures_of_nature(nature.name.to_sym)
      if procedures.any?
        for procedure in Procedo.procedures_of_nature(nature.name.to_sym).sort{|a,b| a.human_name <=> b.human_name}
          links << [procedure.human_name, default_params.merge(reference_name: procedure.name), class: "btn"]
        end
      end
    end
    links.sort!{|a,b| a.first <=> b.first }

  - f.clear_actions!
  - if links.any?
    .proposal-list
      - for link in links
        = link_to(*link)
