- if f.object.errors.any?
  = f.object.errors.inspect
- procedure = f.object.procedure
- if procedure = f.object.procedure
  = hidden_field_tag :updater, compute_backend_interventions_path(format: :json), data: {procedure_computing: procedure.name}
  = field_set do
    = f.input :procedure_name, as: :hidden, input_html: { data: { procedure: compute_backend_interventions_path(format: :json) }}
    = f.referenced_association :issue
    = f.input :description
    - procedure.mandatory_actions.each do |a|
      = hidden_field_tag('intervention[actions][]', a.name)
    - if procedure.optional_actions.any?
      = f.items_list(:actions, selection: procedure.optional_actions_selection)

    = f.custom_fields
    #prescriptions
      = f.referenced_association :prescription
      -#= f.referenced_association :recommender
    #working-periods
      - unless f.object.working_periods.any?
        - stopped_at ||= Time.zone.now
        - started_at ||= stopped_at - 1.hour
        - f.object.working_periods.new(started_at: started_at, stopped_at: stopped_at)
      = f.nested_association(:working_periods, minimum: 1, locals: {namespace: 'working_periods'})

  = field_set :parameters do
    - procedure.each_parameter do |parameter|
      = render 'parameter_form', reference: parameter, f: f, namespace: ''

- else # Root Procedure Natures
  - main_campaign_selector
  - proposed = []
  - default_params = {action: :new}
  .activity-families{data: {collapse: "accordion"}}
    - Activity.of_campaign(current_campaign).pluck(:family).collect{|f| Nomen::ActivityFamily[f]}.compact.uniq.sort{|a,b| a.human_name <=> b.human_name }.each do |family|
      - procedures = Procedo.procedures_of_activity_family(family.name.to_sym)
      - if procedures.any?
        - proposed += procedures
        %h3
          %i
          = family.human_name
        .proposal-list
          - procedures.sort{|a,b| a.human_name <=> b.human_name }.each do |procedure|
            = link_to(procedure.human_name, default_params.merge(procedure_name: procedure.name).merge(params), class: "btn")
    - remainings = Procedo.procedures - proposed
    - if remainings.any?
      %h3.others
        %i
        = :others.tl
      .proposal-list
        - remainings.sort{|a,b| a.human_name <=> b.human_name }.each do |procedure|
          = link_to(procedure.human_name, default_params.merge(procedure_name: procedure.name).merge(params), class: "btn")

  - f.clear_actions!
