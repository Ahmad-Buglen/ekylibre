- if f.object.errors.any?
  = f.object.errors.inspect
- if procedure = f.object.reference
  = hidden_field_tag nil, compute_backend_interventions_path(format: :json), data: {procedure_computing: procedure.name}
  -# if !f.object.production && params[:production_support_id] && support = ProductionSupport.find_by(id: params[:production_support_id])
    - f.object.production = support.production
  = field_set do
    = f.input :reference_name, as: :hidden
    -#= f.referenced_association :production, new: false, source: :of_current_campaigns, input_html: {data: {procedure: procedure.name, procedure_global: "production", intervention_updater: "global:production"}}
    -#.with-supports
      = f.referenced_association :production_support, new: false, source: :of_current_campaigns, input_html: {data: {procedure: procedure.name, procedure_global: "support", intervention_updater: "global:support"}}
    = f.referenced_association :issue
    -#= f.input :recommended, show: :prescriptions
    -#= f.input :provisional
    -#= f.referenced_association :production
    - started_at_as = nil
    - if Intervention.force_started_at? && procedure.can_compute_duration?
      - f.object.started_at ||= Time.zone.now
      - started_at_as = :hidden
    -#= f.input :started_at, input_html: {data: {procedure: procedure.name, procedure_global: "at", intervention_updater: "global:at"}}, as: started_at_as
    - stopped_at_as = nil
    - if Intervention.force_stopped_at? && procedure.can_compute_duration?
      - stopped_at_as = :hidden
    -#= f.input :stopped_at, input_html: {data: {procedure: procedure.name, procedure_global: "stopped_at", intervention_updater: "global:stopped_at"}}, as: stopped_at_as
    = f.input :description
    = f.custom_fields
    #prescriptions
      = f.referenced_association :prescription
      -#= f.referenced_association :recommender
    #working-periods
      - unless f.object.working_periods.any?
        - stopped_at ||= Time.zone.now
        - started_at ||= stopped_at - 1.hour
        - f.object.working_periods.new(started_at: started_at, stopped_at: stopped_at)
      = f.nested_association(:working_periods)

  = field_set :casting do
    -# puts params.to_yaml.green
    - procedure.each_variable do |variable|
      - reflection = variable.reflection_name
      -# puts f.object.send(reflection).inspect.magenta
      - list = f.object.send(reflection).select{|v| v.reference_name.to_s == variable.name.to_s}
      - f.object.send(reflection).new(reference_name: variable.name) unless list.any?
      - list = f.object.send(reflection).select{|v| v.reference_name.to_s == variable.name.to_s}
      -# puts variable.name.to_s.yellow
      -# puts list.inspect
      - id = "cast-#{variable.name}"
      .intervention-cast{class: "intervention-#{variable.type}", id: id}
        = f.simple_fields_for(reflection, list) do |c|
          = render "cast_fields", f: c, variable: variable
      .links= link_to_add_association "add_x".tl(x: variable.human_name), f, reflection, partial: "cast_fields", data: {association_insertion_node: "##{id}", association_insertion_method: :append}, render_options: {locals: {thing: reflection, variable: variable}}, class: 'nested-add'
      -# f.object.casts.new(reference_name: name)

    -# if f.object.new_record? && f.object.casts.empty?
      - procedure.variables.each do |name, variable|
        - f.object.casts.new(reference_name: name)
    -#= f.backend_fields_for :casts do |v|
      = render 'old_cast_fields', f: v, procedure: procedure


- else # Root Procedure Natures
  - main_campaign_selector
  - proposed = []
  - default_params = {action: :new}
  .activity-families{data: {collapse: "accordion"}}
    - Activity.of_campaign(current_campaign).pluck(:family).collect{|f| Nomen::ActivityFamily[f]}.compact.uniq.sort{|a,b| a.human_name <=> b.human_name }.each do |family|
      - procedures = Procedo.procedures_of_activity_family(family.name.to_sym)
      - if procedures.any?
        - proposed += procedures
        %h3
          %i
          = family.human_name
        .proposal-list
          - procedures.sort{|a,b| a.human_name <=> b.human_name }.each do |procedure|
            = link_to(procedure.human_name, default_params.merge(reference_name: procedure.name).merge(params), class: "btn")
    - remainings = Procedo.procedures - proposed
    - if remainings.any?
      %h3.others
        %i
        = :others.tl
      .proposal-list
        - remainings.sort{|a,b| a.human_name <=> b.human_name }.each do |procedure|
          = link_to(procedure.human_name, default_params.merge(reference_name: procedure.name).merge(params), class: "btn")

  - f.clear_actions!
