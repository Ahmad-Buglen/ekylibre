- main_toolbar do |t|
  - t.edit resource
  - t.export :intervention_sheet
  - t.destroy
  - if resource.runnable?
    - t.run resource, method: :post, "data-confirm" => :are_you_sure.tl

= cobbles do |c|
  - count = 0
  - map = visualization do |v|
    - v.background "OpenStreetMap.HOT"
    - v.background "OpenStreetMap.Mapnik"
    - v.background "Thunderforest.Landscape"
    - v.background "Esri.WorldImagery"
    - for cast in resource.product_parameters
      - shape = cast.shape
      - shape ||= cast.actor.shape(at: resource.started_at) if cast.actor
      - if shape
        - v.serie cast.id, [{name: cast.name, shape: shape}]
        - v.simple (cast.actor ? cast.actor.name : cast.variant ? cast.variant.name : cast.name), cast.id, fill_color: cycle(theme_colors)
        - count += 1
    - for cast in resource.product_parameters
      - if cast.crumbs.any?
        -# raise cast.crumbs.reorder(:read_at).collect{|c| c.metadata.symbolize_keys.merge(name: cast.name, point: [c.geolocation.y, c.geolocation.x])}.inspect
        :ruby
          infos = {:right_flow => "Débit droit", :left_flow => "Débit gauche", :wind_speed => "Vitesse du vent", :tank_level => "Niveau de la cuve"}
          data = cast.crumbs.reorder(:read_at).collect do |c|
            infos.keys.inject({}) do |h,k|
              h[k] = Measure.new(c.metadata[k.to_s]).to_f
              h
            end.merge(name: cast.name, shape: c.geolocation, width: 12)
          end
        - v.serie "crumb_#{cast.id}", data
        - infos.each do |info, label|
          - if params[:heatmap].to_i > 0
            - v.heatmap "heatmap_#{info}", "crumb_#{cast.id}", reference: info.to_s.camelcase(:lower), label: label + " (Heatmap)"
          - if params[:heatmap].to_i <= 0 or params[:band].to_i > 0
            - v.band    "band_#{info}", "crumb_#{cast.id}", reference: info.to_s.camelcase(:lower), label: label + " (Bande)"
        -# v.heatmap (cast.actor ? cast.actor.name : cast.variant ? cast.variant.name : cast.name), "heatmap_#{cast.id}", reference: :leftFlow
        - count += 1
    - v.control :zoom
    - v.control :scale
    - v.control :fullscreen
    - v.control :layer_selector
  - if count > 0
    - c.cobble :resource_map, title: :map do
      = map
  - c.cobble(:costs) do
    = infos(class: 'costs') do
      - total = 0
      - for type in [:input, :tool, :doer]
        - cost = (resource.cost(type) || 0.0).round.to_i
        - total += cost
        .big-info.cost
          %span.title= "evaluated_#{type}_cost".tl
          %span.value
            %i.picto{class: "picto-#{type}"}
            = cost.l(currency: Preference[:currency])
      .big-info.cost.important
        %span.title= "total_cost".tl
        %span.value= total.l(currency: Preference[:currency])

  - c.cobble(:product_parameters) do
    %ul.product_parameters= render partial: "cast", collection: resource.product_parameters

  - c.cobble(:general_informations) do
    .big-infos
      .big-info.important
        %span.title= Intervention.human_attribute_name(:state)
        %span.value= lights(resource.status)
      .big-info
        %span.title= Intervention.human_attribute_name(:duration)
        %span.value
          %i.picto.picto-clock-o
          = human_duration(resource.duration)
    .info
      %span.title= Intervention.human_attribute_name(:started_at)
      %span.value= resource.started_at.l
    .info
      %span.title= Intervention.human_attribute_name(:stopped_at)
      %span.value= resource.stopped_at.l
    .info
      %span.title= Intervention.human_attribute_name(:production)
      %span.value= link_to(resource.production.name, {controller: :productions, action: :show, id: resource.production})

    - if resource.production_support
      .info
        %span.title= :production_support.tl
        %span.value= link_to(resource.production_support.name, {controller: :production_supports, action: :show, id: resource.production_support})

      - if resource.storage
        .info
          %span.title= ProductionSupport.human_attribute_name(:storage)
          %span.value= link_to(resource.storage.name, {controller: :products, action: :show, id: resource.storage})

    - if resource.prescription
      .info
        %span.title= Intervention.human_attribute_name(:prescription)
        %span.value= link_to(resource.prescription.name, {controller: :prescriptions, action: :show, id: resource.prescription})

    - if resource.issue
      .info
        %span.title= Intervention.human_attribute_name(:issue)
        %span.value= link_to(resource.issue.name, {controller: :issues, action: :show, id: resource.issue})

    - if resource.description?
      .info
        %span.title= Intervention.human_attribute_name(:description)
        %span.value= resource.description
