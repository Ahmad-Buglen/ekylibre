= kujaku do |k|
  - k.text
  -# k.multi_choice :state, [:done, :undone].map{ |s| [s.tl, s] }
  - k.helper do
    %label= Intervention.human_attribute_name(:reference_name)
    = select_tag(:procedure_name, options_for_select([[]] + Intervention.used_procedures.collect{|p| [p.human_name, p.name.to_s]}.sort_by(&:first), params[:procedure_name]))
  - if current_campaign
    - productions = ActivityProduction.of_campaign(current_campaign)
    - targets = InterventionTarget.joins(:product)
    - if productions && productions.any?
      - k.helper do
        %label= ActivityProduction.human_attribute_name(:support)
        = select_tag(:product_id, options_for_select([[]] + targets.select(:product_id).distinct.collect{|u| [u.product.work_name, u.product_id]}, params[:product_id]))
        -#= select_tag(:support_id, options_for_select([[]] + productions.joins(:support).reorder('products.work_number').collect{|u| [u.work_name, u.id]}, params[:support_id]))

- main_toolbar do |t|
  = t.new(nature: :request, label: :add_intervention_request.tl)
  = t.new(nature: :record, label: :add_intervention_record.tl )
  - if current_user.crumbs.unconverted.any?
    - count = current_user.crumbs.unconverted.where(nature: "start").count
    = t.index(params: {controller: :crumbs}, label: :validate_crumbs_for_x_interventions.tl(count: count), tool: "my-location")

- main_type_period_selector
- main_period_selector

- if current_campaign
  - productions = ActivityProduction.of_campaign(current_campaign)
  - if productions.any?
    = janus do |j|
      - j.face :cobbles do

        - campaign ||= current_campaign
        - current_period_type = current_user.current_period_type
        - current_period = current_user.current_period

        - search_params = params.except(:controller, :action)
        - search_params[:period_type] = current_user.current_period_type
        - search_params[:period] = current_user.current_period

        - interventions_requested = Intervention.with_unroll(search_params.merge({ :nature => :request }))
        - interventions_in_progress = Intervention.with_unroll(search_params.merge({ :nature => :record, :state => :in_progress }))
        - interventions_done = Intervention.with_unroll(search_params.merge({ :nature => :record, :state => :done }))
        - interventions_validate = Intervention.with_unroll(search_params.merge({ :nature => :record, :state => :validated }))


        = taskboard params: { id: "interventionsTaskboard", class: "interventions-board"} do |board|

          = modal(id: "taskboard-modal", class: "interventions-modal", size: :large) do
            .modal-body
            .modal-footer


          - edit_icon = content_tag(:i, nil, { :class => "picto picto-long-arrow-right picto--invisible edit-tasks", :title => :title_change_status_selected_interventions.tl })
          - delete_icon = link_to(nil, data: {confirm: :are_you_sure.tl} ) do
            = content_tag(:i, nil, { :class => "picto picto-delete picto--invisible delete-tasks", :title => :title_delete_selected_interventions.tl })
          - headers_actions = [edit_icon, delete_icon]

          - board.headers :class => "taskboard-header--gray" do |header|
            - header.content :requests.tl + " (" + interventions_requested.count.to_s + ")", headers_actions
            - header.content :current.tl + " (" + interventions_in_progress.count.to_s + ")", headers_actions
            - header.content :completed.tl + " (" + interventions_done.count.to_s + ")", headers_actions
            - header.content :validated.tl + " (" + interventions_validate.count.to_s + ")", []

          - board.lines do |line|
            - menu_icon = content_tag(:i, nil, {:class => "task-menu picto picto-keyboard-control"})

            - line.block :class => "requests" do |block|
              - add_tasks(interventions_requested, block)

            - line.block :class => "current" do |block|
              - add_tasks(interventions_in_progress, block)

            - line.block :class => "finished" do |block|
              - add_tasks(interventions_done, block)

            - line.block :class => "validated" do |block|
              - add_tasks(interventions_validate, block)


      - j.face :list do
        = main_list
