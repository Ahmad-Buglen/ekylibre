.timeline-tools
  - timeline.sides.each do |side|
    %span.timeline-tool
      = link_to("#", class: "btn#{' active' unless side.count.zero?}", data: {toggle_timesteps: side.model_name}, disabled: side.count.zero?) do
        = side.human_name
        - if side.count > 0
          %span.badge= side.count
      - if side.new_url?
        = link_to({controller: side.controller_name, action: :new, redirect: request.fullpath}.merge(side.params), class: "btn btn-new") do
          %i
.timeline
  - timeline.steps.each do |step|
    :ruby
      side = step.side
      defaults = {type: h(side.model.model_name.human), author: (step.author ? link_to(step.author.full_name, backend_user_path(step.author)) : :unknown.tl), at: h(step.at.l), ago: content_tag(:span, time_ago_in_words(step.at), title: step.at.l(format: :long))}
      begin
        defaults[:name] = link_to(step.name.to_s, {controller: side.controller_name, action: :show, id: step.record.id})
      rescue ActionController::UrlGenerationError
        defaults[:name] = step.name.to_s
      end

    .timestep{class: side.model_name}
      - if Rails.root.join("app", "views", "backend", "shared", "timeline", "_#{side.model_name}.html.haml").exist?
        = render "backend/shared/timeline/#{side.model_name}", side: side, step: step, defaults: defaults, side.model_name => step.record
      - else
        .log
          - if step.record.respond_to? :status
            %span.status= lights(step.record.status)
          %span.content
            %i.symbol
            - if Rails.root.join("app", "views", "backend", "shared", "timeline", "content", "_#{side.model_name}.html.haml").exist?
              = render "backend/shared/timeline/content/#{side.model_name}", side: side, step: step, defaults: defaults, side.model_name => step.record
            - else
              = :timeline_item.th(defaults)
