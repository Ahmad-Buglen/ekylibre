-#:ruby
  
  # for cartodb map #1 (Simple with category for )
  # 1 simple layer with activity as category
  
  campaign = Campaign.currents.last
  
  dataset_one = []
  
      ProductionSupport.includes({production: [:activity, :campaign, :variant]}, :storage).find_each do |support|
        
        item = {
          name:    support.name,
          shape:   (support.shape ? Charta::Geometry.new(support.shape).transform(:WGS84) : nil),
          campaign:   support.production.campaign.name,
          activity:   support.production.activity.name,
          production: support.production.name,
          variant:    support.production.variant.name,
          tool_cost:  support.tool_cost.to_s.to_f.round(2),
          input_cost: support.input_cost.to_s.to_f.round(2),
          time_cost:  support.time_cost.to_s.to_f.round(2)
        }
        
        dataset_one << item
      end
      
    # for cartodb map #2
    # 3 choropleth layer with nitrogen_balance, phosphorus_balance, potassium_balance as indicator
    
    dataset_two = []
    
      ProductionSupport.includes({production: [:activity, :campaign, :variant]}, :storage).find_each do |support|
        
        item = {
          name:    support.name,
          shape:   (support.shape ? Charta::Geometry.new(support.shape).transform(:WGS84) : nil),
          campaign:   support.production.campaign.name,
          activity:   support.production.activity.name,
          nitrogen_balance: support.nitrogen_balance.to_s.to_f.round(2),
          phosphorus_balance: support.phosphorus_balance.to_s.to_f.round(2),
          potassium_balance: support.potassium_balance.to_s.to_f.round(2),
          provisional_nitrogen_input: support.provisional_nitrogen_input.to_s.to_f.round(2)
        }
        
        dataset_two << item
        
      end

  

      choro = []
  
      dataset_one.each do |item|
        
        if item[:shape]
        
          choro << {style: 'choropleth', choropleth_value: 'area', choropleth_level_number: 7, choropleth_start_color: '#77a1e5', choropleth_end_color: '#910000', category: item[:activity], center: item[:shape].centroid, choropleth_type: 'linear', name: item[:name], area: item[:shape].area, coord: item[:shape].to_geojson, stroke: true , color: 'black', weight: 1, fillColor: 'white', opacity: 1, fill: true, fillOpacity: 0.8}
        
        end
      
      end


:ruby
  data = Plant.all.collect do |p|
    next unless p.shape
    {name: p.name, shape: p.shape, age: (Time.now - p.born_at) / (3600 * 24 * 30) }
  end
      
= kujaku

- main_toolbar do |t|
  - t.new

= beehive do |b|
  - b.cell :plants do
    = visualization :plants do |v|
      - v.background :base, "OpenStreetMap.HOT"
      - v.background :forest_base, "Thunderforest"
      - v.background :water_base, "Thunderforest.Transport"
      - v.background :landscape_base, "Thunderforest.Landscape"
      - v.background :outdoors_base, "Thunderforest.Outdoors"
      - v.choropleth :age, data
      - v.control :zoom
      - v.control :scale
      - v.control :fullscreen
      - v.control :layer_selector
          
  - b.cell :list do
    = list
