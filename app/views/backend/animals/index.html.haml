- main_toolbar do |t|
  = t.export :animal_list, key: Time.zone.now.to_s, resource: @animals
  = t.new data: { target: '#new-animal', toggle: 'modal' }, href: "#"

= janus do |j|
  - j.face :list do
    = kujaku do |k|
      - k.text
      -# k.choice :all, :healthy, :illness
      - k.helper :journal_period_crit
      - k.helper do
        %label= Animal.human_attribute_name(:variant)
        = select_tag(:variant_id, options_for_select([[]] + ProductNatureVariant.of_variety(:animal).order(:name).collect{|u| [u.name, u.id]}, params[:variant_id]))
    = main_list

  - j.face :column do
    .golumn.loading{data: {golumns: 'animal'}}

      .golumn-loading
      .golumn-columns
        .golumn-columns-container{data: { bind: "template: {name: 'golumn-column-template', foreach: groups}"}}
        .golumn-addon
          = link_to("#new-group", class: "golumn-column-add", data: { bind: 'click: $root.toggleNewGroupModal' }) do
            %i

      %script#golumn-column-template{type: 'text/html'}
        .golumn-column
          .golumn-column-header
            .golumn-column-actions
              .checker{data: {bind: 'checkbox: toggleItems'}}
            .golumn-column-handle
              %span.golumn-column-title{data: {bind: 'text: name'}}
          .golumn-column-body
            .add-container.dropzone{data: {bind: "droppable: {active: droppable, options: { hoverClass: 'container-drop-hover', tolerance: 'intersect' , scope: 'items'}}, visible: droppable" }}
              %button.btn.btn-link{type: 'button'}
                %i.icon.icon-plus.text-muted
            %ul.golumn-groups{data: { bind: "template: { name: 'golumn-group-template', foreach: containers }"}}
          -# = link_to('#', data: {target: '#new-animal', toggle: 'modal'}, class: "golumn-column-footer") do
            %i.icon.icon-plus
            %span= "actions.backend/animals.new".t

      %script#golumn-group-template{type: 'text/html'}
        %li.golumn-group{data: {bind: "droppable: {active: droppable, options: { hoverClass: 'container-drop-hover', tolerance: 'intersect' , scope: 'items'} }" }}
          .golumn-group-header
            .golumn-group-actions
              .collapser{data: { bind: "click: toggle, css: {'active': !hidden()}"}}
            %span.golumn-group-title{data: { bind: 'text: name'}}
            %span.badge.golumn-group-badge{data: { bind: 'text: count'}}
          .golumn-group-body{data: { bind: "css: {'hide':hidden}"}}
            %div{data: { bind: "template: { name: 'golumn-item-template', foreach: items }"}}

      %script#golumn-item-template{type: 'text/html'}
        .golumn-item{data: { bind: "draggable: {active: checked, options: {cursor: 'move', opacity: 1, revert: true, cursorAt: { left: 65 }, scrollSensitivity: 65, scrollSpeed: 30, scope: 'items'}}, checkbox: $data.checked, css: stateClass"}}
          .golumn-item-actions
            .details{data: { bind: ' click: $root.toggleAnimalDetailsModal' }}
          -#%span.golumn-item-handle
            %i.icon.icon-ellipsis-v{ data: { bind: 'visible: checked'}}
          %i.sex.icon{data: {bind: 'css: $data.sexClass'}}
          %span.golumn-item-title{data: { bind: 'text: $data.name'}}

    = modal(:new_animal) do
      .modal-body
        .placeholding-message= :choose_creation_mode.tl
      .modal-footer
        = link_to Parcel.model_name.human, new_backend_parcel_path(nature: :incoming), class: 'btn btn-default'
        -# Procedo.procedures_of_nature(:viviparous_birth).each do |procedure|
          = link_to procedure.human_name, new_backend_intervention_path(reference_name: procedure.name), class: 'btn btn-default'
        = link_to "actions.backend/animals.new".t, new_backend_animal_path, class: 'btn btn-default'


    = modal(:new_group, data: {bind: 'modal: showNewGroupModal(), with: newGroupModalOptions', backdrop: 'static', keyboard: false}, close_html: {data: {bind: 'click: $root.cancelNewGroup'}}) do
      .modal-body
        .control-group
          %label.control-label= ProductGroup.human_attribute_name(:name)
          .controls
            %input{type: 'text', data: { bind: 'value: group'}}
        .control-group
          %label.control-label= ProductGroup.human_attribute_name(:variant)
          .controls
            = select_tag(:variant_id, options_for_select(ProductNatureVariant.of_variety(:animal_group).map{|v| [v.name, v.id]}), data: {bind: 'value: variantId'})
      .modal-footer
        = link_to("#", data: {bind: 'click: $root.addGroup'}, class: "btn btn-default") do
          = :add.tl


    = modal(:move_animal, data: {bind: 'modal: moveAnimalsModal.show(), with: moveAnimalsModal', backdrop: 'static', keyboard: false}, close_html: {data: {bind: 'click: $root.resetMoveAnimalsModal'}}) do
      = form_tag change_backend_animals_path, remote: true, class: 'form-horizontal v-spacer', data: {bind: 'submit: $root.moveAnimals', move_animals_updater: true} do
        .modal-body
          .alert.alert-danger{data: {bind: 'visible: alert.length > 0; text: alert'}}
          .control-group
            = label_tag(:moved, :move.ta, class: 'control-label')
            .controls{data: {bind: 'foreach: animals'}}
              %span{data: {bind: 'text: name'} }
            = hidden_field_tag :animals_ids, nil, data: {bind: 'value: animals_ids'}
          .control-group{data: {bind: 'if: group' } }
            = label_tag(:group, 'enumerize.equipment.variety.animal_group'.t, class: 'control-label')
            .controls{data: {bind: 'text: group().name'}}
          .control-group
            = label_tag(:container, :container.tl, class: 'control-label')
            .controls
              = text_field_tag :container, nil, data: { selector: url_for(controller: 'backend/products', action: 'unroll', 'scope[availables][][at]': Time.zone.now, 'scope[of_expression]': 'can store(animal)'), bind: 'selector: container'}
          .control-group
            = label_tag(:started_at, Intervention.human_attribute_name(:started_at), class: 'control-label')
            .controls
              = datetime_field_tag(:started_at, nil, data: { bind: 'value: started_at'})
          .control-group
            = label_tag(:stopped_at, Intervention.human_attribute_name(:stopped_at), class: 'control-label')
            .controls
              = datetime_field_tag(:stopped_at, nil, data: { bind: 'value: stopped_at'})
          .control-group
            = label_tag(:worker, 'procedure_parameters.caregiver'.t, class: 'control-label')
            .controls
              = # TODO: set worker abilities
              = text_field_tag :worker, nil, data: { selector: url_for(controller: 'backend/workers', action: 'unroll', 'scope[availables][][at]': Time.zone.now), bind: 'selector: worker'}
          .control-group
            = label_tag(:variant, :new_nature.tl , class:'control-label')
            .controls
              = text_field_tag :variant, nil, data: { selector: url_for(controller: 'backend/product_nature_variants', action: 'unroll', 'scope[availables]': true, 'scope[of_variety]': 'animal'), bind: 'selector: variant' }
        .modal-footer
          %button.btn.btn-default{type: 'submit'}
            %i.icon.icon-plus
            = :move.ta


    = modal(:animal_details, data: { bind: 'modal: showAnimalDetailsModal(), with: animalDetailsModalOptions', backdrop: 'static', keyboard: false}, close_html: {data: {bind: 'click: $root.cancelAnimalDetails'}}) do
      .modal-body
        .row
          .col-md-9
            %p
              = Animal.human_attribute_name(:name)
              %span{data: { bind: 'text: name'}}
            %p
              = :sex.tl
              %i.icon{data: {bind: 'css: sexClass'}}
            %p
              = Animal.human_attribute_name(:status)
              %span.lights{data: { bind: 'css: flagClass'}}
                %span.light-go
                %span.light-caution
                %span.light-stop
      .modal-footer
        = link_to("#", data: {bind: 'attr: {href: showUrl}'}, class: "btn btn-default") do
          = :details.tl
