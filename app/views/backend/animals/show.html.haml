= main_toolbar do |t|
  - t.export do |e|
    - e.animal_sheet @animal.identification_number, @animal
  - t.new(:params =>{:controller => :issues, :target_id => @animal.id, :target_type => @animal.class.name})
  - t.edit @animal
  - t.destroy(@animal, :method=>:delete, "data-confirm" => tg(:are_you_sure_you_want_to_delete)) if @animal.destroyable?

= beehive do |b|
  - b.hbox do
    - b.cell :general do
      - if @animal.picture.exists?
        .picture= image_tag(@animal.picture.url(:identity))
      .info
        %span.title= Animal.human_attribute_name(:work_number)
        %span.value= @animal.work_number
      .info
        %span.title= Animal.human_attribute_name(:sex)
        %span.value= @animal.sex
      - if @animal.born_at
        .info
          %span.title= Animal.human_attribute_name(:age)
          %span.value
            :ruby
              seconds = (@animal.dead_at||Time.now) - @animal.born_at
              vals = []
              if (seconds/1.year).floor > 0
                vals << "labels.x_years".t(:count => (seconds/1.year).floor)
                seconds -= 1.year * (seconds/1.year).floor
              end
              if (seconds/1.month).floor > 0
                vals << "labels.x_months".t(:count => (seconds/1.month).floor)
                seconds -= 1.month * (seconds/1.month).floor
              end
              if (seconds/1.day).floor > 0
                vals << "labels.x_days".t(:count => (seconds/1.day).floor)
                seconds -= 1.day * (seconds/1.day).floor
              end
            = vals.to_sentence
      - if @animal.mother
        .info
          %span.title= Animal.human_attribute_name(:mother)
          %span.value= link_to(@animal.mother.name, {:action => :show, :id => @animal.mother.id})
      - if @animal.father
        .info
          %span.title= Animal.human_attribute_name(:father)
          %span.value= link_to(@animal.father.name, {:action => :show, :id => @animal.father.id})
      .info
        %span.title= Animal.human_attribute_name(:current_net_mass)
        %span.value= @animal.net_mass
      .info
        %span.title= Animal.human_attribute_name(:current_healthy)
        %span.value= @animal.healthy
      - if container = @animal.container
        .info
          %span.title= Animal.human_attribute_name(:container)
          %span.value= link_to(container.name, backend_product_path(container))
    - b.cell(:variable_indicators) do
      :ruby
        indicators = resource.variable_indicators.delete_if{|i| ![:measure, :decimal].include?(i.datatype)}
        series = []
        now, window = Time.now, 1.year
        min = (resource.born_at ? resource.born_at : now - window)
        min = now - window if (now - min) < window
        for indicator in indicators # [:population, :nitrogen_concentration].collect{|i| Nomen::Indicators[i] }
          items = ProductIndicatorDatum.where(indicator_name: indicator.name, product: resource).where("? < measured_at AND measured_at < ?", min, now).order(:measured_at)
          next unless items.any?
          data = []
          data << [min.to_usec, resource.get(indicator, at: min).to_f.to_s.to_f]
          data += items.inject({}) do |hash, pair|
            hash[pair.measured_at.to_usec] = pair.value.to_d
            hash
          end.collect{|k,v| [k, v.to_s.to_f] }
          data << [now.to_usec, resource.get(indicator, at: now).to_f.to_s.to_f]
          series << {name: indicator.human_name, data: data}
        end

      = spline_chart(series, legend: { layout: 'vertical', align: 'bottom', vertical_align: 'bottom'}, y_axis: {title: { text: :indicator.tl}}, x_axis: {type: 'datetime', title: { enabled: true, text: :months.tl}, min: min.to_usec})

    -# b.cell :indicators_evolutions do
      - if @animal.born_at
        :ruby
          #
          #
          started_at = @animal.born_at.to_date
          stopped_at = @animal.dead_at.to_date if @animal.dead_at
          stopped_at ||= Date.today

          series = []
          categories = {}
          date = started_at
          while date < stopped_at
            categories[date.year.to_s + date.month.to_s.rjust(3, '0')] = date.l(:format => "%b %Y")
            date = date >> 1
          end

          #
          #  data for bar chart indicator and by month
          #
          bar_indicators = [:net_mass].collect{|i| Nomen::Indicators[i] }
          for indicator in bar_indicators
            items = ProductIndicatorDatum.where(indicator_name: indicator.name, :product => @animal).measured_between(started_at, stopped_at)
            if items.count > 0
              item_h = items.averages_of_periods.sort.inject({}) do |hash, pair|
                hash[pair.expr.to_i.to_s] = pair.average.to_s.to_d
                hash
              end
              series << {type: 'column', name: indicator.human_name, data: normalize_serie(item_h, categories.keys), tooltip: {value_suffix: ' kg'} }
            end
          end

          #
          #  data for bar chart indicator and by month
          #
          spline_indicators = [:healthy].collect{|i| Nomen::Indicators[i] }
          for indicator in spline_indicators
            items = ProductIndicatorDatum.where(indicator_name: indicator.name, :product => @animal).measured_between(started_at, stopped_at)
            if items.count > 0
              item_h = items.counts_of_periods(column: :boolean_value).sort.inject({}) do |hash, pair|
                hash[pair.expr.to_i.to_s] = pair.count.to_s.to_d
                hash
              end
              series << {type: 'spline', y_axis: 1, name: indicator.human_name, data: normalize_serie(item_h, categories.keys),  tooltip: {value_suffix: ' fois'}, marker: {line_width: 2}}
            end
          end
        = column_chart(series, y_axis: [{labels: {format: '{value} kg'}, title: {text: :net_mass.tl}}, {labels: {format: '{value} fois'},title: {text: :illness.tl}, opposite: true}], x_axis: { categories: categories.values}, tooltip: {shared: true}, legend: {})

      - else
        = no_data


  - b.hbox do

    - b.cell :details do
      = attributes_list do |l| # liste des champs Ã  afficher
        - l.attribute :name
        - l.attribute :variety, url: true
        - l.attribute :born_at
        - l.attribute :dead_at
        - l.attribute :sex, :through => :indicator_data
        - l.attribute :mother, url: true
        - l.attribute :father, url: true
        - l.attribute :identification_number
        - l.attribute :description
    - b.cell(:children) do
      = list(:children)

  - b.hbox do
    - b.cell(:places) do
      = list(:places)
    - b.cell(:groups) do
      = list(:groups)

  - b.hbox do
    - b.cell(:issues) do
      = toolbar do |t|
        - t.new(:params =>{:controller => :issues, :target_id => @animal.id, :target_type => @animal.class.name})
      = list(:issues)
    - b.cell(tl(:x_intervention_casts, :count => @animal.intervention_casts.count)) do
      = toolbar do |t|
        - t.new(:params =>{:controller => :interventions, :target_id => @animal.id})
      = list(:intervention_casts)
    - b.cell(tl(:x_indicators, :count => @animal.indicator_data.count)) do
      = toolbar do |t|
        - t.new(:params =>{:controller => :product_indicator_data, :product_id => @animal.id})
      = list(:indicators)