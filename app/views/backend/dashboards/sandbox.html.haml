:css
  h2
  {
    font-weight: bolder;
    color: red;
  }

  h3
  {
    font-weight: bold;
    color: green;
  }
  .bold{font-weight: bold;}

  .italic{font-style: italic}

  .key
  {
    font-style: italic;
    color: blue;
  }

  .result
  {
    font-style: italic;
    color: purple;
  }

  .variety
  {
    color: orange;
  }



:ruby

  require 'logger'
  logger = Logger.new(STDOUT)
  logger.level = Logger::INFO

  require 'benchmark'

  ############################
  # generating data for test #
  ############################

  # returns an array of actors from a real intervention example
  def actors_from_intervention(procedure_name)
    res = []
    intervention = Intervention.where("reference_name = '#{procedure_name}' AND state = 'done'").last
    if intervention.present?
      intervention.casts.each do |ic| # InterventionCast
        res << Product.find(ic.actor) unless ic.reference.new?
      end
    else
      return nil
    end
    return res
  end

  product_ids = Product.pluck(:id)
  # select totally random actors
  random_actors = []
  2.times do
    random_actors << Product.find(product_ids.sample)
  end

   # Struct for massive testing
  Struct.new("ProcedureData", :procedure, :actors)

  massive_test_hash = {}
  Procedo.list.keys.each do |k|
    if  actors_from_intervention(k).present?
      massive_test_hash[k] = Struct::ProcedureData.new(Procedo[k], actors_from_intervention(k))
    end
  end

  # select three actors from a random intervention
  almost_random_actors = actors_from_intervention(massive_test_hash.keys.sample)

  # listing procedures for which we have interventions
  intervention_list = []
  Procedo.list.keys.each do |procedure|
    intervention_list << procedure unless actors_from_intervention(procedure).blank?
  end

%h2 Benchmarks
%h3 benchmarking #match

%ul
- Benchmark.bm do |bm|
  %li.key
    with 1 actor:
  %li.result
    = "bm.report('testing #match with one actor'){Intervention.match([random_actors.first])} # remove quote"
