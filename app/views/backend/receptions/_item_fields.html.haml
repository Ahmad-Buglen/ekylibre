- item ||= f.object
- variant = Maybe(item.variant)
- f.object.currency = Preference[:currency]
- visibleBlock = f.object.errors.present? ? "item-display" : "item-form"

%tbody.nested-fields.delivery-item.incoming-parcel-item
  %tr.item-display{ class: ("hidden" if visibleBlock == "item-form") }
    %td.act
      - if f.object.destroyable?
        = link_to_remove_association(content_tag(:i) + h(:destroy.tl), f, 'data-no-turbolink' => true, class: 'destroy remove remove-item')
    %td.act
      = link_to("#", class: 'edit edit-item', data: { edit: "item-form" }) do
        %i
        = :edit.tl
    %td
      %label{ data: { item_value: "input.parcel-item-variant" } }= f.object.variant ? f.object.variant.name : '??????'
    %td
      %label
        %span{ data: { item_value: "input.item-population" } }= f.object.population
        %span{ data: { item_value: "span.item-population-unit-name" } }= f.object.variant ? f.object.variant.unit_name : '#'
    %td
      %label{ data: { item_value: "input.item-pretax-amount" } }= f.object.unit_pretax_amount
    %td
      %label{ data: { item_value: "input.item-delivery-mode:checked" } }= f.object.delivery_mode
  %tr.nested-item-form{ class: ("hidden" if visibleBlock == "item-display") }
    %td{colspan: 6}
      .item-form
        = f.input :purchase_item_id, as: :hidden
        = f.referenced_association(:variant, source: { scope: :stockables_or_depreciables }, input_html: { class: 'parcel-item-variant', data: {product_of_delivery_item: {url: backend_product_nature_variant_path("RECORD_ID", format: :json)}}})
        = f.input :non_compliant, input_html: { data: { warn_if_checked: :non_compliant.tl } }
        -# .errors= item.errors.inspect
        .item-quantifier
          .item-quantifier-population
            = f.input :population do
              = f.input_field :population, class: "item-population", placeholder: '0', data: {"when-item": "unitary", "when-set-value": 1, "when-prop-value": "disabled"}
              %span.add-on.item-population-unit-name
                = variant.unit_name.or_else('#')
        #item-add-storing
          = f.simple_fields_for :storings, f.object.storings do |storing|
            = render 'storing_fields', f: storing
          #storings-footer
          = link_to_add_association :add_storing.tl, f, :storings, partial: 'storing_fields', 'data-association-insertion-node' => '#storings-footer', 'data-association-insertion-method' => :before, class: "btn primary"
        .item-delivery_mode
          = f.input :delivery_mode, as: :radio_buttons, show: '.{{value}}-delivery-mode-options', input_html: { class: 'item-delivery-mode' }
          .transporter-delivery-mode-options
            = f.referenced_association :transporter, source: :transporters, new: {transporter: 1}

        - display = "display: none;" unless variant.identifiable?.or_else(false)
        .no-border{style: display, data: {"when-item": "identifiable", "when-display-value": 'true'}}
          = f.input :name do
            = f.input_field :product_name, placeholder: ParcelItem.human_attribute_name(:product_name)
          = f.input :identification_number do
            = f.input_field :product_identification_number, placeholder: ParcelItem.human_attribute_name(:product_identification_number)
        .buttons
          %button.btn{ data: { cancel: 'item-form' } }= :cancel.tl
          %button.btn.btn-primary{ data: { validate: 'item-form' } }= :validate.tl