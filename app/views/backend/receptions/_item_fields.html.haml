- item ||= f.object
- variant = Maybe(item.variant)
- f.object.currency = Preference[:currency]
- f.object.role = role if defined?(role)
- f.object.delivery_mode = 'none' if f.object.role == 'service' || f.object.role == 'fees'
- non_compliant_message = :non_compliant.tl

%tbody.nested-fields.delivery-item.incoming-parcel-item{ data: { iceberg: true } }
  %tr.item-display.hidden
    %td.act
      - if f.object.destroyable?
        = link_to_remove_association(content_tag(:i) + h(:destroy.tl), f, 'data-no-turbolink' => true, class: 'destroy remove remove-item')
    %td.act
      = link_to("#", class: 'edit edit-item', data: { edit: "item-form" }) do
        %i
        = :edit.tl
    %td.product-column

      %br
      %label{ data: { item_value: "input.item-non-compliant" } }= non_compliant_message if f.object.non_compliant?
      %label{ class: "item-non-compliant-detail-label", data: { item_value: "input.item-non-compliant-detail" } }= f.object.non_compliant_detail
      %td.storage-column
        #storing-display
          %p{ "v-for" => "zone in zones"}
            %strong{ class: "storage-quantity" }= "{{zone.quantity}} {{zone.unit}}"
            %span{ class: "storage-zone" }= "{{zone.name}}"
    %td.quantity-column
      %label
        %span{ data: { item_value: ".total-quantity" } }= f.object.population
        %span{ data: { item_value: "span.storage-unit-name" } }= f.object.variant ? f.object.variant.unit_name : '#'
    %td.delivery-mode-column
      %label{ data: { item_value: "input.item-delivery-mode:checked" } }= f.object.delivery_mode if f.object.delivery_mode != "none"

  %tr.nested-item-form{ class: mode == 'prefilled' ? 'prefilled' : '' }
    %td.cell-form{colspan: 6}
      .item-form
        = f.hidden_field :purchase_order_to_close_id, class: "purchase-order-to-close-id"

        .form-block{ class: f.object.role.to_s }
          = f.input :role, as: :hidden

          - if f.object.merchandise?
            = render 'merchandise_fields', f: f, variant: variant, non_compliant_message: non_compliant_message
          - else
            = render 'non_merchandise_fields', f: f, variant: variant, non_compliant_message: non_compliant_message

        .form-field.second-row
          = f.input :purchase_order_item_id, as: :hidden, input_html: { class: "purchase-item-attribute" }
          .item-form
            .control-group.reconciliation-item-state-block
              - reconciliation_state = f.object.reception.reconciliation_state
              %label.reconciliation-item-state= :element_status.tl
              %span.purchase-process-reconciliation.reconciliation-state.no-reconciliate-state{ class: reconciliation_state == 'to_reconcile' ? '' : 'hidden' }
                = :to_reconciliate.tl
              %span.purchase-process-reconciliation.reconciliation-state.reconcile-state{ class: reconciliation_state == 'reconcile' ? '' : 'hidden' }
                = :reconcile.tl
            .non-compliant
              = f.input :non_compliant, input_html: { class: 'item-non-compliant', data: { warn_if_checked: non_compliant_message, input_to_show: '.non_compliant_detail_text', with_value: true } }
            .non_compliant_detail_text.hidden
              = f.input :non_compliant_detail, label: :detail.tl, input_html: { class: 'item-non-compliant-detail', data: { interpolate_if_input: 'input.item-non-compliant', with_value: true } }

            = f.referenced_association :project_budget
            .equipment_and_reconciliate
              = f.referenced_association :equipment, source: :tools, label: :equipment.tl, input_html: {data: { remember: 'equipment'}}
              = button_tag :reconciliate_with_purchases_orders.tl, id: 'showItemReconciliationModal', class: 'btn btn-default', type: :button

        .buttons
          %button.btn{ data: { cancel: 'item-form' } }= :cancel.tl
          %button.btn.btn-primary{ data: { validate: 'item-form' } }= :validate.tl
