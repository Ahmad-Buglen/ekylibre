- main_toolbar do |t|
  = t.edit resource
  - budget = resource.budget_of(current_campaign)
  - if budget && budget.items.any?
    = t.edit params: {controller: :activity_budgets, id: budget.id}, label: :edit_budget.tl
  - if resource.use_countings?
    = link_to(PlantDensityAbacus.model_name.human, { controller: :plant_density_abaci, action: :index}, class: 'btn btn-default')
  - if current_campaign && resource.productions.of_campaign(current_campaign).empty?
    = tool_to(:close.ta, { controller: :campaigns, action: :close, id: current_campaign.id, activity_id: resource.id, redirect: url_for(controller: :campaigns, action: :show, id: current_campaign.id) }, method: :delete, data: { confirm: :are_you_sure.tl }, tool: :remove)

- main_campaign_selector

= cobbles do |c|

  - c.cobble :general_informations do
    = infos do
      - if resource.production_system
        .med-info
          %span.title= Activity.human_attribute_name(:production_system)
          %span.value= resource.human_production_system_name
      .med-info
        %span.title= Activity.human_attribute_name(:use_countings)
        %span.value
          %i.picto{class: "picto-#{resource.use_countings ? :done : :clear}"}
      .med-info
        %span.title= Activity.human_attribute_name(:use_gradings)
        %span.value
          %i.picto{class: "picto-#{resource.use_gradings ? :done : :clear}"}

  - if resource.use_gradings && (resource.use_grading_calibre || resource.measure_grading_net_mass || resource.measure_grading_sizes)
    - c.cobble :gradings do
      = infos do
        - if resource.use_grading_calibre
          .med-info
            %span.title= Activity.human_attribute_name(:grading_calibre_indicator_name)
            %span.value
              %i.picto{class: "picto-ban"}
              = "#{resource.grading_calibre_indicator_name.l} (#{Nomen::Unit[resource.grading_calibre_unit_name].symbol})"
        - if resource.measure_grading_net_mass
          .med-info
            %span.title= Activity.human_attribute_name(:grading_net_mass_unit_name)
            %span.value
              %i.picto{class: "picto-network-wifi"}
              = Nomen::Unit[resource.grading_net_mass_unit_name].symbol
        - if resource.measure_grading_sizes
          .med-info
            %span.title= Activity.human_attribute_name(:grading_sizes_indicator_name)
            %span.value
              %i.picto{class: "picto-arrows-v"}
              = "#{resource.grading_sizes_indicator_name.l} (#{Nomen::Unit[resource.grading_sizes_unit_name].symbol})"


  - if current_campaign
    - c.cobble :budget do
      = render 'budget'
  -# c.cobble :details do
    = attributes_list do |l|
      - l.attribute :nature
      - l.attribute :family
      - l.attribute :production_system_name
      - if resource.with_cultivation
        - l.attribute :cultivation_variety
      - if resource.with_supports
        - l.attribute :support_variety
      - l.attribute :production_cycle

  - if resource.plant_farming? && current_campaign && resource.productions.of_campaign(current_campaign).any?

    - c.cobble :map do
      = model_map(resource.productions.of_campaign(current_campaign), shape_method: :support_shape, color: resource.color)

  - if resource.with_supports
    - c.cobble(:productions) do
      = render 'productions'

  - if resource.auxiliary?
    - c.cobble(:distributions, title: Activity.human_attribute_name(:distributions)) do
      :ruby
        data = []
        resource.distributions.reorder(:affectation_percentage).find_each do |distribution|
          y = distribution.affectation_percentage.to_s.to_f
          data << {name: :label_value.th(label: distribution.main_activity_name, value: number_to_percentage(y, precision: 2)), y: y }
        end
        series = [{type: 'pie', name: Activity.human_attribute_name(:distributions), data: data}]

      = pie_highcharts(series, legend: true)
