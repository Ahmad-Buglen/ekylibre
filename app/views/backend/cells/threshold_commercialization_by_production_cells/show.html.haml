- if @production and @production.budgets.any?
  :ruby
    balance = 0
    charges = 0
    revenus = 0
    equipment_balance = 0
    worker_balance = 0
    preparation_balance = 0
    other_balance = 0
    divider = 1.0
    currency = Preference[:currency]
    title_legend_complement = ''
    # get working indicator and unit (ex: net_surface_area and hectare)
    production_working_indicator = @production.working_indicator
    production_working_unit = @production.working_unit
    production_working_unit_nomen = Nomen::Units[production_working_unit.to_sym] if production_working_unit

    if production_working_unit
      title_legend_complement = " (#{currency}/#{production_working_unit_nomen.human_name})"
    end

    if production_working_indicator and production_working_indicator.to_sym == :net_surface_area
      divider = @production.net_surface_area.to_d(@production.working_unit.to_sym)
    end


    data_series = []
    data_worker = []
    data_equipment = []
    data_preparation = []
    data_indirect_charges = []
    series = []
    if @production.revenues
      for revenue in @production.revenues
        value = revenue.items.sum(:global_amount)
        data_series << { name: revenue.variant.name, y: (value/divider).to_s.to_f, color: "#000077"}
        revenus += value
        balance += value
      end
    end

    if @production.expenses
      for expense in @production.expenses
        value = expense.items.sum(:global_amount)
        variant_variety = Nomen::Varieties.find(expense.variant.variety)
        if variant_variety <= :worker
          worker_balance += value
        elsif variant_variety <= :equipment
          equipment_balance += value
        elsif variant_variety <= :preparation
          preparation_balance += value
        else
          other_balance += value
        end
        charges += value
        balance -= value
      end

    end

    #
    direct_charges_by_working_unit = (charges.to_f/ divider.to_f).round(2).to_s.to_f rescue 0.0
    indirect_charges_by_working_unit = (-1 * (@production.indirect_budget_amount.to_f / divider.to_f)).round(2).to_s.to_f rescue 0.0
    global_charges_by_working_unit = direct_charges_by_working_unit + indirect_charges_by_working_unit
    asset_charges = 0.32 * indirect_charges_by_working_unit.to_f
    # équation
    # y : prix d'objectif en [€/ton]
    # a : quantité de budget_item du salaire de l'exploitant [mois]
    a = 12
    # x : salaire mensuel de l'exploitant [€] proratisé à l'unité d'oeuvre et distribué entre activités
    # TODO
    x = 0
    # b : pourcentage de variation du rendement [%]
    b = 1
    # z : rendement de la prodution (budget_item, sens: revenus et varieties: grain)
    budgets = @production.revenues.where(variant_id: ProductNatureVariant.of_variety(:grain).derivative_of(@production.variant.variety).pluck(:id))
    # puts budgets.inspect.yellow
    if budgets.first
      z = budgets.first.items.average(:quantity).to_s.to_f
      # puts z.inspect.green
      # c : charges globales [global_charges_by_working_unit]
      c = global_charges_by_working_unit.to_s.to_f
      # y [€/ton] = (ax + c [€/Ha]) / bz[qt/Ha] * 10
      y = (((a * x) + c) / (b * z)) * 10
      # puts @production.name
      # puts y.to_s.to_f.inspect.red
    end

  .med-info.important
    %span.title= :direct_charges.tl + title_legend_complement
    %span.value= link_to(direct_charges_by_working_unit.to_s, {controller: "/backend/productions" ,action: :show, id: @production.id})
    %span.title= :indirect_charges.tl + title_legend_complement
    %span.value= indirect_charges_by_working_unit
    %span.title= "Dont Ammortissement : "
    %span.value=  asset_charges.round(2).to_s + title_legend_complement
- else
  = no_data
