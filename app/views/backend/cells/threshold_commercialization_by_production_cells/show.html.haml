- if @production and @production.budgets.any?
  :ruby
    balance = 0
    expenses = 0
    revenues = 0
    equipment_balance = 0
    worker_balance = 0
    preparation_balance = 0
    other_balance = 0
    currency = Preference[:currency]
    title_legend_complement = " (#{currency})"
    # get working indicator and unit (ex: net_surface_area and hectare)
    if support_variant_unit = Nomen::Unit[@production.support_variant_unit]
      title_legend_complement = " (#{currency}/#{support_variant_unit.human_name})"
    end

    supports_quantity = @production.supports_quantity.round(4)
    supports_quantity = 1.0 if supports_quantity.zero?

    data_series = []
    data_worker = []
    data_equipment = []
    data_preparation = []
    data_indirect_expenses = []
    series = []
    @production.revenues.each do |revenue|
      value = revenue.amount
      data_series << { name: revenue.variant.name, y: (value/supports_quantity).to_s.to_f, color: "#000077"}
      revenues += value
      balance += value
    end

    @production.expenses.each do |expense|
      value = expense.amount
      variant_variety = Nomen::Variety.find(expense.variant.variety)
      if variant_variety <= :worker
        worker_balance += value
      elsif variant_variety <= :equipment
        equipment_balance += value
      elsif variant_variety <= :preparation
        preparation_balance += value
      else
        other_balance += value
      end
      expenses += value
      balance -= value
    end

    #
    direct_expenses_by_support_variant_unit = (expenses.to_f/ supports_quantity.to_f).round(2).to_s.to_f rescue 0.0
    indirect_expenses_by_support_variant_unit = (-1 * (@production.indirect_budget_amount.to_f / supports_quantity.to_f)).round(2).to_s.to_f rescue 0.0
    global_expenses_by_support_variant_unit = direct_expenses_by_support_variant_unit + indirect_expenses_by_support_variant_unit
    asset_expenses = 0.32 * indirect_expenses_by_support_variant_unit.to_f
    # équation
    # y : prix d'objectif en [€/ton]
    # a : quantité de budget_item du salaire de l'exploitant [mois]
    a = 12
    # x : salaire mensuel de l'exploitant [€] proratisé à l'unité d'oeuvre et distribué entre activités
    # TODO
    x = 0
    # b : pourcentage de variation du rendement [%]
    b = 1
    # z : rendement de la prodution (budget_item, sens: revenues et varieties: grain)
    budgets = @production.revenues.where(variant_id: ProductNatureVariant.of_variety(:grain).derivative_of(@production.variant.variety).pluck(:id))
    # puts budgets.inspect.yellow
    # if budgets.first
    #   z = budgets.first.items.average(:quantity).to_s.to_f
    #   # puts z.inspect.green
    #   # c : expenses globales [global_expenses_by_support_variant_unit]
    #   c = global_expenses_by_support_variant_unit.to_s.to_f
    #   # y [€/ton] = (ax + c [€/Ha]) / bz[qt/Ha] * 10
    #   y = (((a * x) + c) / (b * z)) * 10
    #   # puts @production.name
    #   # puts y.to_s.to_f.inspect.red
    # end

  .med-info.important
    %span.title= :direct_expenses.tl + title_legend_complement
    %span.value= link_to(direct_expenses_by_support_variant_unit.to_s, {controller: "/backend/productions" ,action: :show, id: @production.id})
    %span.title= :indirect_expenses.tl + title_legend_complement
    %span.value= indirect_expenses_by_support_variant_unit
    %span.title= "Dont Ammortissement : "
    %span.value=  asset_expenses.round(2).to_s + title_legend_complement
- else
  = no_data
