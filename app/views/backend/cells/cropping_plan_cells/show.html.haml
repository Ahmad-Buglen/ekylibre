:ruby
  surface_unit = Nomen::Units[:hectare]
  if @campaigns
    campaigns = {}
    activities = Activity.of_campaign(@campaigns).of_families(:vegetal_crops).order(:id)
  end

- if @campaigns and activities.any?
  :ruby
    # In theory, @activity and @productions should be produced here from @campaign only
    activities_serie = activities.collect do |activity|
      {name: activity.name, y: activity.net_surface_area(@campaigns).in_square_meter.to_f(surface_unit), id: activity.id, url: backend_activity_path(activity), color: cycle(*Backend::ChartsHelper::COLORS) }
    end

    productions_serie = Production.of_campaign(@campaigns).of_activities(activities).order("activity_id, id").collect do |production|
      campaigns[production.campaign.name] ||= 0.in_square_meter.to_d(surface_unit)
      campaigns[production.campaign.name] += production.area.in(:square_meter).to_f(surface_unit)
      {name: production.name, y: production.net_surface_area.in(:square_meter).to_f(surface_unit), url: backend_production_path(production), color: ligthen(activities_serie.detect{|a| a[:id] == production.activity_id}[:color], 0.3) }
    end

    series = []
    series << {name: Activity.model_name.human, data: activities_serie, size: "60%", data_labels: {color: 'white', distance: -30}}
    series << {name: Production.model_name.human, data: productions_serie, size: "80%", inner_size: "60%", data_labels: {enabled: false}}

  = pie_chart(series, tooltip: {point_format: "{point.y: 1.2f} #{surface_unit.symbol}"}, title: campaigns.map {|k,v| "#{k} (#{v.round(2)} #{surface_unit.symbol})"}.to_sentence, plot_options: { pie: { allow_point_select: true, cursor: 'pointer'}})
- else
  %strong= :no_data.tl