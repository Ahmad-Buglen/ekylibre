- if @campaign and Operation.of_campaign(@campaign).any?
  :ruby
    started_at = Operation.of_campaign(@campaign).reorder(:started_at).first.started_at.to_date
    stopped_at = Operation.of_campaign(@campaign).reorder(:started_at).last.stopped_at.to_date

    unit = Nomen::Units[:hour]

    series = []
    categories = {}

    date = started_at
    stopped_at = started_at + 1 if started_at >= stopped_at
    while date < stopped_at
      categories[date.year.to_s + date.month.to_s.rjust(3, '0')] = date.l(format: "%b %Y")
      date = date >> 1
    end

    # data for bar chart times by activities and by month
    Activity.of_campaign(@campaign).find_each do |activity|
      operations = Operation.of_activities(activity).of_campaign(@campaign).order(:started_at)
      if operations.any?
        sums = operations.sums_of_periods.sort.inject({}) do |hash, period|
          hash[period.expr.to_i.to_s] = period.sum.to_i.in_second.in(unit).round(2).to_f
          hash
        end
        series << { name: activity.name, data: normalize_serie(sums, categories.keys), tooltip: {value_suffix: unit.symbol }}
      end
    end

    # data for spline sum revenues by month
    #operations = Operation.of_campaign(@campaign).order(:started_at)
    #if operations.count > 0
    #    sums = operations.sums_of_periods.sort.inject({}) do |hash, pair|
    #      hash[pair.expr.to_i.to_s] = pair.sum.in_second.convert(:hour).round(2).to_s.to_f
    #      hash
    #    end
    # series << {type: 'spline', name: :total.tl, data: normalize_serie(sums, categories.keys), marker: {line_width: 2}}
    #end

    # data for elapsed time pie by activity
    #data = []
    #Activity.of_campaign(@campaign).find_each do |activity|
    #  operations = Operation.of_activities(activity).of_campaign(@campaign).order(:started_at)
    #  if operations.count > 0
    #    sum_revenues = operations.sum(:duration).in_second.convert(:hour).round(2)
    #    data << {name: activity.name, y: sum_revenues.to_s.to_f, url: backend_activity_path(activity)}
    #  end
    #end
    #series << {type: 'pie', name: :total.tl, data: data, center: [50, 50], size: 100, show_in_legend: false, data_labels: { enabled: false }}


  = column_chart(series, y_axis: {title: {text: :duration.tl}, stack_labels: {enabled: true, format: "{total} #{unit.symbol}"}, labels: { format: "{value} #{unit.symbol}" }}, x_axis: { categories: categories.values}, legend: true, plot_options: { column: {stacking: 'normal'}})
- else
  = no_data
