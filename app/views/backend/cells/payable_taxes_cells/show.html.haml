- taxes = Tax.all
- if taxes.any?
  :ruby
    stopped_at = Time.now
    started_at = (stopped_at - 1.year).beginning_of_month

    series = []
    date = started_at
    periods = {}
    while date < stopped_at
      periods[date.l(format: "%b %Y")] = [date, (date.end_of_month)]
      date = date + 1.month
    end

    #periods = {}
    #while date < stopped_at
    #  periods[date.l(format: "%b %Y")] = [date, (date.end_of_month)]
    #  date = date + 1.month
    #end

    for tax in taxes
      if tax.purchase_items.count > 0 or tax.sale_items.count > 0
        #collect_items   =   tax.collect_account.journal_entry_items.between(started_at, stopped_at).reorder(created_at: :asc)
        #deduction_items = tax.deduction_account.journal_entry_items.between(started_at, stopped_at).reorder(created_at: :asc)
        #last = {collect: 0.0, deduction: 0.0}

        data = []

        periods.each do |name, period|
          # categories << period[0]
          sum_vat_collected = tax.sale_items.between(period[0], period[1]).reorder('sales.invoiced_at').map(&:taxes_amount).compact.sum
          sum_vat_deducted = tax.purchase_items.between(period[0], period[1]).reorder('purchases.invoiced_at').map(&:taxes_amount).compact.sum
          #  collect = collect_items.where(printed_on: period).last
          # deduction = deduction_items.where(printed_on: period).last
          #  last[:collect] = (collect ? collect.cumulated_absolute_balance.to_f : last[:collect])
          #  last[:deduction] = (deduction ? deduction.cumulated_absolute_balance.to_f : last[:deduction])
          #  data << - (last[:collect] + last[:deduction])
          data << (sum_vat_collected.to_s.to_f - sum_vat_deducted.to_s.to_f)
        end
        series << {name: tax.short_label, data: data }
      end
    end

  = spline_chart(series, legend: { align: 'center', border_width: 0 }, x_axis: { title: {text: :months.tl}, categories: periods.keys}, y_axis: {title: {text: :amounts_in_currency.tl(currency: Preference[:currency])}})
- else
  = no_data
