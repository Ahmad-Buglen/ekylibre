- if @campaign
  :ruby
    #
    started_on = Date.new(@campaign.name.to_f, 01, 01)
    stopped_on = Date.new(@campaign.name.to_f, 12, 31)
      
    series = []
    categories = {}
    date = started_on
    while date < stopped_on
      categories[date.year.to_s + date.month.to_s.rjust(2, '0')] = date.l(:format => "%b %Y")
      date = date >> 1
    end
    
    # data for bar chart revenus by product_nature and by month
    ProductNature.availables.find_each do |nature|
      sale_items = SaleItem.by_product_nature(nature).between(started_on, stopped_on)
      if sale_items.count > 0
        item_h = sale_items.sums_of_periods().sort.inject({}) do |hash, pair|
          hash[pair.expr.l(:format => "%b %Y")] = pair.pretax_amount.to_d
          hash
        end
        series << {type: 'column', name: nature.name, data: item_h.collect{|k,v| v.to_s.to_f } }
      end
    end
    
    # data for spline sum revenus by month
    all_sale_items = SaleItem.between(started_on, stopped_on)
    if all_sale_items.count > 0
      item_h = all_sale_items.sums_of_periods().sort.inject({}) do |hash, pair|
        hash[pair.expr.l(:format => "%b %Y")] = pair.pretax_amount.to_d
        hash
      end
      series << {type: 'spline', name: :total.tl, data: item_h.collect{|k,v| v.to_s.to_f }, marker: {line_width: 2}}
    end    
    
    # data for pie revenus by product_nature
    data = []
    ProductNature.availables.find_each do |nature|
      sale_items = SaleItem.by_product_nature(nature).between(started_on, stopped_on)
      if sale_items.count > 0
        sum_revenus = sale_items.sum(:pretax_amount)
        data << {name: nature.name, y: sum_revenus.to_s.to_f, url: backend_product_nature_path(nature)}
      end
    end
    series << {type: 'pie', name: 'Total', data: data, center: [50, 50], size: 100, show_in_legend: false, data_labels: { enabled: false }}
     

  = column_chart(series, y_axis: {title: {text: :pretax_amount.tl}}, x_axis: { categories: categories.values}, legend: {})
- else
  %strong= :no_data.tl