- if @financial_years
  :ruby
    #
    taxes = Tax.all

    started_on = @financial_years.started_on
    stopped_on = @financial_years.stopped_on

    series = []
    categories = {}
    date = started_on
    while date < stopped_on
      categories[date.year.to_s + date.month.to_s.rjust(2, '0')] = date.l(:format => "%b %Y")
      date = date >> 1
    end
    
    for tax in taxes
      items_collected = tax.lasts_of_periods(started_on, stopped_on, method = :collected)
      if items_collected.count > 0
        item_h = items_collected.sort.inject({}) do |hash, pair|
          hash[pair.printed_on.l(:format => "%b %Y")] = (pair.cumulated_absolute_debit - pair.cumulated_absolute_credit).to_d
          hash
        end
        series << {name: tax.name + " " + Tax.human_attribute_name(:collected_taxes) ,data: item_h.collect{|k,v| v.to_s.to_f } }
      end
      items_paid = tax.lasts_of_periods(started_on, stopped_on, method = :paid)
      if items_paid.count > 0
        item_h = items_paid.sort.inject({}) do |hash, pair|
          hash[pair.printed_on.l(:format => "%b %Y")] = (pair.cumulated_absolute_debit - pair.cumulated_absolute_credit).to_d
          hash
        end
        series << {name: tax.name + " " + Tax.human_attribute_name(:paid_taxes) ,data: item_h.collect{|k,v| v.to_s.to_f } }
      end     
      
    end

  = bar_chart(series,legend: { layout: 'vertical', align: 'bottom', vertical_align: 'bottom', border_width: 0 }, x_axis: { categories: categories.values})
- else
  %strong= :no_data.tl