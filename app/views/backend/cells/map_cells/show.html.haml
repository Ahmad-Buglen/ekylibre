:ruby
  if @campaigns
    data = []
    ProductionSupport.of_campaign(@campaigns).includes({production: [:activity, :campaign, :variant]}, :storage).find_each do |support|

      popup_content = []

      # for support

      popup_content << {label: :campaign.tl, value: support.production.campaign.name}
      popup_content << {label: :activity.tl, value: support.production.activity.name}
      popup_content << {label: :production_support.tl, value: link_to(support.name, backend_production_support_path(support))}

      if support_input_cost = support.input_cost and support_input_cost.to_d > 0.0
        popup_content << {label: :input_cost_per_hectare.tl, value: support_input_cost.to_s.to_f.round(2)}
      end

      if support_tool_cost = support.tool_cost and support_tool_cost.to_d > 0.0
        popup_content << {label: :tool_cost_per_hectare.tl, value: support_tool_cost.to_s.to_f.round(2)}
      end

      if support_time_cost = support.time_cost and support_time_cost.to_d > 0.0
        popup_content << {label: :time_cost_per_hectare.tl, value: support_time_cost.to_s.to_f.round(2)}
      end

      if params[:visualization] == "nitrogen_footprint"

        if nitrogen_concentration = support.nitrogen_balance and nitrogen_concentration.to_d != 0.0
          popup_content << {label: :nitrogen_concentration_per_hectare.tl, value: nitrogen_concentration.to_s.to_f.round(2)}
        end

        if phosphorus_concentration = support.phosphorus_balance and phosphorus_concentration.to_d != 0.0
          popup_content << {label: :phosphorus_concentration_per_hectare.tl, value: phosphorus_concentration.to_s.to_f.round(2)}
        end

        if potassium_concentration = support.potassium_balance and potassium_concentration.to_d != 0.0
          popup_content << {label: :potassium_concentration_per_hectare.tl, value: potassium_concentration.to_s.to_f.round(2)}
        end

      end

      if support.storage
        popup_content << {label: CultivableZone.human_attribute_name(:net_surface_area), value: support.storage.net_surface_area.in_hectare.round(2).l}
      end

      if interventions = Intervention.where(production_support: support).reorder(:started_at)
        popup_content << {label: :interventions_count.tl, value: interventions.count }
      end

      if interventions.count > 0 and last_intervention = interventions.last
        popup_content << {label: :last_intervention.tl, value: link_to( "NÂ°" + last_intervention.number, backend_intervention_path(last_intervention)) }
      end

      popup_content << render('popup', support: support)

      item = {
        name:       support.name,
        shape:      support.shape,
        campaign:   support.production.campaign.name,
        activity:   support.production.activity.name,
        production: support.production.name,
        variant:    support.production.variant.name,
        tool_cost:  support_tool_cost.to_s.to_f.round(2),
        input_cost: support_input_cost.to_s.to_f.round(2),
        time_cost:  support_time_cost.to_s.to_f.round(2),
        nitrogen_concentration:   nitrogen_concentration.to_s.to_f.round(2),
        phosphorus_concentration: phosphorus_concentration.to_s.to_f.round(2),
        potassium_concentration:  potassium_concentration.to_s.to_f.round(2),
        interventions_count: interventions.count,
        popup: {header: true, content: popup_content}
      }
      data << item
    end
  end

  

= visualization do |v|
  - v.serie :main, data
  - v.background "OpenStreetMap.HOT"
  - v.background "Thunderforest.Transport"
  - v.background "Thunderforest.Outdoors"
  - if params[:visualization] == "nitrogen_footprint"
    - v.choropleth :interventions_count, :main
    - v.choropleth :nitrogen_concentration, :main, stop_color: "#777777"
    - v.choropleth :phosphorus_concentration, :main, stop_color: "#11BB99"
    - v.choropleth :potassium_concentration, :main, stop_color: "#AA00AA"
  - else
    - v.choropleth :interventions_count, :main
    - v.choropleth :tool_cost, :main, stop_color: "#00AA00"
    - v.choropleth :input_cost, :main, stop_color: "#1122DD"
    - v.choropleth :time_cost, :main, stop_color: "#E77000"
  - v.control :zoom
  - v.control :scale
  - v.control :fullscreen
  - v.control :layer_selector



-# if @visualization
  - id = "map-#{@visualization}"
  %div{id: id}
    -# &sql=&zoom=3&center_lat=45.27488643704891&center_lon=9.84375
    %iframe{width: '100%', height: 520, frameborder: 0, src: "//#{@account}.cartodb.com/viz/#{@visualization}/embed_map?title=false&description=false&search=false&shareable=false&cartodb_logo=false&layer_selector=true&legends=true&scrollwheel=false&sublayer_options=1"}
    = link_to(:refresh.tl, {action: :update, visualization: params[:visualization]}, method: :patch, remote: true, 'data-update' => "##{id}", 'data-update-at' => 'replace', class: "btn")
-# else
  = no_data
