- main_toolbar do |t|
  = t.edit resource
  = t.destroy

= cobbles do |c|
  - c.cobble :details do
    = attributes_list do |l|
      - l.attribute :number
      - l.attribute :sampled_at
      - l.attribute :implanter_rows_number
      - l.attribute :implanter_working_width
      - l.attribute :product, url: true
      - l.attribute :activity, url: true
      - l.attribute :comment

  - if resource.use_grading_calibre && resource.product_stock_in_ground
    - c.cobble :gradings do
      = infos do
        .med-info
          %span.title= Product.human_attribute_name(:product_stock_in_ground)
          %span.value
            %i.picto{class: "picto-grain"}
            = resource.product_stock_in_ground.round(3).l
        .med-info
          %span.title= Product.human_attribute_name(:product_stock_in_ground)
          %span.value
            %i.picto{class: "picto-grain"}
            = resource.product_stock_in_ground(unit = :unity).to_d.to_i

    :ruby
      # build categories
      categories = []
      categories << [resource.position, :yield]
      series = []
      
      # build symbol
      symbol_measure = Nomen::Unit[resource.product_stock_in_ground.unit].symbol
      
      # check global net mass of grading
      m = resource.net_mass.to_d
      # check global net mass of grading
      net_surface_area = resource.product.population
      stock_in_ground = resource.product_stock_in_ground.to_d
      resource.checks.of_nature(:calibre).map do |check|
        arr = []
        y = (check.net_mass_value.to_d / m) * stock_in_ground  if m != 0.0
        arr << y.to_i.to_s.to_f
        arr << (y.to_d / net_surface_area.to_d).round(2).to_s.to_f if net_surface_area != 0.0
        series << { name: check.activity_grading_check.name, data: arr}
      end

    - if series.any?
      - c.cobble(:stock_in_ground_by_calibres) do
        = column_highcharts(series, y_axis: {title: {text: "#{symbol_measure}"}, stack_labels: {enabled: true}}, x_axis: { categories: categories}, legend: true, tooltip: {point_format: "{point.y: 1f} #{symbol_measure}"},plot_options: { column: {stacking: 'normal', data_labels: {enabled: true}}})

  - c.cobble(:checks) do
    = cobble_list(:checks)
