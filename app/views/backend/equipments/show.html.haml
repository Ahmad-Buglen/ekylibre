- if current_campaign and Operation.of_campaign(current_campaign).with_generic_cast(:tool, resource).any?
  :ruby
    started_at = Operation.of_campaign(current_campaign).with_generic_cast(:tool, resource).reorder(:started_at).first.started_at.to_date
    stopped_at = Operation.of_campaign(current_campaign).with_generic_cast(:tool, resource).reorder(:started_at).last.stopped_at.to_date

    duration = Operation.of_campaign(current_campaign).with_generic_cast(:tool, resource).map(&:duration).compact.sum

    unit = Nomen::Unit[:hour]

    series = []
    categories = {}

    date = started_at
    stopped_at = started_at + 1 if started_at >= stopped_at
    while date < stopped_at
      categories[date.year.to_s + date.month.to_s.rjust(3, '0')] = date.l(format: "%b %Y")
      date = date >> 1
    end

    # data for bar chart times by activities and by month
    Activity.of_campaign(current_campaign).find_each do |activity|
      operations = Operation.of_activities(activity).of_campaign(current_campaign).with_generic_cast(:tool, resource).order(:started_at)
      if operations.any?
        sums = operations.sums_of_periods.sort.inject({}) do |hash, period|
          hash[period.expr.to_i.to_s] = period.sum.to_i.in_second.in(unit).round(2).to_f
          hash
        end
        series << { name: activity.name, data: normalize_serie(sums, categories.keys), tooltip: {value_suffix: unit.symbol }}
      end
    end

- main_toolbar do |t|
  - t.edit resource
  - t.new(params: {controller: :issues, target_id: resource.id, target_type: resource.class.name}, tool: 'new-issue')

- main_campaign_selector

= main_informations attachment: true do
  - if resource.picture.exists?
    .picture= image_tag(resource.picture.url(:identity))
  .big-infos
    .med-info.important
      - icon = resource.category.pictogram
      %span.title= Matter.human_attribute_name(:variant)
      %span.value
        %i.picto{class: "picto-#{icon}"}
        = link_to(resource.variant_name, controller: :product_nature_variants, action: :show, id: resource.variant_id)
    - if resource.born_at and resource.age >= 1.day
      .med-info
        %span.title= Equipment.human_attribute_name(:age)
        %span.value
          %i.picto{class: "picto-clock-o"}
          = human_age(resource.age, display: 2)
    .med-info.important
      %span.title= Equipment.human_attribute_name(:state)
      %span.value= lights(resource.status)
    - if duration
      .med-info
        %span.title= Equipment.human_attribute_name(:duration)
        %span.value
          %i.picto{class: "picto-timelapse"}
          = :x_hours.tl(count: duration/3600)
    - if resource.description
      %span.title= Plant.human_attribute_name(:description)
      %span.value= resource.description

= cobbles do |c|

  - count = 0
  - map = visualization do |v|
    - v.background "OpenStreetMap.HOT"
    - v.background "OpenStreetMap.Mapnik"
    - v.background "Thunderforest.Landscape"
    - v.background "Esri.WorldImagery"
    - if resource.container
      - shape = resource.container.shape
      - if shape
        - v.serie resource.container.id, [{name: resource.container.name, shape: shape}]
        - v.simple resource.container.name , resource.container.id, fill_color: cycle(theme_colors)
        - count += 1
    - if resource.shape
      - v.serie resource.id, [{name: resource.name, shape: resource.shape}]
      - v.simple resource.name , resource.id, fill_color: cycle(theme_colors)
      - count += 1
    - v.control :zoom
    - v.control :scale
    - v.control :fullscreen
    - v.control :layer_selector
  - if count > 0
    - c.cobble :container do
      = map

  - if resource.intervention_casts.any?
    - c.cobble(:intervention_casts) do
      = cobble_list(:intervention_casts)

  - c.cobble(:readings, title: :x_readings.tl(count: resource.readings.count)) do
    = cobble_list(:readings)

  - c.cobble(:time_spend_by_activities) do
    - if current_campaign and Operation.of_campaign(current_campaign).with_generic_cast(:tool, resource).any? and series.any?
      = column_highcharts(series, y_axis: {title: {text: :duration.tl}, stack_labels: {enabled: true, format: "{total} #{unit.symbol}"}, labels: { format: "{value} #{unit.symbol}" }}, x_axis: { categories: categories.values}, legend: true, plot_options: { column: {stacking: 'normal'}})
    - else
      = no_data
