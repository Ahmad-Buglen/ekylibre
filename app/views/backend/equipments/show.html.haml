- main_toolbar do |t|
  - t.edit resource
  - t.new(params: {controller: :issues, target_id: resource.id, target_type: resource.class.name}, tool: 'new-issue')

= beehive do |b|
  - b.hbox do
    - b.cell :general do
      - if resource.picture.exists?
        .picture= image_tag(resource.picture.url(:identity))
      .big-infos
        .big-info.important
          - icon = resource.category.pictogram
          %span.title= Matter.human_attribute_name(:variant)
          %span.value
            %i.picto{class: "picto-#{icon}"}
            = link_to(resource.variant_name, controller: :product_nature_variants, action: :show, id: resource.variant_id)
        - if resource.born_at and resource.age >= 1.day
          .big-info
            %span.title= Matter.human_attribute_name(:age)
            %span.value
              %i.picto{class: "picto-clock-o"}
              = human_age(resource.age, display: 2)
        .big-info.important
          %span.title= Plant.human_attribute_name(:state)
          %span.value= lights(resource.status)
        - if resource.description
          %span.title= Plant.human_attribute_name(:description)
          %span.value= resource.description
    - if resource.attachments.count > 1         
      - b.cell :attachments, title: ProductNatureVariant.human_attribute_name(:attachments) do
        = attachments_of(resource)

    - count = 0
    - map = visualization do |v|
      - v.background "OpenStreetMap.HOT"
      - v.background "OpenStreetMap.Mapnik"
      - v.background "Thunderforest.Landscape"
      - v.background "Esri.WorldImagery"
      - if resource.container
        - shape = resource.container.shape
        - if shape
          - v.serie resource.container.id, [{name: resource.container.name, shape: shape}]
          - v.simple resource.container.name , resource.container.id, fill_color: cycle(theme_colors)
          - count += 1
      - if resource.shape
        - v.serie resource.id, [{name: resource.name, shape: resource.shape}]
        - v.simple resource.name , resource.id, fill_color: cycle(theme_colors)
        - count += 1
      - v.control :zoom
      - v.control :scale
      - v.control :fullscreen
      - v.control :layer_selector
    - if count > 0
      - b.cell :container do
        = map

  - campaign = Campaign.order(harvest_year: :desc).first
  - operations = Operation.of_campaign(campaign).with_generic_cast(:tool, resource).reorder(:started_at)
  - if campaign and operations.any?
    :ruby
      started_at = operations.first.started_at.to_date
      stopped_at = operations.last.stopped_at.to_date

      unit = Nomen::Units[:hour]

      series = []
      categories = {}

      date = started_at
      stopped_at = started_at + 1 if started_at >= stopped_at
      while date < stopped_at
        categories[date.year.to_s + date.month.to_s.rjust(3, '0')] = date.l(format: "%b %Y")
        date = date >> 1
      end

      # data for bar chart times by activities and by month
      Activity.of_campaign(campaign).find_each do |activity|
        operations = Operation.of_activities(activity).of_campaign(campaign).with_generic_cast(:tool, resource).order(:started_at)
        if operations.any?
          sums = operations.sums_of_periods.sort.inject({}) do |hash, period|
            hash[period.expr.to_i.to_s] = period.sum.to_i.in_second.in(unit).round(2).to_f
            hash
          end
          series << { name: activity.name, data: normalize_serie(sums, categories.keys), tooltip: {value_suffix: unit.symbol }}
        end
      end

    - b.cell :activities do
      = column_chart(series, y_axis: {title: {text: :duration.tl}, stack_labels: {enabled: true, format: "{total} #{unit.symbol}"}, labels: { format: "{value} #{unit.symbol}" }}, x_axis: { categories: categories.values}, legend: true, plot_options: { column: {stacking: 'normal'}})
  - else
    = no_data



  - if resource.intervention_casts.any?
    - b.hbox do
      - b.cell(:intervention_casts) do
        = list(:intervention_casts)

  - if resource.readings.any?
    - b.hbox do
      - b.cell(:readings, title: :x_readings.tl(count: resource.readings.count)) do
        = list(:readings)
