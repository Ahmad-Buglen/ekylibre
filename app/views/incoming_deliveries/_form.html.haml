=purchase_steps

=formalize do |f|
  -f.error :incoming_delivery
  -f.title :infos
  -f.field :incoming_delivery, :contact_id, :choices=>:incoming_delivery_contacts, :new=>{:entity_id=>@purchase.supplier_id} 
  -f.field :incoming_delivery, :mode_id, :choices=>{:reflection=>:incoming_delivery_modes}, :new=>true
  -f.field :incoming_delivery, :planned_on

%h2=IncomingDelivery.human_attribute_name("lines")
%table.kame 
  %tr
    %th=IncomingDeliveryLine.human_attribute_name(:product)
    %th=tc(:unit_price_pretax_amount)
    %th=tc(:unit_price_amount)
    %th=tc(:total_quantity)
    %th=IncomingDeliveryLine.human_attribute_name(:unit)
    %th=tc(:quantity_rest)
    %th=tc(:quantity)
    %th=IncomingDeliveryLine.human_attribute_name(:pretax_amount)
    %th=IncomingDeliveryLine.human_attribute_name(:amount)
  -for line in @incoming_delivery_lines
    %tr{:class=>cycle('odd','even')}
      %td=line.purchase_line.label
      %td.dec{:class=>"pta-#{line.purchase_line_id}"}=line.purchase_line.price.pretax_amount
      %td.dec{:class=>"awt-#{line.purchase_line_id}"}=line.purchase_line.price.amount
      %td.dec=line.purchase_line.quantity
      %td=line.purchase_line.unit.label
      %td.dec=line.purchase_line.undelivered_quantity
      %td=text_field_tag "incoming_delivery_line[#{line.purchase_line_id}][quantity]", line.quantity, :id=>"incoming_delivery_line_#{line.purchase_line_id}_quantity", :onkeyup=>"t6(this, #{line.purchase_line.undelivered_quantity});", :class=>"pta-#{line.purchase_line_id} awt-#{line.purchase_line_id}"
      %td.dec.pta{"mul-of"=>"pta-#{line.purchase_line_id}"}
      %td.dec.awt{"mul-of"=>"awt-#{line.purchase_line_id}"}
  %tr.total
    %th{:colspan=>7}=tg :total
    %td#total_pretax_amount{"sum-of"=>"pta"}=@incoming_delivery.pretax_amount
    %td#total_amount{"sum-of"=>"awt"}=@incoming_delivery.amount
  :javascript
    window.t6 = function(element, max) {
      compute("total_pretax_amount");
      compute("total_amount");
      if (element !== null) {
        if (isNaN(element.value) || (!isNaN(element.value) && parseFloat(element.value)>max)) {
          element.addClassName("invalid");
        } else {
          element.removeClassName("invalid");
        }
      }
    }
    t6();

