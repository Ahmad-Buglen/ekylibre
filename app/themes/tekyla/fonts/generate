#!/usr/bin/env ruby
require 'fileutils'
require 'nokogiri'
require 'bigdecimal'
STDOUT.sync = true

name = "symbols"
advx = 1000
advy = 1000


def fit(path, width, height)
  moves = path.split(/\s/)
  # Calculate bounding box
  left, right, top, bottom = nil, nil, nil, nil
  # puts path
  for move in moves
    next unless move.match(/^\-?\d+(\.\d+)?\,\-?\d+(\.\d+)?$/)
    point = move.split(',').collect{|v| BigDecimal.new(v)}
    x, y = point[0], point[1]
    left   = x if   (left||x) >= x
    right  = x if  (right||x) <= x
    top    = y if    (top||y) <= y
    bottom = y if (bottom||y) >= y
  end

  w = right - left
  h = top - bottom
  # puts [top.to_s, right.to_s, bottom.to_s, left.to_s, h.to_s('F'), w.to_s('F')].join(", ")

  kx, ky = BigDecimal.new(width).div(w), BigDecimal.new(height).div(h)

  # Update values
  npath = moves.collect do |move|
    if move.match(/^\-?\d+(\.\d+)?\,\-?\d+(\.\d+)?$/)
      point = move.split(',').collect{|v| v.to_f}
      x, y = point[0], point[1]
      ((x-left)*kx).round(6).to_s + "," + ((y-bottom)*ky).round(6).to_s
    else
      move
    end
  end

  return npath.join(" ")
end







# Open SVG
f = File.open("#{name}.svg")
doc = Nokogiri::XML(f) do |config|
  config.strict.nonet.noblanks
end
f.close

# Collect glyphs
glyphs = []
print "Collecting"
doc.root.xpath('./svg:g/svg:path[@id]').each do |node|
  gname = node.attr(:id).gsub(/(^\s+|\s+$)/, '')
  if gname.match(/^[a-z][a-z\-]*[a-z]$/)
    print "."
    glyphs << {:name => gname, :d => fit(node.attr(:d), advx, advy)}
  end
end
puts "OK!"

# Rewrite SVG to a font
builder = Nokogiri::XML::Builder.new do |xml|
  xml.svg(:width => '100%', :height => '100%', :version => "1.1", :xmlns => 'http://www.w3.org/2000/svg') {
    xml.defs {
      xml.font(:id => "tekyfont", 'horiz-adv-x' => advx) {
        xml.send("font-face", 'font-family' => "Tekyfont", 'font-weight' => "normal", 'units-per-em' => advx) #, 'font-style' => :italic, 'cap-height' => 600,  'x-height' => 400, :ascent => 700, :descent => 300, :alphabetic => 0, :mathematical => 350, :ideographic => 400, :hanging => 500)
        glyphs.each_with_index do |glyph, i|
          xml.glyph(:unicode => i.to_s(36), :d => glyph[:d], "glyph-name" => glyph[:name])
        end
        xml.send("missing-glyph", :d => glyph[:d])
      }
    }
  }
end

File.open("#{name}-font.svg", "wb") do |f|
  f.write builder.to_xml
end


# Convert SVG font  to TTF, OTF and WOFF
`fontforge -script font-convert.pe #{name}-font.svg ttf`



# icons = %w(new edit destroy search validate cancel lock unlock action up down left right configure column table duplicate point mark unmark true false page spreadsheet print filter mail nomail sort check divide load logout increment decrement close help merge spread rgreen rblue rblack nav general_informations genealogy group care treatment drug entity delays stocks asset)
# states = %w(normal disabled active whited hover)

# default_state = "normal"
# default_size = 16
# horizontal_space = 8
# vertical_space = 8
# x = default_size + horizontal_space
# y = default_size + vertical_space
# STDOUT.sync = true
# for size in [default_size]
#   icons_path = File.join(File.dirname(__FILE__), "icons")
#   icons_path << "-#{size}" if size != default_size
#   FileUtils.mkdir_p(icons_path)
#   puts "Exporting in #{icons_path}:"
#   icons.each_with_index do |icon, b|
#     print " - #{icon}"
#     states.each_with_index do |state, s|
#       filename  = icon
#       filename += "_#{state}" if state != default_state
#       filename += ".png"
#       file = File.join(icons_path, filename)
#       unless File.exist?(file)
#         cmd = "inkscape --without-gui"
#         cmd << " --export-png=#{file}"
#         cmd << " --export-area=#{b*x}:#{s*y}:#{b*x+default_size}:#{s*y+default_size}"
#         cmd << " --export-background-opacity=0"
#         cmd << " --export-width=#{size}"
#         cmd << " --export-height=#{size}" 
#         cmd << " icons.svg"
#         `#{cmd}`
#       end
#       print "."
#     end
#     puts ""
#   end
# end
