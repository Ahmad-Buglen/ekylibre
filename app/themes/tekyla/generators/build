#!/usr/bin/env ruby
# Dependencies: fontforge
require 'rubygems'
require 'pathname'
require 'fileutils'
require 'yaml'
require 'nokogiri'

def command(cmds)
  puts "$ " + cmds
  system(cmds)
end

SVG_NAMESPACES = {
  :dc => "http://purl.org/dc/elements/1.1/",
  :cc => "http://creativecommons.org/ns#",
  :rdf => "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
  :svg => "http://www.w3.org/2000/svg",
  :sodipodi => "http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd",
  :inkscape => "http://www.inkscape.org/namespaces/inkscape"
}

meta = {
  :filename => "webfont",
  :family => "Tekyla",
  :version => "0.0.0",
  :name => "tekyla",
  :theme => "tekyla"
}


here = Pathname.new(File.expand_path(__FILE__)).dirname
sources = here.join("source-fonts")
output_file = here.join("..", "fonts", "#{meta[:filename]}.svg")
font_awesome_dir = here.join("font-awesome")
glyphs = here.join("glyphs")

# Get latest Font-Awesome
FileUtils.mkdir_p(font_awesome_dir.dirname)
if font_awesome_dir.join(".git").exist?
  Dir.chdir(font_awesome_dir) do
    command("git pull")
  end
else
  command("git clone git@github.com:FortAwesome/Font-Awesome.git #{font_awesome_dir}")
end

if ARGV[0] != "g"

  # Normalize Font-Awesome
  awesome_dir = sources.join("001-awesome")
  FileUtils.rm_rf(awesome_dir)
  FileUtils.mkdir_p(awesome_dir)
  # FileUtils.cp(font_awesome_dir.join("build", "icons.yml"), awesome_dir.join("config.yml"))
  File.open(awesome_dir.join("config.yml"), "wb") do |f|
    icons = YAML.load_file(font_awesome_dir.join("build", "icons.yml"))
    # raise icons.inspect
    config = {"glyphs" => icons["icons"].collect{|h| {"css" => h["id"], "from" => "0x" + h["unicode"]} } }
    f.write(config.to_yaml)
  end

  forgotten_names = {
    "_279" => "info",
    "_283" => "eraser",
    "_303" => "rss_sign",
    "_312" => "external_link_sign"
  }

  # FileUtils.cp(font_awesome_dir.join("build", "assets", "font-awesome", "font", "fontawesome-webfont.svg"), awesome_dir.join("font.svg"))
  source = font_awesome_dir.join("build", "assets", "font-awesome", "font", "FontAwesome.otf")
  command("fontforge -script font-convert.pe #{source.to_s} svg")
  interm = source.dirname.join("FontAwesome.svg")
  File.open(interm) do |i|
    doc = Nokogiri::XML(i) do |config|
      config.nonet.strict.noblanks
    end
    doc.root.xpath("//glyph[@d]").each do |glyph|
      name = glyph.attr("glyph-name")
      name = forgotten_names[name] || name
      puts "   !Weird name: #{name}" unless name =~ /^[a-z0-9]+((\_|\-)[a-z0-9]+)*$/
      name.gsub!(/[^a-z0-9]+/, '-')
      glyph["glyph-name"] = name
    end
    doc.root.default_namespace = SVG_NAMESPACES[:svg]
    for name, url in SVG_NAMESPACES
      doc.root.add_namespace(name.to_s, url)
    end
    File.open(awesome_dir.join("font.svg"), "wb") do |f|
      f.write doc.to_s
    end
  end

  puts "-" * 80

  # Explodes all font characters in one dir
  FileUtils.rm_rf(glyphs)
  FileUtils.mkdir_p(glyphs)
  Dir.chdir(sources) do
    for font_fullname in Dir["*"].sort
      font_dir = sources.join(font_fullname)
      font_name = font_fullname.split("-")[1..-1].join("-")
      font_file = font_dir.join("font.svg")
      config_file = font_dir.join("config.yml")
      if font_file.exist? and config_file.exist?
        command("svg-font-dump -n -c #{config_file} -f -i #{font_file} -o #{glyphs} ")
      end
    end
  end

end


config_file = here.join('config.yml')
config = {
  "font" => {
    "version" => meta[:version],
    "fontname" => meta[:name],
    "fullname" => "#{meta[:family]} (#{meta[:name]})",
    "familyname" => meta[:family],
    "copyright" => "Copyright (C) 2013 by Ekylibre",
    "ascent" => 850,
    "descent" => 150,
    "weight" => "Regular"
  }
}

icons = {}

Dir.chdir(glyphs) do
  last = "f000".to_i(16)
  config["glyphs"] = Dir.glob("*.svg").sort.collect do |cf|
    name = cf.split(/\./).first
    last = last.succ # to_i(16).succ.to_s(16)
    icons[name] = last.to_s(16)
    {"css" => name, "code" => last}
  end
end

File.open(config_file, "wb") do |f|
  f.write config.to_yaml
end

# Recompose font
command("svg-font-create -c #{config_file} -s #{here.join('svgo.yml')} -i #{glyphs} -o #{output_file}")

puts "-" * 80

# Convert SVG font to all needed format
command("fontforge -script font-convert.pe #{output_file} ttf")
command("fontforge -script font-convert.pe #{output_file} woff")
command("fontforge -script font-convert.pe #{output_file} eot")
command("rm -f #{output_file.dirname.join('*.afm')}")

# Write SCSS file to manage list of icons
File.open(here.join("..", "stylesheets", "font.css.scss"), "wb") do |f|
  f.write "/* Do not edit this file. Generated automatically */\n"
  f.write "$icons: (" + icons.collect{|k,v| "(#{k} \"\\#{v}\")"}.join(" ") + ");\n"
  f.write "$icon-names: (" + icons.keys.join(" ") + ");\n"
  f.write "@font-face {\n"
  f.write "  font-family: '#{meta[:family]}';\n"
  f.write "  font-weight: normal;\n"
  f.write "  font-style: normal;\n"
  f.write "  src: font-url('themes/#{meta[:theme]}/#{meta[:filename]}.eot?v=#{meta[:version]}');\n"
  f.write "  src: font-url('themes/#{meta[:theme]}/#{meta[:filename]}.eot?#iefix&v=#{meta[:version]}') format('embedded-opentype'),\n"
  f.write "    font-url('themes/#{meta[:theme]}/#{meta[:filename]}.woff?v=#{meta[:version]}') format('woff'),\n"
  f.write "    font-url('themes/#{meta[:theme]}/#{meta[:filename]}.ttf?v=#{meta[:version]}') format('truetype'),\n"
  f.write "    font-url('themes/#{meta[:theme]}/#{meta[:filename]}.svg?v=#{meta[:version]}') format('svg');\n"
  f.write "}\n"
end
