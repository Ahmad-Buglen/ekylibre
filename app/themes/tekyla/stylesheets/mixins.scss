@import "compass/css3/images";
@import "compass/css3/animation";
@import "compass/css3/border-radius";
@import "compass/css3/box-shadow";
@import "compass/css3/box-sizing";
@import "compass/css3/inline-block";
@import "compass/css3/text-shadow";
@import "compass/css3/transition";
@import "compass/typography/text/ellipsis";
@import "compass/utilities/general/clearfix";
@import "bootstrap/mixins";
@import "bootstrap/panels";

@function background-hover($background-color) {
  @return mix($background-color, opacify($hover-mask, 1), percentage($hover-transparency));
}

@function visible-color($background-color) {
  @if lightness($background-color) > 70% {
    @return $base-font-color;
  }
  @else {
    @return $base-font-reversed-color;
  }
}

@function shadow-color-of($color) {
  @if lightness($color) > 50% {
    @return rgba(#222, 0.5);
  }
  @else {
    @return rgba(#FFF, 0.8);
  }
}

@mixin calc($property, $expression) {
  #{$property}: -webkit-calc(#{$expression});
  #{$property}: -moz-calc(#{$expression});
  #{$property}: -ms-calc(#{$expression});
  #{$property}: -o-calc(#{$expression});
  #{$property}: calc(#{$expression});
}

@mixin calc-height($expression) {
  @include calc(height, $expression);
}

@mixin calc-width($expression) {
  @include calc(width, $expression);
}


@mixin is-icon($size: round(1.2 * $fs-normal)) {
  font-family: Agric;
  font-weight: normal;
  font-style: normal;
  text-decoration: inherit;
  -webkit-font-smoothing: antialiased;
  font-size: $size;

  // @include inline-block;
  width: auto;
  height: auto;
  // line-height: $size;
  vertical-align: middle;
  background-image: none;
  background-position: 0% 0%;
  background-repeat: repeat;
  margin-top: 0;
}

@mixin icon($code) {
  &:before { content: $code; }
}

@mixin use-icon($name) {
  $i: 0;
  @each $symbolic-icon in $symbolic-icons {
    @if nth($symbolic-icon, 1) == $name {
      @include icon(nth($symbolic-icon, 2));
      $i: $i + 1;
    }
  }
  @if $i == 0 {
    @warn "Icon #{$name} is not defined";
  }
}

@mixin define-right-property($base-name, $value) {
  html[dir="ltr"] & { #{$base-name}-right: $value; }
  html[dir="rtl"] & { #{$base-name}-left: $value; }
}

@mixin define-left-property($base-name, $value) {
  html[dir="ltr"] & { #{$base-name}-left: $value; }
  html[dir="rtl"] & { #{$base-name}-right: $value; }
}

@mixin padding-right($value) { @include define-right-property(padding, $value); }
@mixin padding-left($value)  { @include define-left-property(padding, $value); }
@mixin margin-right($value) { @include define-right-property(margin, $value); }
@mixin margin-left($value)  { @include define-left-property(margin, $value); }
@mixin border-right($value) { @include define-right-property(border, $value); }
@mixin border-left($value)  { @include define-left-property(border, $value); }

@mixin left($value) {
  html[dir="ltr"] & { left: $value; }
  html[dir="rtl"] & { right: $value; }
}

@mixin right($value) {
  html[dir="ltr"] & { right: $value; }
  html[dir="rtl"] & { left: $value; }
}

@mixin text-align($dir) {
  @if $dir == right {
    html[dir="ltr"] & { text-align: right; }
    html[dir="rtl"] & { text-align: left; }
  } @else if $dir == left {
    html[dir="ltr"] & { text-align: left; }
    html[dir="rtl"] & { text-align: right; }
  } @else {
    html[dir="ltr"] &, html[dir="rtl"] & { text-align: $dir; }
  }
}

@mixin float($dir) {
  @if $dir == right {
    html[dir="ltr"] & { float: right; }
    html[dir="rtl"] & { float: left; }
  } @else if $dir == left {
    html[dir="ltr"] & { float: left; }
    html[dir="rtl"] & { float: right; }
  } @else {
    html[dir="ltr"] &, html[dir="rtl"] & { float: $dir; }
  }
}

@mixin display($mode) {
  @if $mode == box {
    display: -o-box;
    display: -ms-box;
    display: -moz-box;
    display: -webkit-box;
    display: box;
  } @else {
    display: $mode;
  }
}

@mixin background-active-gradient {
  background: $active-color;
  @include background(linear-gradient(top, lighten($active-color, $default-lightness-variation), $active-color, darken($active-color, $default-lightness-variation)));
}

@mixin title($font-size) {
  font-size: $font-size;
  line-height: round($font-size * $lh-ratio);
  font-weight: bold;
  color: $text-color;
}

@mixin box-emphasis {
  background: $base-color;
  &, & > span {
    color: white;
  }
  @include border-radius($default-border-radius);
  padding: $default-gap;
  text-align: center;
}

@mixin menu-box {
  @include background($menu-background);
  @include menu-shadow;
  border: $menu-border;
}

@mixin menu-shadow {
  @include box-shadow(0 0 ($fs-normal/4) rgba(0, 0, 0, 0.3));
}

@mixin menu {
  @include menu-box;
  &, li a {
    font-weight: normal;
    color: $text-color;
  }
}

@mixin menu-item {
  display: block;
  padding: 0;
  height: $menu-height;
  min-width: $menu-width;
  list-style-type: none;
  @include transition(background 0.2s, box-shadow 0.2s);
  &:hover > a {
    outline: none;
    background: background-hover($menu-background);
  }
  &.disabled, &[disabled] {
    background: transparent;
    cursor: default;
    pointer-events: none;
  }
  &.separator {
    @include menu-separator;
  }
  a {
    $vertical-padding: ($menu-height - $menu-text-height)/2;
    $horizontal-padding: round($default-ratio * $vertical-padding);
    display: block;
    padding: $vertical-padding $horizontal-padding;
    font-size: $fs-normal;
    line-height: $menu-text-height;
    height: $menu-text-height;
    vertical-align: middle;
    @include ellipsis;
    i {
      @include is-icon();
      @include inline-block;
      width: $fs-normal;
      color: $text-color;
      line-height: $menu-text-height;
      height: $menu-text-height;
      vertical-align: middle;
      @include margin-left(0);
      @include margin-right($horizontal-padding);
    }
    &:focus, &:active {
      outline: none;
    }
  }
}

@mixin dropdown-menu($vpos: bottom, $hpos: start) {
  @include menu;
  max-height: 12 * $menu-height;
  overflow-y: auto;
  overflow-x: hidden;
  position: absolute;
  display: none;
  @if $hpos == end {
    right: 0;
    left: auto;
    @include float(right);
  } @else {
    right: auto;
    left: 0;
    @include float(left);
  }
  li {
    @include float(none);
    @include menu-item;
  }
  z-index: 14;
}


@mixin menu-separator {
  height: $menu-border-width;
  background: $menu-border-color;
  padding: 0;
  margin: $menu-padding auto;
}

@mixin item-label {
  &, & * {
    color:$neutral-color;
  }
}

@mixin normal-shadow {
  @include box-shadow(0 0 $default-gap rgba(black, 0.32));
}

@mixin incrust-shadow {
  @include box-shadow(0 0 round($fs-normal/2) rgba(black, 0.15));
}

@mixin tab-pills($font-size: $fs-normal, $title-selector: "dt", $tab-selector: "dd") {
  display: block;
  @include clearfix;
  border-bottom: none;
  margin-bottom: 10px;
  #{$title-selector}, #{$tab-selector} {
    display: block;
    @include float(left);
    margin-top: 0;
    @include margin-right(10px);
    margin-bottom: $default-gap;
    @include margin-left(0);
  }
  #{$title-selector} {
    font-weight: bold;
    color: $neutral-color;
    font-variant: small-caps;
    padding: round($default-gap * 0.3) 0;
    cursor: default;
  }
  #{$tab-selector} {
    &:last-of-type {
      @include margin-right(0);
    }
    a {
      @include inline-block;
      @include border-radius(1000px);
      $border-width: 1px;
      border: $border-width solid transparent;
      background: $neutral-background;
      padding: round($default-gap * 0.2 - $border-width) $default-gap;
      &, & * {
        color: mix($base-font-color, $active-color);
        @include text-shadow(1px 1px 0 white);
        font-size: $font-size;
        line-height: round($lh-ratio * $font-size);
      }
      &:focus {
        @include box-shadow(0 0 round($fs-normal*0.6) rgba($base-color, 0.6));
      }
      &:focus, &:active {
        outline: none;
        border-color: $active-color;
      }
      &:hover {
        @include box-shadow(0 0 $default-gap white);
      }
    }
    &.active {
      margin-top: 0;
      a {
        background-color: $primary-color;
        border-color: $active-color;
        &, & * { color: white; font-weight: bold; @include text-shadow(1px 1px 0 $neutral-color)}
        i { font-weight: normal; }
      }
    }
    &.disabled {
      a {
        opacity: 0.9;
        color: $neutral-color;
        background: $neutral-background;
        cursor: default;
        pointer-events: none;
      }
    }
  }
}



// Permits to define properly media queries
@mixin respond-to($screen-sizes...) {
  @each $screen-size in $screen-sizes {
    @if $screen-size == small {
      @media only screen and (max-width: $small-screen) { @content; }
    }
    @else if $screen-size == medium {
      @media only screen and (min-width: $small-screen + 1px) and (max-width: $medium-screen) { @content; }
    }
    @else if $screen-size == normal {
      @media only screen and (min-width: $medium-screen + 1px) and (max-width: $large-screen) { @content; }
    }
    @else if $screen-size == large {
      @media only screen and (min-width: $large-screen + 1px) { @content; }
    }
    @else {
      @warn "Assuming no @media queries for unknown screen size: #{$screen-size}";
      @content;
    }
  }
}

@mixin respond-to-bigger-than($screen-size) {
  @if $screen-size == small {
    @media screen and (min-width: $small-screen) { @content; }
  }
  @else if $screen-size == medium {
    @media screen and (min-width: $medium-screen) { @content; }
  }
  @else if $screen-size == normal {
    @media screen and (min-width: $large-screen) { @content; }
  }
  @else {
    @warn "Assuming no @media queries for unknown screen size: #{$screen-size}";
    @content;
  }
}

@mixin respond-to-smaller-than($screen-size) {
  @if $screen-size == small {
    @media screen and (max-width: $small-screen - 1px) { @content; }
  }
  @else if $screen-size == medium {
    @media screen and (max-width: $medium-screen - 1px) { @content; }
  }
  @else if $screen-size == normal {
    @media screen and (max-width: $large-screen - 1px) { @content; }
  }
  @else {
    @warn "Assuming no @media queries for unknown screen size: #{$screen-size}";
    @content;
  }
}

@mixin description-list {
  padding: round($default-gap * 0.3);
  & > li {
    display: block;
    border: 1px solid transparent;
    padding: round($default-gap / 2) $default-gap;
    margin-top: $default-gap;
    @include clearfix;
    &:first-child {
      margin-top: 0;
    }
    & > h3, & > a > h3 {
      small {
        color: #AAA;
      }
      i.lock {
        @include is-icon(12px);
        @include use-icon(lock);
      }
      &, *, a, i, small {
        display: inline;
        line-height: $lh-ratio * $fs-normal;
        vertical-align: middle;
      }
    }
    & > p, & > a > p {
      line-height: $lh-ratio * 1em;
      color: #777;
      text-align: justify;
    }
    &.link {
      padding: 0;
      & > a {
        display: block;
        padding: round($default-gap / 2) $default-gap;
        &:hover {
          border-color: #DDD;
          @include box-shadow(0 0 round($default-gap * 0.3) rgba(#000, 0.25));
          background: white;
        }
      }
    }
  }
  .cell-content & {
    @media only screen and (min-width: $mini-screen){
      overflow: auto;
      max-height: 400px;
    }
  }

}

@mixin toolbar($group: ".btn-group", $total-height: $toolbar-height) {
  @include display(block);
  $margin-top: round(($total-height - $button-height) / 2);
  margin: $margin-top $default-gap ($total-height - $margin-top - $button-height);
}

@include keyframes(loading-rotate) {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

@mixin base-indicator($size: 6 * $lh-normal) {
  opacity: 0.8;
  $font-size: $size / $lh-ratio;
  color: $neutral-color;
  @include text-align(center);
  @include is-icon($font-size);
  line-height: $size;
  height: $size;
  width: $size;
}


@mixin loading-indicator {
  @include base-indicator;
  @include use-icon(circle-o-notch);
  @include animation(loading-rotate 2s infinite linear);
}

@mixin error-indicator {
  @include base-indicator;
  color: $invalid-color;
  @include use-icon(meh-o);
}

@mixin null-indicator {
  @include base-indicator;
  color: $caution-color;
  @include use-icon(empty-o);
}