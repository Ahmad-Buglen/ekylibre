/*
 * This is a manifest file that'll be compiled into screen.css, which will include all the files
 * listed below.
 *
 *= require_self
*/

$experimental-support-for-svg: true;

@import "compass/reset";
@import "compass/css3";
@import "compass/utilities";
@import "font.css.scss";

$symbiols: $icons;

@font-face {
  font-family: 'FontAwesome';
  src: font-url('fontawesome-webfont.eot');
  src: font-url('fontawesome-webfont.eot?#iefix') format("embedded-opentype"),
    font-url('fontawesome-webfont.woff') format("woff"),
    font-url('fontawesome-webfont.ttf') format("truetype");
  font-weight: normal;
  font-style: normal;
}


/* 37E */
/*##############|                   |                   |                   |                   |                   |                   |*/
$modules-names:  relationship        accountancy         sales               purchases           stocks              production         ;
$modules-colors: #07D                #380                #BB4                #c60                #B00                #741               ;
$modules: ();
@for $i from 1 through length($modules-names) {
  $modules: append($modules, (nth($modules-names, $i) nth($modules-colors, $i)));
}

$fs-ratio: 1.4; // 1.618;
$fs-normal: 14px;
$fs-small:      ceil($fs-normal/$fs-ratio);
$fs-large:     round($fs-ratio*$fs-normal);
$fs-huge:      round($fs-ratio*$fs-large);
$fs-very-huge: round($fs-ratio*$fs-huge);

$neutral-color: #777;
$base-color: #688ED8; //#2BA6CB; // #7A1; //#2BA6CB (ZURB) // #16D (Google)
$active-color: $base-color; // #DE7308; // mix(green, $base-color, 50%);
$link-color:  darken($base-color, 27%);
$link-color:  darken($base-color, 10%);
$text-color:  #111;
$base-font-color:  #222;
$base-font-reversed-color:  #FFF;
$title-color: darken($base-color, 40%);
$important-color: #D88E68;
$invalid-color: red;
$hover-transparency: 0.85;
$hover-mask: transparentize($base-color, $hover-transparency);

@function background-hover($background-color) {
  @return mix($background-color, opacify($hover-mask, 1), percentage($hover-transparency));
}

//$base-color: #95b0e4;
//$link-color: $base-color; /* #3162C0; /* 02C */
$desktop-background: #FFFFFF;
$neutral-background: change-color($neutral-color, $lightness: 90%);
$input-background: $desktop-background;
$light-color: mix($base-color, $desktop-background, 50%); /* #C9D7F1 */
$menu-background: #F0F0F0; /* #3D5C8D F1F1F1 86a5e0 c8d3e9*/
$menu-background-hover: background-hover($menu-background);
$menu-border-color: mix($menu-background, #000000, 87%);
$menu-border-width: floor($fs-normal / 10);
$menu-border: $menu-border-width solid $menu-border-color;
$menu-width: $fs-normal * 13;
$menu-padding: 2*$menu-border-width;
$menu-height:      2 * ceil($fs-normal * 0.875);
$menu-text-height: 2 * ceil($fs-normal * 0.655);
$input-border: $menu-border-width solid mix($desktop-background, $neutral-color, 60%);
$label-width: 25%;

$default-border-radius: round($fs-normal/5);
/* Variation from center to  */
$default-lightness-variation: 5%;
$default-gap: round($fs-normal * 0.55);
$cell-background: mix($desktop-background, $base-color, 82%);
$cell-background-current: mix($desktop-background, $base-color, 62%);


$buttons-names: (new create) (edit update) (destroy abort) (search) (confirm validate) (cancel) (lock) (unlock) (action reflect default) (up) (down) (left) (right) (configure) (column) (table) (duplicate) (point) (mark) (unmark) (true) (false) (page) (spreadsheet) (print) (filter) (mail) (nomail) (sort) (check) (divide) (load) (logout) (increment) (decrement) (close) (help) (merge) (spread) (rgreen) (rblue) (rblack) (nav) (general-informations) (genealogy) (group) (care) (treatment) (drug) (entity) (delay) (stock) (asset) (animal) (vegetable) (document) (movement);
$buttons-states: hover whited active disabled normal;
$buttons-radius: $default-border-radius;
$buttons-formats: ("themes/tekyla/icons-16.png" 24px "&" $buttons-radius) ("themes/tekyla/icons-12.png" 18px "&.mini" 2px) ("themes/tekyla/icons-24.png" 36px "&.large" 4px);

$passive-bg: $menu-background;
$active-bg: $base-color;

/*@import url(http://fonts.googleapis.com/css?family=Source+Sans+Pro:400,400italic,700,700italic);*/
$sans-font-family: 'Open Sans', 'Droid Sans', 'Liberation Sans', Helvetica, sans-serif;
$base-font-family: $sans-font-family;

$header-font-family: $base-font-family;
$body-font-family: $base-font-family;
$body-font-size: $fs-normal;
$em-base: $fs-normal;
$primary-color: $base-color;

$topbar-height: 32px;
$topbar-bg: $active-color;
$topbar-dropdown-bg: $topbar-bg;

$global-radius: $default-border-radius;
$include-html-classes: false;



@function visible-color($background-color) {
  @if lightness($background-color) > 70% {
    @return $base-font-color;
  }
  @else {
    @return $base-font-reversed-color;
  }
}

@function shadow-color-of($color) {
  @if lightness($color) > 50% {
    @return rgba(#222, 0.5);
  }
  @else {
    @return rgba(#FFF, 0.8);
  }
}



@mixin calc($property, $expression) {
  #{$property}: -webkit-calc(#{$expression});
  #{$property}: -moz-calc(#{$expression});
  #{$property}: -ms-calc(#{$expression});
  #{$property}: -o-calc(#{$expression});
  #{$property}: calc(#{$expression});
}



@mixin is-icon($size: round(1.2 * $fs-normal)) {
  font-family: Tekyla;
  font-weight: normal;
  font-style: normal;
  text-decoration: inherit;
  -webkit-font-smoothing: antialiased;
  font-size: $size;

  /* sprites.less reset */
  // @include inline-block;
  width: auto;
  height: auto;
  line-height: $size;
  vertical-align: baseline;
  background-image: none;
  background-position: 0% 0%;
  background-repeat: repeat;
  margin-top: 0;
}

@mixin icon($code) {
  &:before { content: $code; }
}

@mixin use-icon($name) {
  $i: 0;
  @each $symbiol in $symbiols {
    @if nth($symbiol, 1) == $name {
      @include icon(nth($symbiol, 2));
      $i: $i + 1;
    }
  }
  @if $i == 0 {
    @warn "Icon #{$name} is not defined";
  }
}

@mixin define-right-property($base-name, $value) {
  html[dir="ltr"] & { #{$base-name}-right: $value; }
  html[dir="rtl"] & { #{$base-name}-left: $value; }
}

@mixin define-left-property($base-name, $value) {
  html[dir="ltr"] & { #{$base-name}-left: $value; }
  html[dir="rtl"] & { #{$base-name}-right: $value; }
}

@mixin padding-right($value) { @include define-right-property(padding, $value); }
@mixin padding-left($value)  { @include define-left-property(padding, $value); }
@mixin margin-right($value) { @include define-right-property(margin, $value); }
@mixin margin-left($value)  { @include define-left-property(margin, $value); }
@mixin border-right($value) { @include define-right-property(border, $value); }
@mixin border-left($value)  { @include define-left-property(border, $value); }

@mixin left($value) {
  html[dir="ltr"] & { left: $value; }
  html[dir="rtl"] & { right: $value; }
}

@mixin right($value) {
  html[dir="ltr"] & { right: $value; }
  html[dir="rtl"] & { left: $value; }
}

@mixin text-align($dir) {
  @if $dir == right {
    html[dir="ltr"] & { text-align: right; }
    html[dir="rtl"] & { text-align: left; }
  } @else if $dir == left {
    html[dir="ltr"] & { text-align: left; }
    html[dir="rtl"] & { text-align: right; }
  } @else {
    html[dir="ltr"] &, html[dir="rtl"] & { text-align: $dir; }
  }
}

@mixin float($dir) {
  @if $dir == right {
    html[dir="ltr"] & { float: right; }
    html[dir="rtl"] & { float: left; }
  } @else if $dir == left {
    html[dir="ltr"] & { float: left; }
    html[dir="rtl"] & { float: right; }
  } @else {
    html[dir="ltr"] &, html[dir="rtl"] & { float: $dir; }
  }
}

@mixin display($mode) {
  @if $mode == box {
    display: -o-box;
    display: -ms-box;
    display: -moz-box;
    display: -webkit-box;
    display: box;
  } @else {
    display: $mode;
  }
}


@mixin background-active-gradient {
  @include background(linear-gradient(top, lighten($active-color, $default-lightness-variation), $active-color, darken($active-color, $default-lightness-variation)));
}


@mixin title($font-size) {
  font-size: $font-size;
  line-height: round($font-size * 1.4);
  font-weight: bold;
  color: $title-color;
}

@mixin box-emphasis {
  background: $base-color;
  &, & > span {
    color: white;
  }
  @include border-radius($default-border-radius);
  padding: $default-gap;
  text-align: center;
}

@mixin menu-shadow {
  @include box-shadow(0 0 ($fs-normal/4) rgba(0, 0, 0, 0.3));
}

@mixin menu {
  @include background($menu-background);
  @include menu-shadow;
  border: $menu-border;
  // width: $menu-width;
  padding: $menu-padding;
}

@mixin menu-item {
  display: block;
  padding: 0;
  height: $menu-height;
  width: $menu-width;
  list-style-type:none;
  &:hover {
    background: $menu-background-hover;
    @include border-radius($default-border-radius);
  }
  &.no-link {
    background: transparent;
    cursor: default;
    pointer-events: none;
  }
  a {
    $padding: ($menu-height - $menu-text-height)/2;
    display: block;
    padding: $padding;
    &, & span {
      height: $menu-text-height;
      line-height: $menu-text-height;
      vertical-align: middle;
    }
    span.icon {
      /*@include inline-block;*/
      display: block;
      float: left;
      padding: 0;
      height:16px;
      width: 16px;
      margin: (($menu-text-height - 16px)/2) 0;
      @include margin-right($padding);
    }
    span.text {
      /*@include inline-block;*/
      display: block;
      float: left;
      padding: 0;
      margin: 0;
      width: $menu-width - 16px - 3 * $padding;
      font-weight: normal;
      white-space: nowrap;
      overflow: hidden;
      @include ellipsis;
    }
  }
}

@mixin menu-separator {
  height: $menu-border-width;
  background: $menu-border-color;
  padding: 0;
  margin: $menu-padding auto;
}

@mixin item-label {
  &, & * {
    color:$neutral-color;
  }
}

@mixin normal-shadow {
  @include box-shadow(0 0 $default-gap rgba(black, 0.32));
}

@mixin incrust-shadow {
  @include box-shadow(0 0 round($fs-normal/2) rgba(black, 0.15));
}

@mixin tab-pills($font-size: $fs-normal, $title-selector: "dt", $tab-selector: "dd") {
  display: block;
  @include clearfix;
  border-bottom: none;
  margin-bottom: 10px;
  #{$title-selector}, #{$tab-selector} {
    display: block;
    @include float(left);
    margin-top: 0;
    @include margin-right(10px);
    margin-bottom: $default-gap;
    @include margin-left(0);
  }
  #{$title-selector} {
    font-weight: bold;
    color: $neutral-color;
    font-variant: small-caps;
    padding: round($default-gap * 0.3) 0;
    cursor: default;
  }
  #{$tab-selector} {
    &:last-of-type {
      @include margin-right(0);
    }
    a {
      @include inline-block;
      @include border-radius(1000px);
      $border-width: 1px;
      border: $border-width solid transparent;
      background: $neutral-background;
      padding: round($default-gap * 0.2 - $border-width) $default-gap;
      &, & * {
        color: $base-font-color;
        @include text-shadow(1px 1px 0 white);
        font-size: $font-size;
        line-height: round(1.4*$font-size);
      }
      &:focus {
        @include box-shadow(0 0 round($fs-normal*0.6) rgba($base-color, 0.6));
      }
      &:focus, &:active {
        outline: none;
        border-color: $active-color;
      }
      &:hover {
        @include box-shadow(0 0 $default-gap white);
      }
    }
    &.active {
      margin-top: 0;
      a {
        background-color: $primary-color;
        border-color: $active-color;
        &, & * { color: white; font-weight: bold; @include text-shadow(1px 1px 0 $neutral-color)}
        i { font-weight: normal; }
      }
    }
    &.disabled {
      a {
        opacity: 0.9;
        color: $neutral-color;
        background: $neutral-background;
        cursor: default;
        pointer-events: none;
      }
    }
  }
}



/*@mixin button-group { */
@mixin button-group() {
  > button, > a.button, > a.btn, > input, > select {
    @include border-radius(0);
    @include margin-left(-1 * $menu-border-width);
    z-index: 1;
    &:first-child {
      @include margin-left(0);
    }
    html[dir="ltr"] &:first-child, html[dir="rtl"] &:last-child {
      @include border-top-left-radius($buttons-radius);
      @include border-bottom-left-radius($buttons-radius);
    }
    html[dir="ltr"] &:last-child, html[dir="rtl"] &:first-child {
      @include border-top-right-radius($buttons-radius);
      @include border-bottom-right-radius($buttons-radius);
    }
    &:focus, &:hover, &:active {
      position: relative;
      z-index: 2;
    }
  }
}



@mixin toolbar {
  & > * {
    display: none;
  }
  @include inline-block;
  & > input, & > a, & > span {
    @include inline-block;
    @include border-radius(0);
    @include margin-left(-1px);
    @include margin-right(0);

    // Disabled for now because produces errors on AJAX content...
    &:focus, &:active, &:hover {
      // position: relative;
      z-index: 2;
    }

    &:first-child {
      @include margin-left(0);
      @include border-left-radius($default-border-radius);
    }
    &:last-child {
      @include border-right-radius($default-border-radius);
    }
  }
}

// Permits to define properly media queries
@mixin respond-to($screen-sizes...) {
  @each $screen-size in $screen-sizes {
    @if $screen-size == small {
      @media only screen and (max-width: $small-screen) { @content; }
    }
    @else if $screen-size == medium {
      @media only screen and (min-width: $small-screen) and (max-width: $medium-screen) { @content; }
    }
    @else if $screen-size == normal {
      @media only screen and (min-width: $medium-screen) and (max-width: $large-screen) { @content; }
    }
    @else if $screen-size == large {
      @media only screen and (min-width: $large-screen) { @content; }
    }
    @else {
      @warn "Assuming no @media queries for unknown screen size: #{$screen-size}";
      @content;
    }
  }
}

@mixin respond-to-bigger-than($screen-size) {
  @if $screen-size == small {
    @media screen and (min-width: $small-screen) { @content; }
  }
  @else if $screen-size == medium {
    @media screen and (min-width: $medium-screen) { @content; }
  }
  @else if $screen-size == normal {
    @media screen and (min-width: $large-screen) { @content; }
  }
  @else {
    @warn "Assuming no @media queries for unknown screen size: #{$screen-size}";
    @content;
  }
}



@import "foundation/components/global";
@import "foundation/components/grid";
// @import "foundation/components/top-bar";
// @import "foundation/components/buttons";

@import "active-list/minimal";
@import "beehive.css.scss";
@import "tables.css.scss";
// @import "layout.css.scss";
@import "buttons.css.scss";
@import "check-boxes.css.scss";
@import "active-list.css.scss";
@import "main.css.scss";
