require 'test_helper'

class Backend::Hajimari::CapImportsControllerTest < ActionController::TestCase

  def setup
    @cap_file = File.read(Rails.root.join('test','fixtures', 'files', 'cap_file'))
  end

  # test "should parse cap file" do
  #   hashed = {}
  #   hashed = Hash.from_xml(@cap_file)
  #   hashed.deep_symbolize_keys!
  #   assert_not_empty hashed
  #   assert_equal 'GAEC DUPONT', hashed[:producteurs][:producteur][:demandeur][:identification_societe][:exploitation]
  #
  # end

  test "should parse coordinates" do
    item = '<gml:MultiPolygon srsName="EPSG:4326"><gml:polygonMember><gml:Polygon><gml:outerBoundaryIs><gml:LinearRing><gml:coordinates>-0.770312065789902,45.8003359330027 -0.770710585763169,45.8007840096096 -0.770185195211008,45.801509216311899 -0.770510858779498,45.8015816862601 -0.770134155392362,45.802195633779299 -0.770601022280201,45.802263123079904 -0.770935885096849,45.801794842412498 -0.771945949098823,45.801686392409302 -0.772294764499899,45.8023792206926 -0.772312186980655,45.802477778133401 -0.772029884046526,45.802493870929801 -0.771960577628073,45.802388465806303 -0.771781987787491,45.802437800036103 -0.771698265016636,45.802548429857097 -0.771605749631656,45.802712975887097 -0.771500417950768,45.802858234085299 -0.770631120233878,45.8026130780271 -0.770540199532932,45.802778561443503 -0.770444221446062,45.802907008155501 -0.769827810692124,45.802699235850604 -0.769979913544187,45.802443278624899 -0.769120552815526,45.802269053248601 -0.770312065789902,45.8003359330027</gml:coordinates></gml:LinearRing></gml:outerBoundaryIs></gml:Polygon></gml:polygonMember></gml:MultiPolygon>'
    #from database
    # "<gml:MultiPolygon srsName="EPSG:4326"><gml:polygonMember><gml:Polygon><gml:outerBoundaryIs><gml:LinearRing><gml:coordinates>-0.770312065789902,45.8003359330027 -0.770710585763169,45.8007840096096 -0.770185195211008,45.801509216311899 -0.770510858779498,45.8015816862601 -0.770134155392362,45.802195633779299 -0.770601022280201,45.802263123079904 -0.770935885096849,45.801794842412498 -0.771945949098823,45.801686392409302 -0.772294764499899,45.8023792206926 -0.772312186980655,45.802477778133401 -0.772029884046526,45.802493870929801 -0.771960577628073,45.802388465806303 -0.771781987787491,45.802437800036103 -0.771698265016636,45.802548429857097 -0.771605749631656,45.802712975887097 -0.771500417950768,45.802858234085299 -0.770631120233878,45.8026130780271 -0.770540199532932,45.802778561443503 -0.770444221446062,45.802907008155501 -0.769827810692124,45.802699235850604 -0.769979913544187,45.802443278624899 -0.769120552815526,45.802269053248601 -0.770312065789902,45.8003359330027</gml:coordinates></gml:LinearRing></gml:outerBoundaryIs></gml:Polygon></gml:polygonMember></gml:MultiPolygon>"
    # item = '<gml:LineString srsName="EPSG:4269"><gml:coordinates>-71.16028,42.258729 -71.160837,42.259112 -71.161143,42.25932</gml:coordinates></gml:LineString>'
    # item = "SRID=4326;MULTIPOLYGON(((-0.770312065789902 45.8003359330027,-0.770710585763169 45.8007840096096,-0.770185195211008 45.8015092163119,-0.770510858779498 45.8015816862601,-0.770134155392362 45.8021956337793,-0.770601022280201 45.8022631230799,-0.770935885096849 45.8017948424125,-0.771945949098823 45.8016863924093,-0.772294764499899 45.8023792206926,-0.772312186980655 45.8024777781334,-0.772029884046526 45.8024938709298,-0.771960577628073 45.8023884658063,-0.771781987787491 45.8024378000361,-0.771698265016636 45.8025484298571,-0.771605749631656 45.8027129758871,-0.771500417950768 45.8028582340853,-0.770631120233878 45.8026130780271,-0.770540199532932 45.8027785614435,-0.770444221446062 45.8029070081555,-0.769827810692124 45.8026992358506,-0.769979913544187 45.8024432786249,-0.769120552815526 45.8022690532486,-0.770312065789902 45.8003359330027)))"
    # item = "MULTIPOLYGON(((-0.770312065789902 45.8003359330027,-0.770710585763169 45.8007840096096,-0.770185195211008 45.8015092163119,-0.770510858779498 45.8015816862601,-0.770134155392362 45.8021956337793,-0.770601022280201 45.8022631230799,-0.770935885096849 45.8017948424125,-0.771945949098823 45.8016863924093,-0.772294764499899 45.8023792206926,-0.772312186980655 45.8024777781334,-0.772029884046526 45.8024938709298,-0.771960577628073 45.8023884658063,-0.771781987787491 45.8024378000361,-0.771698265016636 45.8025484298571,-0.771605749631656 45.8027129758871,-0.771500417950768 45.8028582340853,-0.770631120233878 45.8026130780271,-0.770540199532932 45.8027785614435,-0.770444221446062 45.8029070081555,-0.769827810692124 45.8026992358506,-0.769979913544187 45.8024432786249,-0.769120552815526 45.8022690532486,-0.770312065789902 45.8003359330027)))"
    # item2 = ::Charta::Geometry.new(item).transform(:WGS84).to_geojson
    item2 = ::Charta::Geometry.new(item).to_geojson
    print item2
    print item2.to_json
  end

end