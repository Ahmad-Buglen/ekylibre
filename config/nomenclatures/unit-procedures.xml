<?xml version="1.0" encoding="UTF-8"?>
<procedures xmlns="http://www.ekylibre.org/XML/2013/procedures">
  <!-- ############################## EPANDRE DU FUMIER ######################################## -->
  <!-- name avec namespace séparé par ; natures appelle les noms de procedure fichier procedure-nature-->
  <procedure name="organic_fertilizing" natures="enrichment">
    <!-- les variables non transmises seront obligatoirement demandées lors de l'utilisation de la procédure-->
    <!-- parameter = false , alors la variable ne sera pas demandée et peut servir de variable interne -->
    <!-- same-nature-of = "parameter" quand une variable interne est issue d'un objet passé en paramètre -->
    <!-- les compétences (abilities) sont notés sous la forme d'une compétence sur une variété : compétence(variété)-->
    <variables>
      <variable name="manure" variety="organic_matter" abilities="fertilize(plant)"/>
      <variable name="manure_to_spread" same-nature-of="manure" parameter="false"/>
      <variable name="spreader" abilities="spreading(organic_matter)" /><!-- paramètre réprésentant des objets qui possede la compétence "Epandre"  un produit de la variété "organic_matter"-->
      <variable name="driver" variety="worker"/><!-- paramètre réprésentant des objets de type Humain qui possede la compétence "Conduire un ensemble tracteur + épandeur"  -->
      <variable name="tractor" variety="equipment" abilities="tow,catch"/><!-- paramètre réprésentant des objets qui possede la compétence "Tracter"  -->
      <variable name="land_parcel" variety="land_parcel"/>
    </variables>
    <operations>        
      <operation name="transport_0100">
        <task do="[driver] moves-in [tractor]"/><!-- le chauffeur se déplace vers le tracteur et rentre dedans (?) -->
      </operation>
      <operation name="transport_0200">
        <task do="[tractor] moves-to [spreader]"/><!-- le chauffeur et le tracteur se déplace vers le lieu actuel de l'épandeur-->
      </operation>
      <operation name="catch_0300">
        <task do="[tractor] catches [spreader]"/><!-- le chauffeur attache l'épandeur au tracteur -->
      </operation>
      <operation name="transport_0400">
        <task do="[tractor] moves-to [manure]"/><!-- le chauffeur, tracteur et épandeur se déplacent vers le lieu actuel du tas de fumier-->
      </operation>
      <operation name="internal_0500">
        <task do="[manure] parts-with [manure_to_spread](quantity::?)"/><!--  on sépare le fumier que l'on va mettre dans l'épandeur du tas global --> 
      </operation>
      <operation name="transport_0600">
        <task do="[manure_to_spread] moves-in [spreader]"/><!-- le chauffeur charge du fumier dans l'épandeur qui est un lieu de stockage temporaire (normalement plus complexe que cela)-->
      </operation>
      <operation name="transport_0700">
        <task do="[tractor] moves-to [land_parcel]"/><!-- le chauffeur + son tracteur et son épandeur chargé de fumier se déplace vers la parcelle et rentre dedant (?) -->
      </operation>
      <operation name="spreading_0800">
        <!-- Tant que le [tractor] travaille (? = sous-entendu le tracteur tourne,le conducteur roule, l'épandeur tourne) les task tournent -->
        <task do="[manure_to_spread] moves-in [land_parcel]"/><!-- le fumier tombe par terre car l'épandeur tourne (?) -->
        <task do="[land_parcel] consumes [manure_to_spread]"/><!-- la parcelle consomme le fumier épandu -->
        <!-- À terme, on devrait être capable de faire IF l'épandeur est vide alors j'arrete de travailler -->
        <!-- et je retourne charger du fumier sur le tas global-->
      </operation><!-- a terme, on devrait être capable de faire une boucle WHILE tant que la parcelle n'a pas eu la dose de fumier , je continue de charger et épandre  -->
    </operations>        
  </procedure>
  <!--
      Journal de culture [land_parcelle] à la fin :    le 01/01/2013 = Ma parcelle 1 a reçu une dose de XX Tonne de fumier
      Journal d'entretien [tractor] à la fin :         le 01/01/2013 = Mon tracteur a travaillé pendant YY Heures pour épandre du fumier dans la parcelle 1
      Journal des temps de travaux [driver] à la fin : le 01/01/2013 = J'ai épandu du fumier pendant YY Heures dans la parcelle 1
  -->
  <!-- ######################################### LABOURER ########################################## -->
  <procedure name="plowing" natures="tillage">
    <variables>
      <variable name="driver" variety="worker"/><!-- paramètre réprésentant des objets de type Humain qui possede la compétence "Conduire un ensemble tracteur + épandeur"  -->
      <variable name="tractor" variety="equipment" abilities="tow,catch"/><!-- paramètre réprésentant des objets qui possede la compétence "Tracter"  -->
      <variable name="land_parcel" variety="land_parcel"/>
      <variable name="plow" variety="equipment" abilities="plowing"/>
    </variables>
    <operations>
      <operation name="transport_0100">
        <task do="[driver] moves-in [tractor]"/><!-- le chauffeur se déplace vers le tracteur et rentre dedant (?) -->
      </operation>
      <operation name="transport_0200">
        <task do="[tractor] moves-to [plow]"/><!-- le chauffeur et le tracteur se déplace vers le lieu actuel de la charrue-->
      </operation>
      <operation name="catch_0300">
        <task do="[tractor] catches [plow]"/><!-- le chauffeur attache la charrue au tracteur -->
      </operation>
      <operation name="transport_0400">
        <task do="[tractor] moves-to [land_parcel]"/><!-- le chauffeur + son tracteur et sa charrue se déplace vers la parcelle et rentre dedant (?) -->
      </operation>
      <operation name="plowing_0500">
        <task do="[tractor] acts-on [land_parcel]"/><!-- le tracteur et le chauffeur laboure la parcelle-->
        <task do="[driver] measure [land_parcel] at ground_appearance"/><!-- le chauffeur du tracteur mesure / observe l'état de la parcelle au niveau de sa surface (valeur attendue = raw)-->
      </operation>
    </operations>        
  </procedure>
  <!-- ########################################## HERSER ######################################### -->
  <procedure name="surperficial-plowing" natures="tillage">
    <variables>
      <variable name="driver" variety="worker"/><!-- paramètre réprésentant des objets de type Humain qui possede la compétence "Conduire un ensemble tracteur + épandeur"  -->
      <variable name="tractor" variety="equipment" abilities="tow,catch"/><!-- paramètre réprésentant des objets qui possede la compétence "Tracter"  -->
      <variable name="land_parcel" variety="land_parcel"/>
      <variable name="harrow" type="equipment" abilities="plowing" /><!-- paramètre réprésentant des objets qui possede la compétence "Travailler le sol"  -->
    </variables>
    <operations>
      <operation name="transport_0100">
        <task do="[driver] moves-in [tractor]"/><!-- le chauffeur se déplace vers le tracteur et rentre dedant (?) -->
      </operation>
      <operation name="transport_0200">
        <task do="[tractor] moves-to [harrow]"/><!-- le chauffeur et le tracteur se déplace vers le lieu actuel de la charrue-->
      </operation>
      <operation name="catch_0300">
        <task do="[tractor] catches [harrow]"/><!-- le chauffeur attache la charrue au tracteur -->
      </operation>
      <operation name="transport_0400">
        <task do="[tractor] moves-to [land_parcel]"/><!-- le chauffeur + son tracteur et sa charrue se déplace vers la parcelle et rentre dedant (?) -->
      </operation>
      <operation name="superficial_plowing_0500">
        <task do="[tractor] acts-on [land_parcel]"/><!-- le tracteur et le chauffeur laboure la parcelle-->
        <task do="[driver] measure [land_parcel] at sowable"/><!-- le chauffeur du tracteur mesure / observe l'état de la parcelle au niveau de sa surface (valeur attendue = raw)-->
      </operation>
    </operations>        
  </procedure>
  <!-- ######################################### SEMER ########################################## -->
  <procedure name="sowing" natures="tillage">
    <variables>
      <variable name="seeds" variety="plant" abilities="germinate"/>
      <variable name="seeds_to_sow" same-nature-of="seeds" parameter="false"/>
      <variable name="seeder" variety="equipment" abilities="sowing" /><!-- paramètre réprésentant des objets qui possede la compétence "Semer"  -->
      <variable name="driver" variety="worker"/><!-- paramètre réprésentant des objets de type Humain qui possede la compétence "Conduire un ensemble tracteur + épandeur"  -->
      <variable name="tractor" variety="equipment" abilities="tow,catch"/><!-- paramètre réprésentant des objets qui possede la compétence "Tracter"  -->
      <variable name="land_parcel" variety="land_parcel"/>
      <variable name="culture" variety="plant"/>
    </variables>
    <operations>
      <operation name="transport_0100">
        <task do="[driver] moves-in [tractor]"/><!-- le chauffeur se déplace vers le tracteur et rentre dedant (?) -->
      </operation>
      <operation name="transport_0200">
        <task do="[tractor] moves-to [seeder]"/><!-- le chauffeur et le tracteur se déplace vers le lieu actuel de la charrue-->
      </operation>
      <operation name="catch_0300">
        <task do="[tractor] catches [seeder]"/><!-- le chauffeur attache la charrue au tracteur -->
      </operation>
      <operation name="transport_0400">
        <task do="[tractor] moves-to [seeds]"/><!-- le chauffeur, tracteur et le semoir se déplacent vers le lieu actuel des semences-->
      </operation>
      <operation name="internal_0500">
        <task do="[seeds] parts-with [seeds_to_sow](quantity::?)"/><!--  on sépare les semences que l'on va mettre dans le semoir du stock --> 
      </operation>
      <operation name="loading_0600">
        <task do="[seeds_to_sow] moves-in [seeder]"/><!-- le chauffeur charge des semences dans le semoir qui est un lieu de stockage temporaire de semences (normalement plus complexe que cela)-->
      </operation>
      <operation name="transport_0700">
        <task do="[tractor] moves-to [land_parcel]"/><!-- le chauffeur + son tracteur et son semoir chargé de semences se déplace vers la parcelle et rentre dedant (?) -->
      </operation>
      <operation name="sowing_0800">
        <!-- tant que le [tractor] travaille (? = sous-entendu le tracteur tourne,le conducteur roule, le semoir sème) les task tournent -->
        <task do="[seeds_to_sow] moves-in [land_parcel]"/><!-- les semences tombe par terre car le semoir tourne  -->
        <task do="[land_parcel] consumes [seeds_to_sow]"/><!-- la parcelle consomme les semences épandues -->
        <task do="[land_parcel] produce [culture](quantity::?, unit::[land_parcel].unit)"/><!-- les semences tombées sur le sol produise une sole de blé -->
        <task do="[driver] measure [land_parcel] at in_production"/><!-- le chauffeur du tracteur mesure / observe l'état de la parcelle au niveau de son passage en production (valeur attendue = true)-->
        <!-- a terme, on devrait être capable de faire IF le semoir est vide alors j'arrete de semer -->
        <!-- et je retourne charger des semences sur le tas global-->
      </operation>
    </operations>        
  </procedure>
  <!-- ######################################## EPANDRE DE L'ENGRAIS ########################################### -->
  <procedure name="mineral_fertilizing" natures="enrichment">
    <variables>
      <variable name="fertilizer" variety="mineral_matter" abilities="fertilize(plant)"/>
      <variable name="fertilizer_to_spread" same-nature-of="fertilizer" parameter="false"/>
      <variable name="spreader" abilities="spreading(mineral_matter)" /><!-- paramètre réprésentant des objets qui possede la compétence "Epandre"  un produit de la variété "organic_matter"-->
      <variable name="driver" variety="worker"/><!-- paramètre réprésentant des objets de type Humain qui possede la compétence "Conduire un ensemble tracteur + épandeur"  -->
      <variable name="tractor" variety="equipment" abilities="tow,catch"/><!-- paramètre réprésentant des objets qui possede la compétence "Tracter"  -->
      <variable name="land_parcel" variety="land_parcel"/>
    </variables>
    <operations>  
      <operation name="transport_0100">
        <task do="[driver] moves-in [tractor]"/><!-- le chauffeur se déplace vers le tracteur et rentre dedans (?) -->
      </operation>
      <operation name="transport_0200">
        <task do="[tractor] moves-to [spreader]"/><!-- le chauffeur et le tracteur se déplace vers le lieu actuel de l'épandeur-->
      </operation>
      <operation name="catch_0300">
        <task do="[tractor] catches [spreader]"/><!-- le chauffeur attache l'épandeur au tracteur -->
      </operation>
      <operation name="transport_0400">
        <task do="[tractor] moves-to [fertilizer]"/><!-- le chauffeur, tracteur et épandeur se déplacent vers le lieu actuel du tas de fumier-->
      </operation>
      <operation name="internal_0500">
        <task do="[fertilizer] parts-with [fertilizer_to_spread](quantity::?)"/><!--  on sépare le fumier que l'on va mettre dans l'épandeur du tas global --> 
      </operation>
      <operation name="transport_0600">
        <task do="[fertilizer_to_spread] moves-in [spreader]"/><!-- le chauffeur charge du fumier dans l'épandeur qui est un lieu de stockage temporaire (normalement plus complexe que cela)-->
      </operation>
      <operation name="transport_0700">
        <task do="[tractor] moves-to [land_parcel]"/><!-- le chauffeur + son tracteur et son épandeur chargé de fumier se déplace vers la parcelle et rentre dedant (?) -->
      </operation>
      <operation name="spreading_0800">
        <!-- tant que le [tractor] travaille (? = sous-entendu le tracteur tourne,le conducteur roule, l'épandeur tourne) les task tournent -->
        <task do="[fertilizer_to_spread] moves-in [land_parcel]"/><!-- le fumier tombe par terre car l'épandeur tourne (?) -->
        <task do="[land_parcel] consumes [fertilizer_to_spread]"/><!-- la parcelle consomme le fumier épandu -->
        <!-- a terme, on devrait être capable de faire IF l'épandeur est vide alors j'arrete de travailler -->
        <!-- et je retourne charger du fumier sur le tas global-->
      </operation><!-- a terme, on devrait être capable de faire une boucle WHILE tant que la parcelle n'a pas eu la dose de fumier , je continue de charger et épandre  -->
    </operations> 
  </procedure>
  <!-- ######################################## TRAITER CHIMIQUEMENT LA CULTURE AVEC UNE MOLECULE ########################################### -->
  <procedure name="chemical_treatment" natures="treatment">
    <variables>
      <variable name="driver" variety="worker"/><!-- paramètre réprésentant des objets de type Humain qui possede la compétence "Conduire un ensemble tracteur + épandeur"  -->
      <variable name="tractor" variety="equipment" abilities="tow,catch"/><!-- paramètre réprésentant des objets qui possede la compétence "Tracter"  -->
      <variable name="molecule" variety="phytosanitary"/>
      <variable name="molecule_to_spray" same-nature-of="molecule" parameter="false"/>
      <variable name="sprayer" variety="equipment" abilities="spray" />
      <variable name="culture" variety="plant"/>
    </variables>
    <operations>
      <operation name="transport_0100">
        <task do="[driver] moves-in [tractor]"/><!-- le chauffeur se déplace vers le tracteur et rentre dedans (?) -->
      </operation>
      <operation name="transport_0200">
        <task do="[tractor] moves-to [sprayer]"/><!-- le chauffeur et le tracteur se déplace vers le lieu actuel de l'épandeur-->
      </operation>
      <operation name="catch_0300">
        <task do="[tractor] catches [sprayer]"/><!-- le chauffeur attache l'épandeur au tracteur -->
      </operation>
      <operation name="transport_0400">
        <task do="[tractor] moves-to [molecule]"/><!-- le chauffeur, tracteur et épandeur se déplacent vers le lieu actuel du tas de fumier-->
      </operation>
      <operation name="internal_0500">
        <task do="[molecule] parts-with [molecule_to_spray](quantity::?)"/><!--  on sépare le fumier que l'on va mettre dans l'épandeur du tas global --> 
      </operation>
      <operation name="transport_0600">
        <task do="[molecule_to_spray] moves-in [sprayer]"/><!-- le chauffeur charge du fumier dans l'épandeur qui est un lieu de stockage temporaire (normalement plus complexe que cela)-->
      </operation>
      <operation name="transport_0700">
        <task do="[tractor] moves-to [culture]"/><!-- le chauffeur + son tracteur et son épandeur chargé de fumier se déplace vers la parcelle et rentre dedant (?) -->
      </operation>
      <operation name="spraying_0800">
        <!-- tant que le [tractor] travaille (? = sous-entendu le tracteur tourne,le conducteur roule, le pulvé tourne) les task tournent -->
        <task do="[molecule_to_spray] moves-in [culture]"/><!-- le traitement tombe sur la sole de blé car le pulvé tourne (?) -->
        <task do="[culture] consumes [molecule_to_spray]"/><!-- la sole de blé consomme le traitement épandu car il se dépose sur les feuilles des plants de blé -->
        <!-- Le bioprocess lié doit faire l'action suivante : [culture] consumes [fertilizer] in [land_parcel] -->
        <!-- À terme, on devrait être capable de faire IF l'épandeur est vide alors j'arrete de travailler -->
        <!-- et je retourne charger de l'engrais sur le tas global-->
      </operation>
    </operations>        
  </procedure>
  <!-- ######################################## MOISSONNER ########################################### -->
  <procedure name="seed_harvest" natures="production">
    <variables>
      <variable name="silo" variety="settlement" abilities="store(plant)"/>
      <variable name="driver" variety="worker"/><!-- paramètre réprésentant des objets de type Humain qui possede la compétence "Conduire un ensemble tracteur + épandeur"  -->
      <variable name="tractor" variety="equipment" abilities="tow,catch"/><!-- paramètre réprésentant des objets qui possede la compétence "Tracter"  -->
      <variable name="trailer" variety="equipment" abilities="store_fluid,transport"/><!-- paramètre réprésentant des objets qui possede la compétence "Semer"  -->
      <variable name="cropper_driver" variety="worker" abilities="cropper_driving" /><!-- paramètre réprésentant des objets de type Humain qui possede la compétence "Conduire un ensemble de semis"  -->
      <variable name="cropper" type="equipment" abilities="harvest(plant)" /><!-- paramètre réprésentant des objets de type Humain qui possede la compétence "Conduire un ensemble de semis"  -->
      <variable name="culture" variety="plant"/>
      <variable name="grains" same-variety-of="culture" derivative="grain"/>
      <variable name="straw" same-variety-of="culture" derivative= "straw"/>
    </variables>
    <operation name="transport_0100">
      <task do="[cropper-driver] moves-in [cropper]"/><!-- le chauffeur se déplace vers la moissonneuse et rentre dedant (?) -->
    </operation>
    <operation name="transport_0200">
      <task do="[cropper] moves-to [culture]"/><!-- le chauffeur et la moissonneuse se déplace vers le lieu à récolter -->
    </operation>
    <operation name="seed_harvest_0300">
      <task do="[cropper] acts-on [culture]"><!-- tant que le [cropper] travaille (? = sous-entendu la moissonneuse tourne,le conducteur roule, le batteur tourne) les sub-task tournent -->
        <task do="[culture] produce [grains](quantity::?, unit::?)"/><!-- le traitement tombe sur la sole de blé car le pulvé tourne (?) -->
        <task do="[grains] moves-in [cropper]"/>
        <task do="[culture] produce [straw](quantity::?, unit::?)"/><!-- la sole de blé consomme le traitement épandu car il se dépose sur les feuilles des plants de blé -->
        <task do="[straw] moves-in [culture]"/>
      </task>
    </operation>
    <operation name="transport_0400">
      <task do="[driver] moves-in [tractor]"/><!-- le chauffeur se déplace vers le tracteur et rentre dedant (?) -->
    </operation>
    <operation name="transport_0500">
      <task do="[tractor] moves-to [trailer]"/><!-- le chauffeur et le tracteur se déplace vers le lieu actuel de la remorque-->
    </operation>
    <operation name="catch_0600">
      <task do="[tractor] catches [trailer]"/><!-- le chauffeur attache la remorque au tracteur -->
    </operation>
    <operation name="transport_0700">
      <task do="[tractor] moves-to [culture]"/><!-- déplacement dans la culture -->
    </operation>
    <operation name="transport_0800">
      <!-- Le transfert doit pouvoir se faire autant de fois que necessaire notions d' aller/retour -->
      <task do="[cropper] moves-to [tractor]"/><!-- la moissoneuse se déplace vers le tracteur et la remorque -->
    </operation>
    <operation name="transfert_0900">
      <task do="[grains] moves-in [trailer]"/><!-- la moissoneuse vide ses grains dans la remorque -->
    </operation>
    <operation name="transport_1000">
      <task do="[tractor] moves-to [silo]"/><!-- le tracteur avec sa remorque pleine va au silo -->
    </operation>
    <operation name="transfert_1100">
      <task do="[grains] moves-in [silo]"/><!-- le tracteur vide ses grains dans le silo -->
    </operation>
  </procedure>
  <!-- @TODO ######################################## BOTTELLER LA PAILLE ########################################### -->
  
  <!-- @TODO ######################################## TRANSPORTER LA PAILLE ######################################### -->


<!-- ######################################## VELAGE PRODUISANT UN VEAU ########################################### -->

<procedure name="calving_one" natures="calving">
    <variables>
      <variable name="mother_animal" variety="bos" abilities="produce"/>
      <variable name="child_animal" variety="bos" new="true"/>
      <variable name="person" variety="worker"/>
    </variables>
    <operations>
      <operation name="calving_0100">
        <task do="[mother_animal] produce [child_animal](mother=[mother_animal], father=?, quantity=1, unit=u, weight=?, mammalia_twins_condition=none)"/><!-- une vache produit un veau -->
        <task do="[person] measure [child_animal] at mammalia_born_condition"/>
        <task do="[person] measure [mother_animal] at mammalia_born_cycle"/>
        <task do="[person] measure [mother_animal] at mammalia_reproduction_method_embryo_transplant"/>
        <task do="[person] measure [mother_animal] at mammalia_reproduction_event_abortion"/>
       </operation>
    </operations>        
  </procedure>

<!-- ######################################## VELAGE PRODUISANT DES JUMEAUX ########################################### -->

<procedure name="calving_twice" natures="calving">
    <variables>
      <variable name="mother_animal" variety="bos" abilities="produce"/>
      <variable name="child_animal_first" variety="bos" new="true"/>
      <variable name="child_animal_second" variety="bos" new="true"/>
      <variable name="person" variety="worker"/>
    </variables>
    <operations>
      <operation name="calving_0100">
        <task do="[mother_animal] produce [child_animal_first](mother=[mother_animal], father=?, quantity=1, unit=u, weight=?, mammalia_twins_condition=twins)"/><!-- une vache produit le premier veau -->
        <task do="[person] measure [child_animal_first] at mammalia_born_condition"/>
      </operation>
      <operation name="calving_0200">
        <task do="[mother_animal] produce [child_animal_second](mother=[mother_animal], father=?, quantity=1, unit=u, weight=?, mammalia_twins_condition=twins)"/><!-- une vache produit le second veau -->
        <task do="[person] measure [child_animal_second] at mammalia_born_condition"/>
      </operation>
      <operation name="calving_0300">
        <task do="[person] measure [mother_animal] at mammalia_born_cycle"/>
        <task do="[person] measure [mother_animal] at mammalia_reproduction_method_embryo_transplant"/>
        <task do="[person] measure [mother_animal] at mammalia_reproduction_event_abortion"/>      
      </operation>
    </operations>        
  </procedure>


</procedures>
