# Autogenerated from a Treetop grammar. Edits may be lost.


module Procedo
  module HandlerMethod
    include Treetop::Runtime

    def root
      @root ||= :expression
    end

    def _nt_expression
      start_index = index
      if node_cache[:expression].has_key?(index)
        cached = node_cache[:expression][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_additive
      if r1
        r0 = r1
      else
        r2 = _nt_primary
        if r2
          r0 = r2
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:expression][start_index] = r0

      r0
    end

    module Multitive0
      def head
        elements[0]
      end

      def operand
        elements[4]
      end
    end

    module Multitive1
      def head
        elements[0]
      end

      def operand
        elements[4]
      end
    end

    def _nt_multitive
      start_index = index
      if node_cache[:multitive].has_key?(index)
        cached = node_cache[:multitive][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      i1, s1 = index, []
      r2 = _nt_primary
      s1 << r2
      if r2
        r4 = _nt_space
        if r4
          r3 = r4
        else
          r3 = instantiate_node(SyntaxNode,input, index...index)
        end
        s1 << r3
        if r3
          if has_terminal?("*", false, index)
            r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("*")
            r5 = nil
          end
          s1 << r5
          if r5
            r7 = _nt_space
            if r7
              r6 = r7
            else
              r6 = instantiate_node(SyntaxNode,input, index...index)
            end
            s1 << r6
            if r6
              r8 = _nt_multitive
              s1 << r8
            end
          end
        end
      end
      if s1.last
        r1 = instantiate_node(Multiplication,input, i1...index, s1)
        r1.extend(Multitive0)
      else
        @index = i1
        r1 = nil
      end
      if r1
        r0 = r1
      else
        i9, s9 = index, []
        r10 = _nt_primary
        s9 << r10
        if r10
          r12 = _nt_space
          if r12
            r11 = r12
          else
            r11 = instantiate_node(SyntaxNode,input, index...index)
          end
          s9 << r11
          if r11
            if has_terminal?("/", false, index)
              r13 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("/")
              r13 = nil
            end
            s9 << r13
            if r13
              r15 = _nt_space
              if r15
                r14 = r15
              else
                r14 = instantiate_node(SyntaxNode,input, index...index)
              end
              s9 << r14
              if r14
                r16 = _nt_multitive
                s9 << r16
              end
            end
          end
        end
        if s9.last
          r9 = instantiate_node(Division,input, i9...index, s9)
          r9.extend(Multitive1)
        else
          @index = i9
          r9 = nil
        end
        if r9
          r0 = r9
        else
          r17 = _nt_primary
          if r17
            r0 = r17
          else
            @index = i0
            r0 = nil
          end
        end
      end

      node_cache[:multitive][start_index] = r0

      r0
    end

    module Additive0
      def head
        elements[0]
      end

      def operand
        elements[4]
      end
    end

    module Additive1
      def head
        elements[0]
      end

      def operand
        elements[4]
      end
    end

    def _nt_additive
      start_index = index
      if node_cache[:additive].has_key?(index)
        cached = node_cache[:additive][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      i1, s1 = index, []
      r2 = _nt_multitive
      s1 << r2
      if r2
        r4 = _nt_space
        if r4
          r3 = r4
        else
          r3 = instantiate_node(SyntaxNode,input, index...index)
        end
        s1 << r3
        if r3
          if has_terminal?("+", false, index)
            r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("+")
            r5 = nil
          end
          s1 << r5
          if r5
            r7 = _nt_space
            if r7
              r6 = r7
            else
              r6 = instantiate_node(SyntaxNode,input, index...index)
            end
            s1 << r6
            if r6
              r8 = _nt_additive
              s1 << r8
            end
          end
        end
      end
      if s1.last
        r1 = instantiate_node(Addition,input, i1...index, s1)
        r1.extend(Additive0)
      else
        @index = i1
        r1 = nil
      end
      if r1
        r0 = r1
      else
        i9, s9 = index, []
        r10 = _nt_multitive
        s9 << r10
        if r10
          r12 = _nt_space
          if r12
            r11 = r12
          else
            r11 = instantiate_node(SyntaxNode,input, index...index)
          end
          s9 << r11
          if r11
            if has_terminal?("-", false, index)
              r13 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("-")
              r13 = nil
            end
            s9 << r13
            if r13
              r15 = _nt_space
              if r15
                r14 = r15
              else
                r14 = instantiate_node(SyntaxNode,input, index...index)
              end
              s9 << r14
              if r14
                r16 = _nt_additive
                s9 << r16
              end
            end
          end
        end
        if s9.last
          r9 = instantiate_node(Substraction,input, i9...index, s9)
          r9.extend(Additive1)
        else
          @index = i9
          r9 = nil
        end
        if r9
          r0 = r9
        else
          r17 = _nt_multitive
          if r17
            r0 = r17
          else
            @index = i0
            r0 = nil
          end
        end
      end

      node_cache[:additive][start_index] = r0

      r0
    end

    module Primary0
      def expression
        elements[2]
      end

    end

    def _nt_primary
      start_index = index
      if node_cache[:primary].has_key?(index)
        cached = node_cache[:primary][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_value
      if r1
        r0 = r1
      else
        r2 = _nt_numeric
        if r2
          r0 = r2
        else
          r3 = _nt_reading
          if r3
            r0 = r3
          else
            r4 = _nt_function_call
            if r4
              r0 = r4
            else
              i5, s5 = index, []
              if has_terminal?("(", false, index)
                r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure("(")
                r6 = nil
              end
              s5 << r6
              if r6
                r8 = _nt_space
                if r8
                  r7 = r8
                else
                  r7 = instantiate_node(SyntaxNode,input, index...index)
                end
                s5 << r7
                if r7
                  r9 = _nt_expression
                  s5 << r9
                  if r9
                    r11 = _nt_space
                    if r11
                      r10 = r11
                    else
                      r10 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s5 << r10
                    if r10
                      if has_terminal?(")", false, index)
                        r12 = instantiate_node(SyntaxNode,input, index...(index + 1))
                        @index += 1
                      else
                        terminal_parse_failure(")")
                        r12 = nil
                      end
                      s5 << r12
                    end
                  end
                end
              end
              if s5.last
                r5 = instantiate_node(Expression,input, i5...index, s5)
                r5.extend(Primary0)
              else
                @index = i5
                r5 = nil
              end
              if r5
                r0 = r5
              else
                @index = i0
                r0 = nil
              end
            end
          end
        end
      end

      node_cache[:primary][start_index] = r0

      r0
    end

    def _nt_reading
      start_index = index
      if node_cache[:reading].has_key?(index)
        cached = node_cache[:reading][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_individual_reading
      if r1
        r0 = r1
      else
        r2 = _nt_whole_reading
        if r2
          r0 = r2
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:reading][start_index] = r0

      r0
    end

    module IndividualReading0
      def unit
        elements[1]
      end

    end

    module IndividualReading1
      def actor
        elements[0]
      end

      def indicator
        elements[2]
      end

      def options
        elements[3]
      end
    end

    def _nt_individual_reading
      start_index = index
      if node_cache[:individual_reading].has_key?(index)
        cached = node_cache[:individual_reading][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_actor
      s0 << r1
      if r1
        if has_terminal?("..", false, index)
          r2 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure("..")
          r2 = nil
        end
        s0 << r2
        if r2
          r3 = _nt_indicator
          s0 << r3
          if r3
            i5, s5 = index, []
            if has_terminal?("(", false, index)
              r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("(")
              r6 = nil
            end
            s5 << r6
            if r6
              r7 = _nt_unit
              s5 << r7
              if r7
                if has_terminal?(")", false, index)
                  r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure(")")
                  r8 = nil
                end
                s5 << r8
              end
            end
            if s5.last
              r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
              r5.extend(IndividualReading0)
            else
              @index = i5
              r5 = nil
            end
            if r5
              r4 = r5
            else
              r4 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r4
          end
        end
      end
      if s0.last
        r0 = instantiate_node(IndividualReading,input, i0...index, s0)
        r0.extend(IndividualReading1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:individual_reading][start_index] = r0

      r0
    end

    module WholeReading0
      def unit
        elements[1]
      end

    end

    module WholeReading1
      def actor
        elements[0]
      end

      def indicator
        elements[2]
      end

      def options
        elements[3]
      end
    end

    def _nt_whole_reading
      start_index = index
      if node_cache[:whole_reading].has_key?(index)
        cached = node_cache[:whole_reading][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_actor
      s0 << r1
      if r1
        if has_terminal?(".", false, index)
          r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(".")
          r2 = nil
        end
        s0 << r2
        if r2
          r3 = _nt_indicator
          s0 << r3
          if r3
            i5, s5 = index, []
            if has_terminal?("(", false, index)
              r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("(")
              r6 = nil
            end
            s5 << r6
            if r6
              r7 = _nt_unit
              s5 << r7
              if r7
                if has_terminal?(")", false, index)
                  r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure(")")
                  r8 = nil
                end
                s5 << r8
              end
            end
            if s5.last
              r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
              r5.extend(WholeReading0)
            else
              @index = i5
              r5 = nil
            end
            if r5
              r4 = r5
            else
              r4 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r4
          end
        end
      end
      if s0.last
        r0 = instantiate_node(WholeReading,input, i0...index, s0)
        r0.extend(WholeReading1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:whole_reading][start_index] = r0

      r0
    end

    def _nt_actor
      start_index = index
      if node_cache[:actor].has_key?(index)
        cached = node_cache[:actor][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_self
      if r1
        r0 = r1
      else
        r2 = _nt_variable
        if r2
          r0 = r2
        else
          @index = i0
          r0 = nil
        end
      end

      node_cache[:actor][start_index] = r0

      r0
    end

    module Variable0
    end

    module Variable1
    end

    def _nt_variable
      start_index = index
      if node_cache[:variable].has_key?(index)
        cached = node_cache[:variable][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('\G[a-z]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      s0 << r1
      if r1
        s2, i2 = [], index
        loop do
          if has_terminal?('\G[a-z0-9]', true, index)
            r3 = true
            @index += 1
          else
            r3 = nil
          end
          if r3
            s2 << r3
          else
            break
          end
        end
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        s0 << r2
        if r2
          s4, i4 = [], index
          loop do
            i5, s5 = index, []
            if has_terminal?('_', false, index)
              r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('_')
              r6 = nil
            end
            s5 << r6
            if r6
              s7, i7 = [], index
              loop do
                if has_terminal?('\G[a-z0-9]', true, index)
                  r8 = true
                  @index += 1
                else
                  r8 = nil
                end
                if r8
                  s7 << r8
                else
                  break
                end
              end
              if s7.empty?
                @index = i7
                r7 = nil
              else
                r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
              end
              s5 << r7
            end
            if s5.last
              r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
              r5.extend(Variable0)
            else
              @index = i5
              r5 = nil
            end
            if r5
              s4 << r5
            else
              break
            end
          end
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          s0 << r4
        end
      end
      if s0.last
        r0 = instantiate_node(Variable,input, i0...index, s0)
        r0.extend(Variable1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:variable][start_index] = r0

      r0
    end

    module Indicator0
    end

    module Indicator1
    end

    def _nt_indicator
      start_index = index
      if node_cache[:indicator].has_key?(index)
        cached = node_cache[:indicator][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('\G[a-z]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      s0 << r1
      if r1
        s2, i2 = [], index
        loop do
          if has_terminal?('\G[a-z0-9]', true, index)
            r3 = true
            @index += 1
          else
            r3 = nil
          end
          if r3
            s2 << r3
          else
            break
          end
        end
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        s0 << r2
        if r2
          s4, i4 = [], index
          loop do
            i5, s5 = index, []
            if has_terminal?('_', false, index)
              r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('_')
              r6 = nil
            end
            s5 << r6
            if r6
              s7, i7 = [], index
              loop do
                if has_terminal?('\G[a-z0-9]', true, index)
                  r8 = true
                  @index += 1
                else
                  r8 = nil
                end
                if r8
                  s7 << r8
                else
                  break
                end
              end
              if s7.empty?
                @index = i7
                r7 = nil
              else
                r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
              end
              s5 << r7
            end
            if s5.last
              r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
              r5.extend(Indicator0)
            else
              @index = i5
              r5 = nil
            end
            if r5
              s4 << r5
            else
              break
            end
          end
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          s0 << r4
        end
      end
      if s0.last
        r0 = instantiate_node(Indicator,input, i0...index, s0)
        r0.extend(Indicator1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:indicator][start_index] = r0

      r0
    end

    module Unit0
    end

    module Unit1
    end

    def _nt_unit
      start_index = index
      if node_cache[:unit].has_key?(index)
        cached = node_cache[:unit][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('\G[a-z]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      s0 << r1
      if r1
        s2, i2 = [], index
        loop do
          if has_terminal?('\G[a-z0-9]', true, index)
            r3 = true
            @index += 1
          else
            r3 = nil
          end
          if r3
            s2 << r3
          else
            break
          end
        end
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        s0 << r2
        if r2
          s4, i4 = [], index
          loop do
            i5, s5 = index, []
            if has_terminal?('_', false, index)
              r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('_')
              r6 = nil
            end
            s5 << r6
            if r6
              s7, i7 = [], index
              loop do
                if has_terminal?('\G[a-z0-9]', true, index)
                  r8 = true
                  @index += 1
                else
                  r8 = nil
                end
                if r8
                  s7 << r8
                else
                  break
                end
              end
              if s7.empty?
                @index = i7
                r7 = nil
              else
                r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
              end
              s5 << r7
            end
            if s5.last
              r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
              r5.extend(Unit0)
            else
              @index = i5
              r5 = nil
            end
            if r5
              s4 << r5
            else
              break
            end
          end
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          s0 << r4
        end
      end
      if s0.last
        r0 = instantiate_node(Unit,input, i0...index, s0)
        r0.extend(Unit1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:unit][start_index] = r0

      r0
    end

    module Numeric0
    end

    module Numeric1
    end

    module Numeric2
    end

    def _nt_numeric
      start_index = index
      if node_cache[:numeric].has_key?(index)
        cached = node_cache[:numeric][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      i1 = index
      i2, s2 = index, []
      if has_terminal?('\G[1-9]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      s2 << r3
      if r3
        s4, i4 = [], index
        loop do
          if has_terminal?('\G[0-9]', true, index)
            r5 = true
            @index += 1
          else
            r5 = nil
          end
          if r5
            s4 << r5
          else
            break
          end
        end
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        s2 << r4
      end
      if s2.last
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        r2.extend(Numeric0)
      else
        @index = i2
        r2 = nil
      end
      if r2
        r1 = r2
      else
        if has_terminal?('0', false, index)
          r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('0')
          r6 = nil
        end
        if r6
          r1 = r6
        else
          @index = i1
          r1 = nil
        end
      end
      s0 << r1
      if r1
        i8, s8 = index, []
        if has_terminal?('.', false, index)
          r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('.')
          r9 = nil
        end
        s8 << r9
        if r9
          s10, i10 = [], index
          loop do
            if has_terminal?('\G[0-9]', true, index)
              r11 = true
              @index += 1
            else
              r11 = nil
            end
            if r11
              s10 << r11
            else
              break
            end
          end
          if s10.empty?
            @index = i10
            r10 = nil
          else
            r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
          end
          s8 << r10
        end
        if s8.last
          r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
          r8.extend(Numeric1)
        else
          @index = i8
          r8 = nil
        end
        if r8
          r7 = r8
        else
          r7 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r7
      end
      if s0.last
        r0 = instantiate_node(Numeric,input, i0...index, s0)
        r0.extend(Numeric2)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:numeric][start_index] = r0

      r0
    end

    module FunctionCall0
      def argument
        elements[3]
      end
    end

    module FunctionCall1
      def first_arg
        elements[1]
      end

      def other_args
        elements[2]
      end

    end

    module FunctionCall2
      def function_name
        elements[0]
      end

      def args
        elements[2]
      end

    end

    def _nt_function_call
      start_index = index
      if node_cache[:function_call].has_key?(index)
        cached = node_cache[:function_call][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      r1 = _nt_function_name
      s0 << r1
      if r1
        if has_terminal?("(", false, index)
          r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("(")
          r2 = nil
        end
        s0 << r2
        if r2
          i4, s4 = index, []
          r6 = _nt_space
          if r6
            r5 = r6
          else
            r5 = instantiate_node(SyntaxNode,input, index...index)
          end
          s4 << r5
          if r5
            r7 = _nt_argument
            s4 << r7
            if r7
              s8, i8 = [], index
              loop do
                i9, s9 = index, []
                r11 = _nt_space
                if r11
                  r10 = r11
                else
                  r10 = instantiate_node(SyntaxNode,input, index...index)
                end
                s9 << r10
                if r10
                  if has_terminal?(",", false, index)
                    r12 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure(",")
                    r12 = nil
                  end
                  s9 << r12
                  if r12
                    r14 = _nt_space
                    if r14
                      r13 = r14
                    else
                      r13 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s9 << r13
                    if r13
                      r15 = _nt_argument
                      s9 << r15
                    end
                  end
                end
                if s9.last
                  r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
                  r9.extend(FunctionCall0)
                else
                  @index = i9
                  r9 = nil
                end
                if r9
                  s8 << r9
                else
                  break
                end
              end
              r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
              s4 << r8
              if r8
                r17 = _nt_space
                if r17
                  r16 = r17
                else
                  r16 = instantiate_node(SyntaxNode,input, index...index)
                end
                s4 << r16
              end
            end
          end
          if s4.last
            r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
            r4.extend(FunctionCall1)
          else
            @index = i4
            r4 = nil
          end
          if r4
            r3 = r4
          else
            r3 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r3
          if r3
            if has_terminal?(")", false, index)
              r18 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(")")
              r18 = nil
            end
            s0 << r18
          end
        end
      end
      if s0.last
        r0 = instantiate_node(FunctionCall,input, i0...index, s0)
        r0.extend(FunctionCall2)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:function_call][start_index] = r0

      r0
    end

    module FunctionName0
    end

    module FunctionName1
    end

    def _nt_function_name
      start_index = index
      if node_cache[:function_name].has_key?(index)
        cached = node_cache[:function_name][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0, s0 = index, []
      if has_terminal?('\G[a-z]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      s0 << r1
      if r1
        s2, i2 = [], index
        loop do
          if has_terminal?('\G[a-z0-9]', true, index)
            r3 = true
            @index += 1
          else
            r3 = nil
          end
          if r3
            s2 << r3
          else
            break
          end
        end
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
        s0 << r2
        if r2
          s4, i4 = [], index
          loop do
            i5, s5 = index, []
            if has_terminal?('_', false, index)
              r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('_')
              r6 = nil
            end
            s5 << r6
            if r6
              s7, i7 = [], index
              loop do
                if has_terminal?('\G[a-z0-9]', true, index)
                  r8 = true
                  @index += 1
                else
                  r8 = nil
                end
                if r8
                  s7 << r8
                else
                  break
                end
              end
              if s7.empty?
                @index = i7
                r7 = nil
              else
                r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
              end
              s5 << r7
            end
            if s5.last
              r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
              r5.extend(FunctionName0)
            else
              @index = i5
              r5 = nil
            end
            if r5
              s4 << r5
            else
              break
            end
          end
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          s0 << r4
        end
      end
      if s0.last
        r0 = instantiate_node(FunctionName,input, i0...index, s0)
        r0.extend(FunctionName1)
      else
        @index = i0
        r0 = nil
      end

      node_cache[:function_name][start_index] = r0

      r0
    end

    def _nt_argument
      start_index = index
      if node_cache[:argument].has_key?(index)
        cached = node_cache[:argument][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      i0 = index
      r1 = _nt_value
      if r1
        r0 = r1
      else
        r2 = _nt_numeric
        if r2
          r0 = r2
        else
          r3 = _nt_reading
          if r3
            r0 = r3
          else
            r4 = _nt_function_call
            if r4
              r0 = r4
            else
              r5 = _nt_expression
              if r5
                r0 = r5
              else
                @index = i0
                r0 = nil
              end
            end
          end
        end
      end

      node_cache[:argument][start_index] = r0

      r0
    end

    def _nt_space
      start_index = index
      if node_cache[:space].has_key?(index)
        cached = node_cache[:space][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      s0, i0 = [], index
      loop do
        if has_terminal?('\G[\\s\\n]', true, index)
          r1 = true
          @index += 1
        else
          r1 = nil
        end
        if r1
          s0 << r1
        else
          break
        end
      end
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)

      node_cache[:space][start_index] = r0

      r0
    end

    def _nt_self
      start_index = index
      if node_cache[:self].has_key?(index)
        cached = node_cache[:self][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if has_terminal?("self", false, index)
        r0 = instantiate_node(Self,input, index...(index + 4))
        @index += 4
      else
        terminal_parse_failure("self")
        r0 = nil
      end

      node_cache[:self][start_index] = r0

      r0
    end

    def _nt_value
      start_index = index
      if node_cache[:value].has_key?(index)
        cached = node_cache[:value][index]
        if cached
          cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
          @index = cached.interval.end
        end
        return cached
      end

      if has_terminal?("value", false, index)
        r0 = instantiate_node(Value,input, index...(index + 5))
        @index += 5
      else
        terminal_parse_failure("value")
        r0 = nil
      end

      node_cache[:value][start_index] = r0

      r0
    end

  end

  class HandlerMethodParser < Treetop::Runtime::CompiledParser
    include HandlerMethod
  end

end
