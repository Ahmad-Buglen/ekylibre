module Procedo
  grammar HandlerMethod

    ############################################################################
    # Numerical expression

    rule expression
      conditive / additive / primary
    end

    rule conditive
      test:boolean_expression space? " ? " space? if_true:argument space? " : " space? if_false:(argument / conditive) <Condition>
    end

    rule multitive
        head:primary space? "*" space? operand:multitive <Multiplication>
      / head:primary space? "/" space? operand:multitive <Division>
      / primary
    end

    rule additive
        head:multitive space? "+" space? operand:additive <Addition>
      / head:multitive space? "-" space? operand:additive <Substraction>
      / multitive
    end

    rule primary
      value / numeric / symbol / function_call / reading / "(" space? expression space? ")" <Expression>
    end

    rule argument
      value / numeric / symbol / function_call / reading / expression
    end

    rule access
      actor ":" accessor <Access>
    end

    rule reading
      individual_reading / whole_reading
    end

    rule individual_reading
      actor ".." indicator options:("(" unit ")")? <IndividualReading>
    end

    rule whole_reading
      actor "." indicator options:("(" unit ")")? <WholeReading>
    end

    rule actor
      self / variable
    end

    rule accessor
      # [a-z] [a-z0-9]* ("-" [a-z0-9]+)* <Accessor>
      "contents-count" <Accessor>
    end

    rule variable
      [a-z] [a-z0-9]* ("_" [a-z0-9]+)* <Variable>
    end

    rule indicator
      [a-z] [a-z0-9]* ("_" [a-z0-9]+)* <Indicator>
    end

    rule unit
      [a-z] [a-z0-9]* ("_" [a-z0-9]+)* <Unit>
    end

    rule numeric
      ([1-9] [0-9]* / "0") ("." [0-9]+)? <Numeric>
    end

    rule symbol
      ":" [a-z] [a-z0-9]* ("_" [a-z0-9]+)* <Symbol>
    end

    rule function_argument
      value / numeric / function_call / reading / actor / expression
    end

    rule function_call
      function_name "(" space? args:(first_arg:function_argument other_args:(space? "," space? argument:function_argument)* )?  space? ")" <FunctionCall>
    end

    rule function_name
      [a-z] [a-z0-9]* ("_" [a-z0-9]+)* <FunctionName>
    end

    rule space
      [\s\n]*
    end

    rule self
      "self" <Self>
    end

    rule value
      "value" <Value>
    end

    ############################################################################
    # Boolean expression

    rule boolean_expression
      disjunctive / test
    end

    rule conjonctive
        head:test space? "&"  space? operand:conjonctive <Conjunction>
      / head:test space? "||" space? operand:conjonctive <ExclusiveDisjunction>
      / test
    end

    rule disjunctive
        head:conjonctive space? "|" space? operand:disjunctive <Disjunction>
      / conjonctive
    end

    rule test
      negative / comparative / indicative / active / "(" boolean_expression ")" <BooleanExpression>
    end

    rule comparative
        head:primary space? operator:">"  space? operand:primary <StrictSuperiorityComparison>
      / head:primary space? operator:"<"  space? operand:primary <StrictInferiortyComparison>
      / head:primary space? operator:">=" space? operand:primary <SuperiorityComparison>
      / head:primary space? operator:"<=" space? operand:primary <InferiorityComparison>
      / head:primary space? operator:"==" space? operand:primary <EqualityComparison>
      / head:primary space? operator:"!=" space? operand:primary <DifferenceComparison>
    end

    rule active
      actor "?" <ActorPresenceTest>
    end

    rule indicative
      actor "."  indicator "?" <IndicatorPresenceTest>
    end

    rule negative
      "!" negated_test <NegativeTest>
    end

    rule negated_test
      indicative / active / "(" boolean_expression ")" <BooleanExpression>
    end

  end
end
