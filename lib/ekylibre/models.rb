# Autogenerated from Ekylibre (`rake clean:models` or `rake clean`)
module Ekylibre
  mattr_reader :models, :references, :schema
  # List of all models
  @@models = [:account, :account_balance, :activity, :affair, :analytic_repartition, :animal, :animal_group, :animal_medicine, :area, :asset, :asset_depreciation, :bank_statement, :bioproduct, :building, :building_division, :campaign, :cash, :cash_transfer, :catalog, :catalog_price, :cultivable_land_parcel, :custom_field, :custom_field_choice, :deposit, :deposit_item, :district, :document, :document_archive, :document_template, :easement, :entity, :entity_address, :entity_link, :equipment, :establishment, :event, :event_nature, :event_participation, :financial_year, :fungus, :gap, :immatter, :incident, :incoming_delivery, :incoming_delivery_item, :incoming_delivery_mode, :incoming_payment, :incoming_payment_mode, :intervention, :intervention_cast, :inventory, :inventory_item, :journal, :journal_entry, :journal_entry_item, :land_parcel, :land_parcel_cluster, :land_parcel_group, :legal_entity, :listing, :listing_node, :listing_node_item, :log, :mandate, :matter, :medicine, :mineral_matter, :observation, :operation, :operation_task, :organic_matter, :outgoing_delivery, :outgoing_delivery_item, :outgoing_delivery_mode, :outgoing_payment, :outgoing_payment_mode, :person, :plant, :plant_medicine, :preference, :prescription, :product, :product_group, :product_indicator_datum, :product_link, :product_localization, :product_membership, :product_move, :product_nature, :product_nature_variant, :product_nature_variant_indicator_datum, :product_ownership, :product_process, :product_process_phase, :production, :production_support, :profession, :property_title, :purchase, :purchase_item, :purchase_nature, :role, :sale, :sale_item, :sale_nature, :sequence, :service, :settlement, :sub_zone, :subscription, :subscription_nature, :tax, :tax_declaration, :team, :tracking, :transfer, :transport, :user, :worker, :zone, :zone_property_title]

  # List of all references
  @@references = {
    :account => {
      :creator_id => :user,
      :updater_id => :user
    },
    :account_balance => {
      :account_id => :account,
      :creator_id => :user,
      :financial_year_id => :financial_year,
      :updater_id => :user
    },
    :activity => {
      :creator_id => :user,
      :parent_id => :activity,
      :updater_id => :user
    },
    :affair => {
      :creator_id => :user,
      :journal_entry_id => :journal_entry,
      :third_id => :entity,
      :updater_id => :user
    },
    :analytic_repartition => {
      :creator_id => :user,
      :journal_entry_item_id => :journal_entry_item,
      :production_id => :production,
      :updater_id => :user
    },
    :animal => {
      :address_id => :entity_address,
      :asset_id => :asset,
      :content_nature_id => :product_nature,
      :creator_id => :user,
      :default_storage_id => :product,
      :father_id => :product,
      :mother_id => :product,
      :nature_id => :product_nature,
      :owner_id => :entity,
      :parent_id => :animal,
      :tracking_id => :tracking,
      :updater_id => :user,
      :variant_id => :product_nature_variant
    },
    :animal_group => {
      :address_id => :entity_address,
      :asset_id => :asset,
      :content_nature_id => :product_nature,
      :creator_id => :user,
      :default_storage_id => :product,
      :father_id => :product,
      :mother_id => :product,
      :nature_id => :product_nature,
      :owner_id => :entity,
      :parent_id => :animal_group,
      :tracking_id => :tracking,
      :updater_id => :user,
      :variant_id => :product_nature_variant
    },
    :animal_medicine => {
      :address_id => :entity_address,
      :asset_id => :asset,
      :content_nature_id => :product_nature,
      :creator_id => :user,
      :default_storage_id => :product,
      :father_id => :product,
      :mother_id => :product,
      :nature_id => :product_nature,
      :owner_id => :entity,
      :parent_id => :animal_medicine,
      :tracking_id => :tracking,
      :updater_id => :user,
      :variant_id => :product_nature_variant
    },
    :area => {
      :creator_id => :user,
      :district_id => :district,
      :updater_id => :user
    },
    :asset => {
      :allocation_account_id => :account,
      :charges_account_id => :account,
      :creator_id => :user,
      :journal_id => :journal,
      :purchase_id => :purchase,
      :purchase_item_id => :purchase_item,
      :sale_id => :sale,
      :sale_item_id => :sale_item,
      :updater_id => :user
    },
    :asset_depreciation => {
      :asset_id => :asset,
      :creator_id => :user,
      :financial_year_id => :financial_year,
      :journal_entry_id => :journal_entry,
      :updater_id => :user
    },
    :bank_statement => {
      :cash_id => :cash,
      :creator_id => :user,
      :updater_id => :user
    },
    :bioproduct => {
      :address_id => :entity_address,
      :asset_id => :asset,
      :content_nature_id => :product_nature,
      :creator_id => :user,
      :default_storage_id => :product,
      :father_id => :product,
      :mother_id => :product,
      :nature_id => :product_nature,
      :owner_id => :entity,
      :parent_id => :bioproduct,
      :tracking_id => :tracking,
      :updater_id => :user,
      :variant_id => :product_nature_variant
    },
    :building => {
      :address_id => :entity_address,
      :asset_id => :asset,
      :content_nature_id => :product_nature,
      :creator_id => :user,
      :default_storage_id => :product,
      :father_id => :product,
      :mother_id => :product,
      :nature_id => :product_nature,
      :owner_id => :entity,
      :parent_id => :building,
      :tracking_id => :tracking,
      :updater_id => :user,
      :variant_id => :product_nature_variant
    },
    :building_division => {
      :address_id => :entity_address,
      :asset_id => :asset,
      :content_nature_id => :product_nature,
      :creator_id => :user,
      :default_storage_id => :product,
      :father_id => :product,
      :mother_id => :product,
      :nature_id => :product_nature,
      :owner_id => :entity,
      :parent_id => :building_division,
      :tracking_id => :tracking,
      :updater_id => :user,
      :variant_id => :product_nature_variant
    },
    :campaign => {
      :creator_id => :user,
      :updater_id => :user
    },
    :cash => {
      :account_id => :account,
      :creator_id => :user,
      :journal_id => :journal,
      :updater_id => :user
    },
    :cash_transfer => {
      :creator_id => :user,
      :emission_cash_id => :cash,
      :emission_journal_entry_id => :journal_entry,
      :reception_cash_id => :cash,
      :reception_journal_entry_id => :journal_entry,
      :updater_id => :user
    },
    :catalog => {
      :creator_id => :user,
      :updater_id => :user
    },
    :catalog_price => {
      :catalog_id => :catalog,
      :creator_id => :user,
      :reference_tax_id => :tax,
      :updater_id => :user,
      :variant_id => :product_nature_variant
    },
    :cultivable_land_parcel => {
      :address_id => :entity_address,
      :asset_id => :asset,
      :content_nature_id => :product_nature,
      :creator_id => :user,
      :default_storage_id => :product,
      :father_id => :product,
      :mother_id => :product,
      :nature_id => :product_nature,
      :owner_id => :entity,
      :parent_id => :cultivable_land_parcel,
      :tracking_id => :tracking,
      :updater_id => :user,
      :variant_id => :product_nature_variant
    },
    :custom_field => {
      :creator_id => :user,
      :updater_id => :user
    },
    :custom_field_choice => {
      :creator_id => :user,
      :custom_field_id => :custom_field,
      :updater_id => :user
    },
    :deposit => {
      :cash_id => :cash,
      :creator_id => :user,
      :journal_entry_id => :journal_entry,
      :mode_id => :incoming_payment_mode,
      :responsible_id => :person,
      :updater_id => :user
    },
    :deposit_item => {
      :creator_id => :user,
      :deposit_id => :deposit,
      :updater_id => :user
    },
    :district => {
      :creator_id => :user,
      :updater_id => :user
    },
    :document => {
      :creator_id => :user,
      :updater_id => :user
    },
    :document_archive => {
      :creator_id => :user,
      :document_id => :document,
      :template_id => :template,
      :updater_id => :user
    },
    :document_template => {
      :creator_id => :user,
      :updater_id => :user
    },
    :easement => {
      :address_id => :entity_address,
      :asset_id => :asset,
      :content_nature_id => :product_nature,
      :creator_id => :user,
      :default_storage_id => :product,
      :father_id => :product,
      :mother_id => :product,
      :nature_id => :product_nature,
      :owner_id => :entity,
      :parent_id => :easement,
      :tracking_id => :tracking,
      :updater_id => :user,
      :variant_id => :product_nature_variant
    },
    :entity => {
      :client_account_id => :account,
      :creator_id => :user,
      :proposer_id => :person,
      :responsible_id => :person,
      :supplier_account_id => :account,
      :updater_id => :user
    },
    :entity_address => {
      :creator_id => :user,
      :entity_id => :entity,
      :mail_area_id => :area,
      :updater_id => :user
    },
    :entity_link => {
      :creator_id => :user,
      :entity_1_id => :entity,
      :entity_2_id => :entity,
      :updater_id => :user
    },
    :equipment => {
      :address_id => :entity_address,
      :asset_id => :asset,
      :content_nature_id => :product_nature,
      :creator_id => :user,
      :default_storage_id => :product,
      :father_id => :product,
      :mother_id => :product,
      :nature_id => :product_nature,
      :owner_id => :entity,
      :parent_id => :equipment,
      :tracking_id => :tracking,
      :updater_id => :user,
      :variant_id => :product_nature_variant
    },
    :establishment => {
      :creator_id => :user,
      :updater_id => :user
    },
    :event => {
      :creator_id => :user,
      :nature_id => :event_nature,
      :updater_id => :user
    },
    :event_nature => {
      :creator_id => :user,
      :updater_id => :user
    },
    :event_participation => {
      :creator_id => :user,
      :event_id => :event,
      :participant_id => :entity,
      :updater_id => :user
    },
    :financial_year => {
      :creator_id => :user,
      :last_journal_entry_id => :journal_entry,
      :updater_id => :user
    },
    :fungus => {
      :address_id => :entity_address,
      :asset_id => :asset,
      :content_nature_id => :product_nature,
      :creator_id => :user,
      :default_storage_id => :product,
      :father_id => :product,
      :mother_id => :product,
      :nature_id => :product_nature,
      :owner_id => :entity,
      :parent_id => :fungus,
      :tracking_id => :tracking,
      :updater_id => :user,
      :variant_id => :product_nature_variant
    },
    :gap => {
      :affair_id => :affair,
      :creator_id => :user,
      :entity_id => :entity,
      :journal_entry_id => :journal_entry,
      :updater_id => :user
    },
    :immatter => {
      :address_id => :entity_address,
      :asset_id => :asset,
      :content_nature_id => :product_nature,
      :creator_id => :user,
      :default_storage_id => :product,
      :father_id => :product,
      :mother_id => :product,
      :nature_id => :product_nature,
      :owner_id => :entity,
      :parent_id => :immatter,
      :tracking_id => :tracking,
      :updater_id => :user,
      :variant_id => :product_nature_variant
    },
    :incident => {
      :creator_id => :user,
      :target_id => "target_type",
      :updater_id => :user
    },
    :incoming_delivery => {
      :address_id => :entity_address,
      :creator_id => :user,
      :mode_id => :incoming_delivery_mode,
      :purchase_id => :purchase,
      :sender_id => :entity,
      :updater_id => :user
    },
    :incoming_delivery_item => {
      :container_id => :product,
      :creator_id => :user,
      :delivery_id => :incoming_delivery,
      :product_id => :product,
      :purchase_item_id => :purchase_item,
      :updater_id => :user
    },
    :incoming_delivery_mode => {
      :creator_id => :user,
      :updater_id => :user
    },
    :incoming_payment => {
      :affair_id => :affair,
      :commission_account_id => :account,
      :creator_id => :user,
      :deposit_id => :deposit,
      :journal_entry_id => :journal_entry,
      :mode_id => :incoming_payment_mode,
      :payer_id => :entity,
      :responsible_id => :person,
      :updater_id => :user
    },
    :incoming_payment_mode => {
      :attorney_journal_id => :journal,
      :cash_id => :cash,
      :commission_account_id => :account,
      :creator_id => :user,
      :depositables_account_id => :account,
      :depositables_journal_id => :journal,
      :updater_id => :user
    },
    :intervention => {
      :creator_id => :user,
      :incident_id => :incident,
      :prescription_id => :prescription,
      :production_id => :production,
      :production_support_id => :production_support,
      :provisional_intervention_id => :intervention,
      :updater_id => :user
    },
    :intervention_cast => {
      :actor_id => :product,
      :creator_id => :user,
      :intervention_id => :intervention,
      :updater_id => :user
    },
    :inventory => {
      :creator_id => :user,
      :journal_entry_id => :journal_entry,
      :responsible_id => :person,
      :updater_id => :user
    },
    :inventory_item => {
      :creator_id => :user,
      :inventory_id => :inventory,
      :move_id => :product_move,
      :product_id => :product,
      :tracking_id => :tracking,
      :updater_id => :user,
      :warehouse_id => :warehouse
    },
    :journal => {
      :creator_id => :user,
      :updater_id => :user
    },
    :journal_entry => {
      :creator_id => :user,
      :financial_year_id => :financial_year,
      :journal_id => :journal,
      :resource_id => "resource_type",
      :updater_id => :user
    },
    :journal_entry_item => {
      :account_id => :account,
      :bank_statement_id => :bank_statement,
      :creator_id => :user,
      :entry_id => :journal_entry,
      :financial_year_id => :financial_year,
      :journal_id => :journal,
      :updater_id => :user
    },
    :land_parcel => {
      :address_id => :entity_address,
      :asset_id => :asset,
      :content_nature_id => :product_nature,
      :creator_id => :user,
      :default_storage_id => :product,
      :father_id => :product,
      :mother_id => :product,
      :nature_id => :product_nature,
      :owner_id => :entity,
      :parent_id => :land_parcel,
      :tracking_id => :tracking,
      :updater_id => :user,
      :variant_id => :product_nature_variant
    },
    :land_parcel_cluster => {
      :address_id => :address,
      :asset_id => :asset,
      :content_nature_id => :product_nature,
      :creator_id => :user,
      :default_storage_id => :product,
      :father_id => :product,
      :mother_id => :product,
      :nature_id => :product_nature,
      :owner_id => :entity,
      :parent_id => :land_parcel_cluster,
      :tracking_id => :tracking,
      :updater_id => :user,
      :variant_id => :product_nature_variant
    },
    :land_parcel_group => {
      :address_id => :entity_address,
      :asset_id => :asset,
      :content_nature_id => :product_nature,
      :creator_id => :user,
      :default_storage_id => :product,
      :father_id => :product,
      :mother_id => :product,
      :nature_id => :product_nature,
      :owner_id => :entity,
      :parent_id => :land_parcel_group,
      :tracking_id => :tracking,
      :updater_id => :user,
      :variant_id => :product_nature_variant
    },
    :legal_entity => {
      :client_account_id => :account,
      :creator_id => :user,
      :proposer_id => :person,
      :responsible_id => :person,
      :supplier_account_id => :account,
      :updater_id => :user
    },
    :listing => {
      :creator_id => :user,
      :updater_id => :user
    },
    :listing_node => {
      :creator_id => :user,
      :item_listing_id => :listing,
      :item_listing_node_id => :listing_node,
      :listing_id => :listing,
      :parent_id => :listing_node,
      :updater_id => :user
    },
    :listing_node_item => {
      :creator_id => :user,
      :node_id => :listing_node,
      :updater_id => :user
    },
    :log => {
      :creator_id => :user,
      :origin_id => "origin_type",
      :owner_id => "owner_type",
      :updater_id => :user
    },
    :mandate => {
      :creator_id => :user,
      :entity_id => :entity,
      :updater_id => :user
    },
    :matter => {
      :address_id => :entity_address,
      :asset_id => :asset,
      :content_nature_id => :product_nature,
      :creator_id => :user,
      :default_storage_id => :product,
      :father_id => :product,
      :mother_id => :product,
      :nature_id => :product_nature,
      :owner_id => :entity,
      :parent_id => :matter,
      :tracking_id => :tracking,
      :updater_id => :user,
      :variant_id => :product_nature_variant
    },
    :medicine => {
      :address_id => :entity_address,
      :asset_id => :asset,
      :content_nature_id => :product_nature,
      :creator_id => :user,
      :default_storage_id => :product,
      :father_id => :product,
      :mother_id => :product,
      :nature_id => :product_nature,
      :owner_id => :entity,
      :parent_id => :medicine,
      :tracking_id => :tracking,
      :updater_id => :user,
      :variant_id => :product_nature_variant
    },
    :mineral_matter => {
      :address_id => :entity_address,
      :asset_id => :asset,
      :content_nature_id => :product_nature,
      :creator_id => :user,
      :default_storage_id => :product,
      :father_id => :product,
      :mother_id => :product,
      :nature_id => :product_nature,
      :owner_id => :entity,
      :parent_id => :mineral_matter,
      :tracking_id => :tracking,
      :updater_id => :user,
      :variant_id => :product_nature_variant
    },
    :observation => {
      :author_id => :user,
      :creator_id => :user,
      :subject_id => "subject_type",
      :updater_id => :user
    },
    :operation => {
      :creator_id => :user,
      :intervention_id => :intervention,
      :updater_id => :user
    },
    :operation_task => {
      :creator_id => :user,
      :indicator_datum_id => :product_indicator_datum,
      :operand_id => :product,
      :operation_id => :operation,
      :parent_id => :operation_task,
      :subject_id => :product,
      :updater_id => :user
    },
    :organic_matter => {
      :address_id => :entity_address,
      :asset_id => :asset,
      :content_nature_id => :product_nature,
      :creator_id => :user,
      :default_storage_id => :product,
      :father_id => :product,
      :mother_id => :product,
      :nature_id => :product_nature,
      :owner_id => :entity,
      :parent_id => :organic_matter,
      :tracking_id => :tracking,
      :updater_id => :user,
      :variant_id => :product_nature_variant
    },
    :outgoing_delivery => {
      :address_id => :entity_address,
      :creator_id => :user,
      :mode_id => :outgoing_delivery_mode,
      :recipient_id => :entity,
      :sale_id => :sale,
      :transport_id => :transport,
      :transporter_id => :entity,
      :updater_id => :user
    },
    :outgoing_delivery_item => {
      :creator_id => :user,
      :delivery_id => :outgoing_delivery,
      :product_id => :product,
      :sale_item_id => :sale_item,
      :updater_id => :user
    },
    :outgoing_delivery_mode => {
      :creator_id => :user,
      :updater_id => :user
    },
    :outgoing_payment => {
      :affair_id => :affair,
      :cash_id => :cash,
      :creator_id => :user,
      :journal_entry_id => :journal_entry,
      :mode_id => :outgoing_payment_mode,
      :payee_id => :entity,
      :responsible_id => :person,
      :updater_id => :user
    },
    :outgoing_payment_mode => {
      :attorney_journal_id => :journal,
      :cash_id => :cash,
      :creator_id => :user,
      :updater_id => :user
    },
    :person => {
      :client_account_id => :account,
      :creator_id => :user,
      :proposer_id => :person,
      :responsible_id => :person,
      :supplier_account_id => :account,
      :updater_id => :user
    },
    :plant => {
      :address_id => :entity_address,
      :asset_id => :asset,
      :content_nature_id => :product_nature,
      :creator_id => :user,
      :default_storage_id => :product,
      :father_id => :product,
      :mother_id => :product,
      :nature_id => :product_nature,
      :owner_id => :entity,
      :parent_id => :plant,
      :tracking_id => :tracking,
      :updater_id => :user,
      :variant_id => :product_nature_variant
    },
    :plant_medicine => {
      :address_id => :entity_address,
      :asset_id => :asset,
      :content_nature_id => :product_nature,
      :creator_id => :user,
      :default_storage_id => :product,
      :father_id => :product,
      :mother_id => :product,
      :nature_id => :product_nature,
      :owner_id => :entity,
      :parent_id => :plant_medicine,
      :tracking_id => :tracking,
      :updater_id => :user,
      :variant_id => :product_nature_variant
    },
    :preference => {
      :creator_id => :user,
      :record_value_id => "record_value_type",
      :updater_id => :user,
      :user_id => :user
    },
    :prescription => {
      :creator_id => :user,
      :document_id => :document,
      :prescriptor_id => :entity,
      :updater_id => :user
    },
    :product => {
      :address_id => :entity_address,
      :asset_id => :asset,
      :content_nature_id => :product_nature,
      :creator_id => :user,
      :default_storage_id => :product,
      :father_id => :product,
      :mother_id => :product,
      :nature_id => :product_nature,
      :owner_id => :entity,
      :parent_id => :product,
      :tracking_id => :tracking,
      :updater_id => :user,
      :variant_id => :product_nature_variant
    },
    :product_group => {
      :address_id => :entity_address,
      :asset_id => :asset,
      :content_nature_id => :product_nature,
      :creator_id => :user,
      :default_storage_id => :product,
      :father_id => :product,
      :mother_id => :product,
      :nature_id => :product_nature,
      :owner_id => :entity,
      :parent_id => :product_group,
      :tracking_id => :tracking,
      :updater_id => :user,
      :variant_id => :product_nature_variant
    },
    :product_indicator_datum => {
      :creator_id => :user,
      :product_id => :product,
      :updater_id => :user
    },
    :product_link => {
      :carried_id => :product,
      :carrier_id => :product,
      :creator_id => :user,
      :operation_task_id => :operation_task,
      :updater_id => :user
    },
    :product_localization => {
      :container_id => :product,
      :creator_id => :user,
      :operation_task_id => :operation_task,
      :product_id => :product,
      :updater_id => :user
    },
    :product_membership => {
      :creator_id => :user,
      :group_id => :product_group,
      :member_id => :product,
      :operation_task_id => :operation_task,
      :updater_id => :user
    },
    :product_move => {
      :creator_id => :user,
      :product_id => :product,
      :updater_id => :user
    },
    :product_nature => {
      :asset_account_id => :account,
      :charge_account_id => :account,
      :creator_id => :user,
      :product_account_id => :account,
      :stock_account_id => :account,
      :subscription_nature_id => :subscription_nature,
      :updater_id => :user
    },
    :product_nature_variant => {
      :creator_id => :user,
      :nature_id => :product_nature,
      :updater_id => :user
    },
    :product_nature_variant_indicator_datum => {
      :creator_id => :user,
      :updater_id => :user,
      :variant_id => :product_nature_variant
    },
    :product_ownership => {
      :creator_id => :user,
      :owner_id => :entity,
      :product_id => :product,
      :updater_id => :user
    },
    :product_process => {
      :creator_id => :user,
      :updater_id => :user
    },
    :product_process_phase => {
      :creator_id => :user,
      :process_id => :product_process,
      :updater_id => :user
    },
    :production => {
      :activity_id => :activity,
      :campaign_id => :campaign,
      :creator_id => :user,
      :product_nature_id => :product_nature,
      :updater_id => :user
    },
    :production_support => {
      :creator_id => :user,
      :production_id => :production,
      :storage_id => :product,
      :updater_id => :user
    },
    :profession => {
      :creator_id => :user,
      :updater_id => :user
    },
    :property_title => {
      :address_id => :entity_address,
      :asset_id => :asset,
      :content_nature_id => :product_nature,
      :creator_id => :user,
      :default_storage_id => :product,
      :father_id => :product,
      :mother_id => :product,
      :nature_id => :product_nature,
      :owner_id => :entity,
      :parent_id => :property_title,
      :tracking_id => :tracking,
      :updater_id => :user,
      :variant_id => :product_nature_variant
    },
    :purchase => {
      :affair_id => :affair,
      :creator_id => :user,
      :delivery_address_id => :entity_address,
      :journal_entry_id => :journal_entry,
      :nature_id => :purchase_nature,
      :responsible_id => :person,
      :supplier_id => :entity,
      :updater_id => :user
    },
    :purchase_item => {
      :account_id => :account,
      :creator_id => :user,
      :purchase_id => :purchase,
      :tax_id => :tax,
      :updater_id => :user,
      :variant_id => :product_nature_variant
    },
    :purchase_nature => {
      :creator_id => :user,
      :journal_id => :journal,
      :updater_id => :user
    },
    :role => {
      :creator_id => :user,
      :updater_id => :user
    },
    :sale => {
      :address_id => :entity_address,
      :affair_id => :affair,
      :client_id => :entity,
      :creator_id => :user,
      :delivery_address_id => :entity_address,
      :invoice_address_id => :entity_address,
      :journal_entry_id => :journal_entry,
      :nature_id => :sale_nature,
      :origin_id => :sale,
      :responsible_id => :person,
      :transporter_id => :entity,
      :updater_id => :user
    },
    :sale_item => {
      :account_id => :account,
      :creator_id => :user,
      :credited_item_id => :sale_item,
      :price_id => :product_price,
      :reduced_item_id => :sale_item,
      :sale_id => :sale,
      :tax_id => :tax,
      :updater_id => :user,
      :variant_id => :product_nature_variant
    },
    :sale_nature => {
      :catalog_id => :catalog,
      :creator_id => :user,
      :journal_id => :journal,
      :payment_mode_id => :incoming_payment_mode,
      :updater_id => :user
    },
    :sequence => {
      :creator_id => :user,
      :updater_id => :user
    },
    :service => {
      :address_id => :entity_address,
      :asset_id => :asset,
      :content_nature_id => :product_nature,
      :creator_id => :user,
      :default_storage_id => :product,
      :father_id => :product,
      :mother_id => :product,
      :nature_id => :product_nature,
      :owner_id => :entity,
      :parent_id => :service,
      :tracking_id => :tracking,
      :updater_id => :user,
      :variant_id => :product_nature_variant
    },
    :settlement => {
      :address_id => :entity_address,
      :asset_id => :asset,
      :content_nature_id => :product_nature,
      :creator_id => :user,
      :default_storage_id => :product,
      :father_id => :product,
      :mother_id => :product,
      :nature_id => :product_nature,
      :owner_id => :entity,
      :parent_id => :settlement,
      :tracking_id => :tracking,
      :updater_id => :user,
      :variant_id => :product_nature_variant
    },
    :sub_zone => {
      :address_id => :entity_address,
      :asset_id => :asset,
      :content_nature_id => :product_nature,
      :creator_id => :user,
      :default_storage_id => :product,
      :father_id => :product,
      :mother_id => :product,
      :nature_id => :product_nature,
      :owner_id => :entity,
      :parent_id => :sub_zone,
      :tracking_id => :tracking,
      :updater_id => :user,
      :variant_id => :product_nature_variant
    },
    :subscription => {
      :address_id => :entity_address,
      :creator_id => :user,
      :nature_id => :subscription_nature,
      :product_nature_id => :product_nature,
      :sale_id => :sale,
      :sale_item_id => :sale_item,
      :subscriber_id => :entity,
      :updater_id => :user
    },
    :subscription_nature => {
      :creator_id => :user,
      :updater_id => :user
    },
    :tax => {
      :collect_account_id => :account,
      :creator_id => :user,
      :deduction_account_id => :account,
      :updater_id => :user
    },
    :tax_declaration => {
      :creator_id => :user,
      :financial_year_id => :financial_year,
      :journal_entry_id => :journal_entry,
      :updater_id => :user
    },
    :team => {
      :creator_id => :user,
      :parent_id => :team,
      :updater_id => :user
    },
    :tracking => {
      :creator_id => :user,
      :producer_id => :entity,
      :product_id => :product,
      :updater_id => :user
    },
    :transfer => {
      :affair_id => :affair,
      :client_id => :entity,
      :creator_id => :user,
      :journal_entry_id => :journal_entry,
      :updater_id => :user
    },
    :transport => {
      :creator_id => :user,
      :purchase_id => :purchase,
      :responsible_id => :person,
      :transporter_id => :entity,
      :updater_id => :user
    },
    :user => {
      :creator_id => :user,
      :department_id => :department,
      :establishment_id => :establishment,
      :person_id => :person,
      :profession_id => :profession,
      :role_id => :role,
      :updater_id => :user
    },
    :worker => {
      :address_id => :entity_address,
      :asset_id => :asset,
      :content_nature_id => :product_nature,
      :creator_id => :user,
      :default_storage_id => :product,
      :father_id => :product,
      :mother_id => :product,
      :nature_id => :product_nature,
      :owner_id => :entity,
      :parent_id => :worker,
      :tracking_id => :tracking,
      :updater_id => :user,
      :variant_id => :product_nature_variant
    },
    :zone => {
      :address_id => :entity_address,
      :asset_id => :asset,
      :content_nature_id => :product_nature,
      :creator_id => :user,
      :default_storage_id => :product,
      :father_id => :product,
      :mother_id => :product,
      :nature_id => :product_nature,
      :owner_id => :entity,
      :parent_id => :zone,
      :tracking_id => :tracking,
      :updater_id => :user,
      :variant_id => :product_nature_variant
    },
    :zone_property_title => {
      :address_id => :entity_address,
      :asset_id => :asset,
      :content_nature_id => :product_nature,
      :creator_id => :user,
      :default_storage_id => :product,
      :father_id => :product,
      :mother_id => :product,
      :nature_id => :product_nature,
      :owner_id => :entity,
      :parent_id => :zone_property_title,
      :tracking_id => :tracking,
      :updater_id => :user,
      :variant_id => :product_nature_variant
    }
  }

  # Schema
  SCHEMA = HashWithIndifferentAccess.new(
    account_balances: HashWithIndifferentAccess.new(
      account_id: Ekylibre::Record::Column.new(:account_id, :integer, null: false).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      financial_year_id: Ekylibre::Record::Column.new(:financial_year_id, :integer, null: false).freeze,
      global_balance: Ekylibre::Record::Column.new(:global_balance, :decimal, precision: 19, scale: 4, null: false, default: 0.0).freeze,
      global_count: Ekylibre::Record::Column.new(:global_count, :integer, null: false, default: 0).freeze,
      global_credit: Ekylibre::Record::Column.new(:global_credit, :decimal, precision: 19, scale: 4, null: false, default: 0.0).freeze,
      global_debit: Ekylibre::Record::Column.new(:global_debit, :decimal, precision: 19, scale: 4, null: false, default: 0.0).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      local_balance: Ekylibre::Record::Column.new(:local_balance, :decimal, precision: 19, scale: 4, null: false, default: 0.0).freeze,
      local_count: Ekylibre::Record::Column.new(:local_count, :integer, null: false, default: 0).freeze,
      local_credit: Ekylibre::Record::Column.new(:local_credit, :decimal, precision: 19, scale: 4, null: false, default: 0.0).freeze,
      local_debit: Ekylibre::Record::Column.new(:local_debit, :decimal, precision: 19, scale: 4, null: false, default: 0.0).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    accounts: HashWithIndifferentAccess.new(
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      debtor: Ekylibre::Record::Column.new(:debtor, :boolean, null: false).freeze,
      description: Ekylibre::Record::Column.new(:description, :text).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      label: Ekylibre::Record::Column.new(:label, :string, null: false).freeze,
      last_letter: Ekylibre::Record::Column.new(:last_letter, :string, limit: 10).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      name: Ekylibre::Record::Column.new(:name, :string, limit: 200, null: false).freeze,
      number: Ekylibre::Record::Column.new(:number, :string, limit: 20, null: false).freeze,
      reconcilable: Ekylibre::Record::Column.new(:reconcilable, :boolean, null: false).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze,
      usages: Ekylibre::Record::Column.new(:usages, :text).freeze
    ).freeze,
    activities: HashWithIndifferentAccess.new(
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      depth: Ekylibre::Record::Column.new(:depth, :integer).freeze,
      description: Ekylibre::Record::Column.new(:description, :string).freeze,
      family: Ekylibre::Record::Column.new(:family, :string).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      lft: Ekylibre::Record::Column.new(:lft, :integer).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      name: Ekylibre::Record::Column.new(:name, :string, null: false).freeze,
      nature: Ekylibre::Record::Column.new(:nature, :string, null: false).freeze,
      parent_id: Ekylibre::Record::Column.new(:parent_id, :integer).freeze,
      rgt: Ekylibre::Record::Column.new(:rgt, :integer).freeze,
      started_at: Ekylibre::Record::Column.new(:started_at, :datetime).freeze,
      stopped_at: Ekylibre::Record::Column.new(:stopped_at, :datetime).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    affairs: HashWithIndifferentAccess.new(
      accounted_at: Ekylibre::Record::Column.new(:accounted_at, :datetime).freeze,
      closed: Ekylibre::Record::Column.new(:closed, :boolean, null: false).freeze,
      closed_at: Ekylibre::Record::Column.new(:closed_at, :datetime).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      credit: Ekylibre::Record::Column.new(:credit, :decimal, precision: 19, scale: 4, null: false, default: 0.0).freeze,
      currency: Ekylibre::Record::Column.new(:currency, :string, limit: 3, null: false).freeze,
      debit: Ekylibre::Record::Column.new(:debit, :decimal, precision: 19, scale: 4, null: false, default: 0.0).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      journal_entry_id: Ekylibre::Record::Column.new(:journal_entry_id, :integer).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      third_id: Ekylibre::Record::Column.new(:third_id, :integer, null: false).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    analytic_repartitions: HashWithIndifferentAccess.new(
      affectation_percentage: Ekylibre::Record::Column.new(:affectation_percentage, :decimal, precision: 19, scale: 4, null: false).freeze,
      affected_on: Ekylibre::Record::Column.new(:affected_on, :date, null: false).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      journal_entry_item_id: Ekylibre::Record::Column.new(:journal_entry_item_id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      production_id: Ekylibre::Record::Column.new(:production_id, :integer, null: false).freeze,
      state: Ekylibre::Record::Column.new(:state, :string, null: false).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    areas: HashWithIndifferentAccess.new(
      city: Ekylibre::Record::Column.new(:city, :string).freeze,
      city_name: Ekylibre::Record::Column.new(:city_name, :string).freeze,
      code: Ekylibre::Record::Column.new(:code, :string).freeze,
      country: Ekylibre::Record::Column.new(:country, :string, limit: 2, null: false).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      district_id: Ekylibre::Record::Column.new(:district_id, :integer).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      name: Ekylibre::Record::Column.new(:name, :string, null: false).freeze,
      postcode: Ekylibre::Record::Column.new(:postcode, :string, null: false).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    asset_depreciations: HashWithIndifferentAccess.new(
      accountable: Ekylibre::Record::Column.new(:accountable, :boolean, null: false).freeze,
      accounted_at: Ekylibre::Record::Column.new(:accounted_at, :datetime).freeze,
      amount: Ekylibre::Record::Column.new(:amount, :decimal, precision: 19, scale: 4, null: false).freeze,
      asset_amount: Ekylibre::Record::Column.new(:asset_amount, :decimal, precision: 19, scale: 4).freeze,
      asset_id: Ekylibre::Record::Column.new(:asset_id, :integer, null: false).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      created_on: Ekylibre::Record::Column.new(:created_on, :date, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      depreciated_amount: Ekylibre::Record::Column.new(:depreciated_amount, :decimal, precision: 19, scale: 4).freeze,
      financial_year_id: Ekylibre::Record::Column.new(:financial_year_id, :integer).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      journal_entry_id: Ekylibre::Record::Column.new(:journal_entry_id, :integer).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      locked: Ekylibre::Record::Column.new(:locked, :boolean, null: false).freeze,
      position: Ekylibre::Record::Column.new(:position, :integer).freeze,
      started_on: Ekylibre::Record::Column.new(:started_on, :date, null: false).freeze,
      stopped_on: Ekylibre::Record::Column.new(:stopped_on, :date, null: false).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    assets: HashWithIndifferentAccess.new(
      allocation_account_id: Ekylibre::Record::Column.new(:allocation_account_id, :integer, null: false).freeze,
      ceded: Ekylibre::Record::Column.new(:ceded, :boolean).freeze,
      ceded_on: Ekylibre::Record::Column.new(:ceded_on, :date).freeze,
      charges_account_id: Ekylibre::Record::Column.new(:charges_account_id, :integer).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      currency: Ekylibre::Record::Column.new(:currency, :string, limit: 3).freeze,
      current_amount: Ekylibre::Record::Column.new(:current_amount, :decimal, precision: 19, scale: 4).freeze,
      depreciable_amount: Ekylibre::Record::Column.new(:depreciable_amount, :decimal, precision: 19, scale: 4, null: false).freeze,
      depreciated_amount: Ekylibre::Record::Column.new(:depreciated_amount, :decimal, precision: 19, scale: 4, null: false).freeze,
      depreciation_method: Ekylibre::Record::Column.new(:depreciation_method, :string, null: false).freeze,
      depreciation_percentage: Ekylibre::Record::Column.new(:depreciation_percentage, :decimal, precision: 19, scale: 4).freeze,
      description: Ekylibre::Record::Column.new(:description, :text).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      journal_id: Ekylibre::Record::Column.new(:journal_id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      name: Ekylibre::Record::Column.new(:name, :string, null: false).freeze,
      number: Ekylibre::Record::Column.new(:number, :string, null: false).freeze,
      purchase_amount: Ekylibre::Record::Column.new(:purchase_amount, :decimal, precision: 19, scale: 4).freeze,
      purchase_id: Ekylibre::Record::Column.new(:purchase_id, :integer).freeze,
      purchase_item_id: Ekylibre::Record::Column.new(:purchase_item_id, :integer).freeze,
      purchased_on: Ekylibre::Record::Column.new(:purchased_on, :date).freeze,
      sale_id: Ekylibre::Record::Column.new(:sale_id, :integer).freeze,
      sale_item_id: Ekylibre::Record::Column.new(:sale_item_id, :integer).freeze,
      started_on: Ekylibre::Record::Column.new(:started_on, :date, null: false).freeze,
      stopped_on: Ekylibre::Record::Column.new(:stopped_on, :date, null: false).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    bank_statements: HashWithIndifferentAccess.new(
      cash_id: Ekylibre::Record::Column.new(:cash_id, :integer, null: false).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      credit: Ekylibre::Record::Column.new(:credit, :decimal, precision: 19, scale: 4, null: false, default: 0.0).freeze,
      debit: Ekylibre::Record::Column.new(:debit, :decimal, precision: 19, scale: 4, null: false, default: 0.0).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      number: Ekylibre::Record::Column.new(:number, :string, null: false).freeze,
      started_on: Ekylibre::Record::Column.new(:started_on, :date, null: false).freeze,
      stopped_on: Ekylibre::Record::Column.new(:stopped_on, :date, null: false).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    campaigns: HashWithIndifferentAccess.new(
      closed: Ekylibre::Record::Column.new(:closed, :boolean, null: false).freeze,
      closed_at: Ekylibre::Record::Column.new(:closed_at, :datetime).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      description: Ekylibre::Record::Column.new(:description, :string).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      name: Ekylibre::Record::Column.new(:name, :string, null: false).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    cash_transfers: HashWithIndifferentAccess.new(
      accounted_at: Ekylibre::Record::Column.new(:accounted_at, :datetime).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      currency_rate: Ekylibre::Record::Column.new(:currency_rate, :decimal, precision: 19, scale: 10, null: false, default: 1.0).freeze,
      description: Ekylibre::Record::Column.new(:description, :text).freeze,
      emission_amount: Ekylibre::Record::Column.new(:emission_amount, :decimal, precision: 19, scale: 4, null: false, default: 0.0).freeze,
      emission_cash_id: Ekylibre::Record::Column.new(:emission_cash_id, :integer, null: false).freeze,
      emission_currency: Ekylibre::Record::Column.new(:emission_currency, :string, limit: 3, null: false).freeze,
      emission_journal_entry_id: Ekylibre::Record::Column.new(:emission_journal_entry_id, :integer).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      number: Ekylibre::Record::Column.new(:number, :string, null: false).freeze,
      reception_amount: Ekylibre::Record::Column.new(:reception_amount, :decimal, precision: 19, scale: 4, null: false, default: 0.0).freeze,
      reception_cash_id: Ekylibre::Record::Column.new(:reception_cash_id, :integer, null: false).freeze,
      reception_currency: Ekylibre::Record::Column.new(:reception_currency, :string, limit: 3, null: false).freeze,
      reception_journal_entry_id: Ekylibre::Record::Column.new(:reception_journal_entry_id, :integer).freeze,
      transfered_on: Ekylibre::Record::Column.new(:transfered_on, :date).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    cashes: HashWithIndifferentAccess.new(
      account_id: Ekylibre::Record::Column.new(:account_id, :integer, null: false).freeze,
      bank_account_key: Ekylibre::Record::Column.new(:bank_account_key, :string).freeze,
      bank_account_number: Ekylibre::Record::Column.new(:bank_account_number, :string).freeze,
      bank_agency_address: Ekylibre::Record::Column.new(:bank_agency_address, :text).freeze,
      bank_agency_code: Ekylibre::Record::Column.new(:bank_agency_code, :string).freeze,
      bank_code: Ekylibre::Record::Column.new(:bank_code, :string).freeze,
      bank_identifier_code: Ekylibre::Record::Column.new(:bank_identifier_code, :string, limit: 11).freeze,
      bank_name: Ekylibre::Record::Column.new(:bank_name, :string, limit: 50).freeze,
      country: Ekylibre::Record::Column.new(:country, :string, limit: 2).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      currency: Ekylibre::Record::Column.new(:currency, :string, limit: 3).freeze,
      iban: Ekylibre::Record::Column.new(:iban, :string, limit: 34).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      journal_id: Ekylibre::Record::Column.new(:journal_id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      mode: Ekylibre::Record::Column.new(:mode, :string, null: false, default: "iban").freeze,
      name: Ekylibre::Record::Column.new(:name, :string, null: false).freeze,
      nature: Ekylibre::Record::Column.new(:nature, :string, limit: 20, null: false, default: "bank_account").freeze,
      spaced_iban: Ekylibre::Record::Column.new(:spaced_iban, :string, limit: 42).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    catalog_prices: HashWithIndifferentAccess.new(
      all_taxes_included: Ekylibre::Record::Column.new(:all_taxes_included, :boolean, null: false).freeze,
      amount: Ekylibre::Record::Column.new(:amount, :decimal, precision: 19, scale: 4, null: false).freeze,
      catalog_id: Ekylibre::Record::Column.new(:catalog_id, :integer, null: false).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      currency: Ekylibre::Record::Column.new(:currency, :string, limit: 3, null: false).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      indicator: Ekylibre::Record::Column.new(:indicator, :string, limit: 120, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      reference_tax_id: Ekylibre::Record::Column.new(:reference_tax_id, :integer).freeze,
      started_at: Ekylibre::Record::Column.new(:started_at, :datetime).freeze,
      stopped_at: Ekylibre::Record::Column.new(:stopped_at, :datetime).freeze,
      thread: Ekylibre::Record::Column.new(:thread, :string, limit: 20).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze,
      variant_id: Ekylibre::Record::Column.new(:variant_id, :integer, null: false).freeze
    ).freeze,
    catalogs: HashWithIndifferentAccess.new(
      all_taxes_included: Ekylibre::Record::Column.new(:all_taxes_included, :boolean, null: false).freeze,
      by_default: Ekylibre::Record::Column.new(:by_default, :boolean, null: false).freeze,
      code: Ekylibre::Record::Column.new(:code, :string, limit: 20, null: false).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      currency: Ekylibre::Record::Column.new(:currency, :string, limit: 3, null: false).freeze,
      description: Ekylibre::Record::Column.new(:description, :text).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      name: Ekylibre::Record::Column.new(:name, :string, null: false).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze,
      usage: Ekylibre::Record::Column.new(:usage, :string, limit: 20, null: false).freeze
    ).freeze,
    custom_field_choices: HashWithIndifferentAccess.new(
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      custom_field_id: Ekylibre::Record::Column.new(:custom_field_id, :integer, null: false).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      name: Ekylibre::Record::Column.new(:name, :string, null: false).freeze,
      position: Ekylibre::Record::Column.new(:position, :integer).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze,
      value: Ekylibre::Record::Column.new(:value, :string).freeze
    ).freeze,
    custom_fields: HashWithIndifferentAccess.new(
      active: Ekylibre::Record::Column.new(:active, :boolean, null: false, default: true).freeze,
      column_name: Ekylibre::Record::Column.new(:column_name, :string).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      customized_type: Ekylibre::Record::Column.new(:customized_type, :string, null: false).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      maximal_length: Ekylibre::Record::Column.new(:maximal_length, :integer).freeze,
      maximal_value: Ekylibre::Record::Column.new(:maximal_value, :decimal, precision: 19, scale: 4).freeze,
      minimal_length: Ekylibre::Record::Column.new(:minimal_length, :integer).freeze,
      minimal_value: Ekylibre::Record::Column.new(:minimal_value, :decimal, precision: 19, scale: 4).freeze,
      name: Ekylibre::Record::Column.new(:name, :string, null: false).freeze,
      nature: Ekylibre::Record::Column.new(:nature, :string, limit: 20, null: false).freeze,
      position: Ekylibre::Record::Column.new(:position, :integer).freeze,
      required: Ekylibre::Record::Column.new(:required, :boolean, null: false).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    deposit_items: HashWithIndifferentAccess.new(
      amount: Ekylibre::Record::Column.new(:amount, :decimal, precision: 19, scale: 4, null: false, default: 1.0).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      currency: Ekylibre::Record::Column.new(:currency, :string, limit: 3, null: false).freeze,
      deposit_id: Ekylibre::Record::Column.new(:deposit_id, :integer, null: false).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      quantity: Ekylibre::Record::Column.new(:quantity, :decimal, precision: 19, scale: 4, null: false, default: 0.0).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    deposits: HashWithIndifferentAccess.new(
      accounted_at: Ekylibre::Record::Column.new(:accounted_at, :datetime).freeze,
      amount: Ekylibre::Record::Column.new(:amount, :decimal, precision: 19, scale: 4, null: false, default: 0.0).freeze,
      cash_id: Ekylibre::Record::Column.new(:cash_id, :integer, null: false).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      created_on: Ekylibre::Record::Column.new(:created_on, :date, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      description: Ekylibre::Record::Column.new(:description, :text).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      in_cash: Ekylibre::Record::Column.new(:in_cash, :boolean, null: false).freeze,
      journal_entry_id: Ekylibre::Record::Column.new(:journal_entry_id, :integer).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      locked: Ekylibre::Record::Column.new(:locked, :boolean, null: false).freeze,
      mode_id: Ekylibre::Record::Column.new(:mode_id, :integer, null: false).freeze,
      number: Ekylibre::Record::Column.new(:number, :string).freeze,
      payments_count: Ekylibre::Record::Column.new(:payments_count, :integer, null: false, default: 0).freeze,
      responsible_id: Ekylibre::Record::Column.new(:responsible_id, :integer).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    districts: HashWithIndifferentAccess.new(
      code: Ekylibre::Record::Column.new(:code, :string).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      name: Ekylibre::Record::Column.new(:name, :string, null: false).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    document_archives: HashWithIndifferentAccess.new(
      archived_at: Ekylibre::Record::Column.new(:archived_at, :datetime, null: false).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      document_id: Ekylibre::Record::Column.new(:document_id, :integer, null: false).freeze,
      file_content_text: Ekylibre::Record::Column.new(:file_content_text, :text).freeze,
      file_content_type: Ekylibre::Record::Column.new(:file_content_type, :string).freeze,
      file_file_name: Ekylibre::Record::Column.new(:file_file_name, :string).freeze,
      file_file_size: Ekylibre::Record::Column.new(:file_file_size, :integer).freeze,
      file_fingerprint: Ekylibre::Record::Column.new(:file_fingerprint, :string).freeze,
      file_pages_count: Ekylibre::Record::Column.new(:file_pages_count, :integer).freeze,
      file_updated_at: Ekylibre::Record::Column.new(:file_updated_at, :datetime).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      template_id: Ekylibre::Record::Column.new(:template_id, :integer).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    document_templates: HashWithIndifferentAccess.new(
      active: Ekylibre::Record::Column.new(:active, :boolean, null: false).freeze,
      archiving: Ekylibre::Record::Column.new(:archiving, :string, limit: 60, null: false).freeze,
      by_default: Ekylibre::Record::Column.new(:by_default, :boolean, null: false).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      formats: Ekylibre::Record::Column.new(:formats, :string).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      language: Ekylibre::Record::Column.new(:language, :string, limit: 3, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      managed: Ekylibre::Record::Column.new(:managed, :boolean, null: false).freeze,
      name: Ekylibre::Record::Column.new(:name, :string, null: false).freeze,
      nature: Ekylibre::Record::Column.new(:nature, :string, limit: 60, null: false).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    documents: HashWithIndifferentAccess.new(
      archives_count: Ekylibre::Record::Column.new(:archives_count, :integer, null: false, default: 0).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      key: Ekylibre::Record::Column.new(:key, :string, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      name: Ekylibre::Record::Column.new(:name, :string, null: false).freeze,
      nature: Ekylibre::Record::Column.new(:nature, :string, limit: 120, null: false).freeze,
      number: Ekylibre::Record::Column.new(:number, :string, limit: 60, null: false).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    entities: HashWithIndifferentAccess.new(
      active: Ekylibre::Record::Column.new(:active, :boolean, null: false, default: true).freeze,
      activity_code: Ekylibre::Record::Column.new(:activity_code, :string, limit: 30).freeze,
      authorized_payments_count: Ekylibre::Record::Column.new(:authorized_payments_count, :integer).freeze,
      born_on: Ekylibre::Record::Column.new(:born_on, :date).freeze,
      client: Ekylibre::Record::Column.new(:client, :boolean, null: false).freeze,
      client_account_id: Ekylibre::Record::Column.new(:client_account_id, :integer).freeze,
      country: Ekylibre::Record::Column.new(:country, :string, limit: 2).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      currency: Ekylibre::Record::Column.new(:currency, :string, null: false).freeze,
      dead_on: Ekylibre::Record::Column.new(:dead_on, :date).freeze,
      deliveries_conditions: Ekylibre::Record::Column.new(:deliveries_conditions, :string, limit: 60).freeze,
      description: Ekylibre::Record::Column.new(:description, :text).freeze,
      first_met_on: Ekylibre::Record::Column.new(:first_met_on, :date).freeze,
      first_name: Ekylibre::Record::Column.new(:first_name, :string).freeze,
      full_name: Ekylibre::Record::Column.new(:full_name, :string, null: false).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      invoices_count: Ekylibre::Record::Column.new(:invoices_count, :integer).freeze,
      language: Ekylibre::Record::Column.new(:language, :string, limit: 3, null: false).freeze,
      last_name: Ekylibre::Record::Column.new(:last_name, :string, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      locked: Ekylibre::Record::Column.new(:locked, :boolean, null: false).freeze,
      nature: Ekylibre::Record::Column.new(:nature, :string, null: false).freeze,
      number: Ekylibre::Record::Column.new(:number, :string, limit: 60).freeze,
      of_company: Ekylibre::Record::Column.new(:of_company, :boolean, null: false).freeze,
      origin: Ekylibre::Record::Column.new(:origin, :string).freeze,
      picture_content_type: Ekylibre::Record::Column.new(:picture_content_type, :string).freeze,
      picture_file_name: Ekylibre::Record::Column.new(:picture_file_name, :string).freeze,
      picture_file_size: Ekylibre::Record::Column.new(:picture_file_size, :integer).freeze,
      picture_updated_at: Ekylibre::Record::Column.new(:picture_updated_at, :datetime).freeze,
      proposer_id: Ekylibre::Record::Column.new(:proposer_id, :integer).freeze,
      prospect: Ekylibre::Record::Column.new(:prospect, :boolean, null: false).freeze,
      reminder_submissive: Ekylibre::Record::Column.new(:reminder_submissive, :boolean, null: false).freeze,
      responsible_id: Ekylibre::Record::Column.new(:responsible_id, :integer).freeze,
      siren: Ekylibre::Record::Column.new(:siren, :string, limit: 9).freeze,
      supplier: Ekylibre::Record::Column.new(:supplier, :boolean, null: false).freeze,
      supplier_account_id: Ekylibre::Record::Column.new(:supplier_account_id, :integer).freeze,
      transporter: Ekylibre::Record::Column.new(:transporter, :boolean, null: false).freeze,
      type: Ekylibre::Record::Column.new(:type, :string).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze,
      vat_number: Ekylibre::Record::Column.new(:vat_number, :string, limit: 20).freeze,
      vat_subjected: Ekylibre::Record::Column.new(:vat_subjected, :boolean, null: false, default: true).freeze
    ).freeze,
    entity_addresses: HashWithIndifferentAccess.new(
      by_default: Ekylibre::Record::Column.new(:by_default, :boolean, null: false).freeze,
      canal: Ekylibre::Record::Column.new(:canal, :string, limit: 20, null: false).freeze,
      coordinate: Ekylibre::Record::Column.new(:coordinate, :string, limit: 500, null: false).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      deleted_at: Ekylibre::Record::Column.new(:deleted_at, :datetime).freeze,
      entity_id: Ekylibre::Record::Column.new(:entity_id, :integer, null: false).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      mail_area_id: Ekylibre::Record::Column.new(:mail_area_id, :integer).freeze,
      mail_auto_update: Ekylibre::Record::Column.new(:mail_auto_update, :boolean, null: false).freeze,
      mail_country: Ekylibre::Record::Column.new(:mail_country, :string, limit: 2).freeze,
      mail_geolocation: Ekylibre::Record::Column.new(:mail_geolocation, :spatial).freeze,
      mail_line_1: Ekylibre::Record::Column.new(:mail_line_1, :string).freeze,
      mail_line_2: Ekylibre::Record::Column.new(:mail_line_2, :string).freeze,
      mail_line_3: Ekylibre::Record::Column.new(:mail_line_3, :string).freeze,
      mail_line_4: Ekylibre::Record::Column.new(:mail_line_4, :string).freeze,
      mail_line_5: Ekylibre::Record::Column.new(:mail_line_5, :string).freeze,
      mail_line_6: Ekylibre::Record::Column.new(:mail_line_6, :string).freeze,
      name: Ekylibre::Record::Column.new(:name, :string).freeze,
      thread: Ekylibre::Record::Column.new(:thread, :string, limit: 10).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    entity_links: HashWithIndifferentAccess.new(
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      description: Ekylibre::Record::Column.new(:description, :text).freeze,
      entity_1_id: Ekylibre::Record::Column.new(:entity_1_id, :integer, null: false).freeze,
      entity_2_id: Ekylibre::Record::Column.new(:entity_2_id, :integer, null: false).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      nature: Ekylibre::Record::Column.new(:nature, :string, null: false).freeze,
      started_at: Ekylibre::Record::Column.new(:started_at, :datetime).freeze,
      stopped_at: Ekylibre::Record::Column.new(:stopped_at, :datetime).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    establishments: HashWithIndifferentAccess.new(
      code: Ekylibre::Record::Column.new(:code, :string).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      description: Ekylibre::Record::Column.new(:description, :text).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      name: Ekylibre::Record::Column.new(:name, :string, null: false).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    event_natures: HashWithIndifferentAccess.new(
      active: Ekylibre::Record::Column.new(:active, :boolean, null: false, default: true).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      name: Ekylibre::Record::Column.new(:name, :string, null: false).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze,
      usage: Ekylibre::Record::Column.new(:usage, :string, limit: 60).freeze
    ).freeze,
    event_participations: HashWithIndifferentAccess.new(
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      event_id: Ekylibre::Record::Column.new(:event_id, :integer, null: false).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      participant_id: Ekylibre::Record::Column.new(:participant_id, :integer, null: false).freeze,
      state: Ekylibre::Record::Column.new(:state, :string).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    events: HashWithIndifferentAccess.new(
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      description: Ekylibre::Record::Column.new(:description, :text).freeze,
      duration: Ekylibre::Record::Column.new(:duration, :integer).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      name: Ekylibre::Record::Column.new(:name, :string, null: false).freeze,
      nature_id: Ekylibre::Record::Column.new(:nature_id, :integer, null: false).freeze,
      place: Ekylibre::Record::Column.new(:place, :string).freeze,
      started_at: Ekylibre::Record::Column.new(:started_at, :datetime, null: false).freeze,
      stopped_at: Ekylibre::Record::Column.new(:stopped_at, :datetime).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    financial_years: HashWithIndifferentAccess.new(
      closed: Ekylibre::Record::Column.new(:closed, :boolean, null: false).freeze,
      code: Ekylibre::Record::Column.new(:code, :string, limit: 20, null: false).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      currency: Ekylibre::Record::Column.new(:currency, :string, limit: 3).freeze,
      currency_precision: Ekylibre::Record::Column.new(:currency_precision, :integer).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      last_journal_entry_id: Ekylibre::Record::Column.new(:last_journal_entry_id, :integer).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      started_on: Ekylibre::Record::Column.new(:started_on, :date, null: false).freeze,
      stopped_on: Ekylibre::Record::Column.new(:stopped_on, :date, null: false).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    gaps: HashWithIndifferentAccess.new(
      accounted_at: Ekylibre::Record::Column.new(:accounted_at, :datetime).freeze,
      affair_id: Ekylibre::Record::Column.new(:affair_id, :integer, null: false).freeze,
      amount: Ekylibre::Record::Column.new(:amount, :decimal, precision: 19, scale: 4, null: false, default: 0.0).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      currency: Ekylibre::Record::Column.new(:currency, :string, limit: 3, null: false).freeze,
      direction: Ekylibre::Record::Column.new(:direction, :string, null: false).freeze,
      entity_id: Ekylibre::Record::Column.new(:entity_id, :integer, null: false).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      journal_entry_id: Ekylibre::Record::Column.new(:journal_entry_id, :integer).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      number: Ekylibre::Record::Column.new(:number, :string, null: false).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    incidents: HashWithIndifferentAccess.new(
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      description: Ekylibre::Record::Column.new(:description, :text).freeze,
      gravity: Ekylibre::Record::Column.new(:gravity, :integer).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      name: Ekylibre::Record::Column.new(:name, :string, null: false).freeze,
      nature: Ekylibre::Record::Column.new(:nature, :string, null: false).freeze,
      observed_at: Ekylibre::Record::Column.new(:observed_at, :datetime, null: false).freeze,
      priority: Ekylibre::Record::Column.new(:priority, :integer).freeze,
      state: Ekylibre::Record::Column.new(:state, :string).freeze,
      target_id: Ekylibre::Record::Column.new(:target_id, :integer, null: false).freeze,
      target_type: Ekylibre::Record::Column.new(:target_type, :string, null: false).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    incoming_deliveries: HashWithIndifferentAccess.new(
      address_id: Ekylibre::Record::Column.new(:address_id, :integer).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      mode_id: Ekylibre::Record::Column.new(:mode_id, :integer).freeze,
      number: Ekylibre::Record::Column.new(:number, :string, null: false).freeze,
      purchase_id: Ekylibre::Record::Column.new(:purchase_id, :integer).freeze,
      received_at: Ekylibre::Record::Column.new(:received_at, :datetime).freeze,
      reference_number: Ekylibre::Record::Column.new(:reference_number, :string).freeze,
      sender_id: Ekylibre::Record::Column.new(:sender_id, :integer, null: false).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    incoming_delivery_items: HashWithIndifferentAccess.new(
      container_id: Ekylibre::Record::Column.new(:container_id, :integer).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      delivery_id: Ekylibre::Record::Column.new(:delivery_id, :integer, null: false).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      product_id: Ekylibre::Record::Column.new(:product_id, :integer, null: false).freeze,
      purchase_item_id: Ekylibre::Record::Column.new(:purchase_item_id, :integer).freeze,
      quantity: Ekylibre::Record::Column.new(:quantity, :decimal, precision: 19, scale: 4, null: false, default: 1.0).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    incoming_delivery_modes: HashWithIndifferentAccess.new(
      code: Ekylibre::Record::Column.new(:code, :string, limit: 30, null: false).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      description: Ekylibre::Record::Column.new(:description, :text).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      name: Ekylibre::Record::Column.new(:name, :string, null: false).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    incoming_payment_modes: HashWithIndifferentAccess.new(
      active: Ekylibre::Record::Column.new(:active, :boolean).freeze,
      attorney_journal_id: Ekylibre::Record::Column.new(:attorney_journal_id, :integer).freeze,
      cash_id: Ekylibre::Record::Column.new(:cash_id, :integer).freeze,
      commission_account_id: Ekylibre::Record::Column.new(:commission_account_id, :integer).freeze,
      commission_base_amount: Ekylibre::Record::Column.new(:commission_base_amount, :decimal, precision: 19, scale: 4, null: false, default: 0.0).freeze,
      commission_percentage: Ekylibre::Record::Column.new(:commission_percentage, :decimal, precision: 19, scale: 4, null: false, default: 0.0).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      depositables_account_id: Ekylibre::Record::Column.new(:depositables_account_id, :integer).freeze,
      depositables_journal_id: Ekylibre::Record::Column.new(:depositables_journal_id, :integer).freeze,
      detail_payments: Ekylibre::Record::Column.new(:detail_payments, :boolean, null: false).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      name: Ekylibre::Record::Column.new(:name, :string, limit: 50, null: false).freeze,
      position: Ekylibre::Record::Column.new(:position, :integer).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze,
      with_accounting: Ekylibre::Record::Column.new(:with_accounting, :boolean, null: false).freeze,
      with_commission: Ekylibre::Record::Column.new(:with_commission, :boolean, null: false).freeze,
      with_deposit: Ekylibre::Record::Column.new(:with_deposit, :boolean, null: false).freeze
    ).freeze,
    incoming_payments: HashWithIndifferentAccess.new(
      accounted_at: Ekylibre::Record::Column.new(:accounted_at, :datetime).freeze,
      affair_id: Ekylibre::Record::Column.new(:affair_id, :integer).freeze,
      amount: Ekylibre::Record::Column.new(:amount, :decimal, precision: 19, scale: 4, null: false).freeze,
      bank_account_number: Ekylibre::Record::Column.new(:bank_account_number, :string).freeze,
      bank_check_number: Ekylibre::Record::Column.new(:bank_check_number, :string).freeze,
      bank_name: Ekylibre::Record::Column.new(:bank_name, :string).freeze,
      commission_account_id: Ekylibre::Record::Column.new(:commission_account_id, :integer).freeze,
      commission_amount: Ekylibre::Record::Column.new(:commission_amount, :decimal, precision: 19, scale: 4, null: false, default: 0.0).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      created_on: Ekylibre::Record::Column.new(:created_on, :date).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      currency: Ekylibre::Record::Column.new(:currency, :string, limit: 3, null: false).freeze,
      deposit_id: Ekylibre::Record::Column.new(:deposit_id, :integer).freeze,
      downpayment: Ekylibre::Record::Column.new(:downpayment, :boolean, null: false, default: true).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      journal_entry_id: Ekylibre::Record::Column.new(:journal_entry_id, :integer).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      mode_id: Ekylibre::Record::Column.new(:mode_id, :integer, null: false).freeze,
      number: Ekylibre::Record::Column.new(:number, :string).freeze,
      paid_on: Ekylibre::Record::Column.new(:paid_on, :date).freeze,
      payer_id: Ekylibre::Record::Column.new(:payer_id, :integer).freeze,
      receipt: Ekylibre::Record::Column.new(:receipt, :text).freeze,
      received: Ekylibre::Record::Column.new(:received, :boolean, null: false, default: true).freeze,
      responsible_id: Ekylibre::Record::Column.new(:responsible_id, :integer).freeze,
      scheduled: Ekylibre::Record::Column.new(:scheduled, :boolean, null: false).freeze,
      to_bank_on: Ekylibre::Record::Column.new(:to_bank_on, :date, null: false, default: 0001-01-01).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    intervention_casts: HashWithIndifferentAccess.new(
      actor_id: Ekylibre::Record::Column.new(:actor_id, :integer).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      intervention_id: Ekylibre::Record::Column.new(:intervention_id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      quantity: Ekylibre::Record::Column.new(:quantity, :decimal, precision: 19, scale: 4).freeze,
      roles: Ekylibre::Record::Column.new(:roles, :string, limit: 320).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze,
      variable: Ekylibre::Record::Column.new(:variable, :string, null: false).freeze
    ).freeze,
    interventions: HashWithIndifferentAccess.new(
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      incident_id: Ekylibre::Record::Column.new(:incident_id, :integer).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      natures: Ekylibre::Record::Column.new(:natures, :string, null: false).freeze,
      prescription_id: Ekylibre::Record::Column.new(:prescription_id, :integer).freeze,
      procedure: Ekylibre::Record::Column.new(:procedure, :string, null: false).freeze,
      production_id: Ekylibre::Record::Column.new(:production_id, :integer, null: false).freeze,
      production_support_id: Ekylibre::Record::Column.new(:production_support_id, :integer).freeze,
      provisional: Ekylibre::Record::Column.new(:provisional, :boolean, null: false).freeze,
      provisional_intervention_id: Ekylibre::Record::Column.new(:provisional_intervention_id, :integer).freeze,
      started_at: Ekylibre::Record::Column.new(:started_at, :datetime).freeze,
      state: Ekylibre::Record::Column.new(:state, :string, null: false).freeze,
      stopped_at: Ekylibre::Record::Column.new(:stopped_at, :datetime).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    inventories: HashWithIndifferentAccess.new(
      accounted_at: Ekylibre::Record::Column.new(:accounted_at, :datetime).freeze,
      changes_reflected: Ekylibre::Record::Column.new(:changes_reflected, :boolean, null: false).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      created_on: Ekylibre::Record::Column.new(:created_on, :date, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      description: Ekylibre::Record::Column.new(:description, :text).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      journal_entry_id: Ekylibre::Record::Column.new(:journal_entry_id, :integer).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      moved_on: Ekylibre::Record::Column.new(:moved_on, :date).freeze,
      number: Ekylibre::Record::Column.new(:number, :string, limit: 20).freeze,
      responsible_id: Ekylibre::Record::Column.new(:responsible_id, :integer).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    inventory_items: HashWithIndifferentAccess.new(
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      inventory_id: Ekylibre::Record::Column.new(:inventory_id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      move_id: Ekylibre::Record::Column.new(:move_id, :integer).freeze,
      product_id: Ekylibre::Record::Column.new(:product_id, :integer, null: false).freeze,
      quantity: Ekylibre::Record::Column.new(:quantity, :decimal, precision: 19, scale: 4, null: false).freeze,
      theoric_quantity: Ekylibre::Record::Column.new(:theoric_quantity, :decimal, precision: 19, scale: 4, null: false).freeze,
      tracking_id: Ekylibre::Record::Column.new(:tracking_id, :integer).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze,
      warehouse_id: Ekylibre::Record::Column.new(:warehouse_id, :integer, null: false).freeze
    ).freeze,
    journal_entries: HashWithIndifferentAccess.new(
      absolute_credit: Ekylibre::Record::Column.new(:absolute_credit, :decimal, precision: 19, scale: 4, null: false, default: 0.0).freeze,
      absolute_currency: Ekylibre::Record::Column.new(:absolute_currency, :string, limit: 3).freeze,
      absolute_debit: Ekylibre::Record::Column.new(:absolute_debit, :decimal, precision: 19, scale: 4, null: false, default: 0.0).freeze,
      balance: Ekylibre::Record::Column.new(:balance, :decimal, precision: 19, scale: 4, null: false, default: 0.0).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      created_on: Ekylibre::Record::Column.new(:created_on, :date, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      credit: Ekylibre::Record::Column.new(:credit, :decimal, precision: 19, scale: 4, null: false, default: 0.0).freeze,
      currency: Ekylibre::Record::Column.new(:currency, :string, limit: 3).freeze,
      debit: Ekylibre::Record::Column.new(:debit, :decimal, precision: 19, scale: 4, null: false, default: 0.0).freeze,
      financial_year_id: Ekylibre::Record::Column.new(:financial_year_id, :integer).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      journal_id: Ekylibre::Record::Column.new(:journal_id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      number: Ekylibre::Record::Column.new(:number, :string, null: false).freeze,
      printed_on: Ekylibre::Record::Column.new(:printed_on, :date, null: false).freeze,
      real_credit: Ekylibre::Record::Column.new(:real_credit, :decimal, precision: 19, scale: 4, null: false, default: 0.0).freeze,
      real_currency: Ekylibre::Record::Column.new(:real_currency, :string, limit: 3).freeze,
      real_currency_rate: Ekylibre::Record::Column.new(:real_currency_rate, :decimal, precision: 19, scale: 10, null: false, default: 0.0).freeze,
      real_debit: Ekylibre::Record::Column.new(:real_debit, :decimal, precision: 19, scale: 4, null: false, default: 0.0).freeze,
      resource_id: Ekylibre::Record::Column.new(:resource_id, :integer).freeze,
      resource_type: Ekylibre::Record::Column.new(:resource_type, :string).freeze,
      state: Ekylibre::Record::Column.new(:state, :string, limit: 30, null: false).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    journal_entry_items: HashWithIndifferentAccess.new(
      absolute_credit: Ekylibre::Record::Column.new(:absolute_credit, :decimal, precision: 19, scale: 4, null: false, default: 0.0).freeze,
      absolute_currency: Ekylibre::Record::Column.new(:absolute_currency, :string, limit: 3, null: false).freeze,
      absolute_debit: Ekylibre::Record::Column.new(:absolute_debit, :decimal, precision: 19, scale: 4, null: false, default: 0.0).freeze,
      account_id: Ekylibre::Record::Column.new(:account_id, :integer, null: false).freeze,
      balance: Ekylibre::Record::Column.new(:balance, :decimal, precision: 19, scale: 4, null: false, default: 0.0).freeze,
      bank_statement_id: Ekylibre::Record::Column.new(:bank_statement_id, :integer).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      credit: Ekylibre::Record::Column.new(:credit, :decimal, precision: 19, scale: 4, null: false, default: 0.0).freeze,
      cumulated_absolute_credit: Ekylibre::Record::Column.new(:cumulated_absolute_credit, :decimal, precision: 19, scale: 4, null: false, default: 0.0).freeze,
      cumulated_absolute_debit: Ekylibre::Record::Column.new(:cumulated_absolute_debit, :decimal, precision: 19, scale: 4, null: false, default: 0.0).freeze,
      currency: Ekylibre::Record::Column.new(:currency, :string, limit: 3, null: false).freeze,
      debit: Ekylibre::Record::Column.new(:debit, :decimal, precision: 19, scale: 4, null: false, default: 0.0).freeze,
      description: Ekylibre::Record::Column.new(:description, :text).freeze,
      entry_id: Ekylibre::Record::Column.new(:entry_id, :integer, null: false).freeze,
      entry_number: Ekylibre::Record::Column.new(:entry_number, :string, null: false).freeze,
      financial_year_id: Ekylibre::Record::Column.new(:financial_year_id, :integer, null: false).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      journal_id: Ekylibre::Record::Column.new(:journal_id, :integer, null: false).freeze,
      letter: Ekylibre::Record::Column.new(:letter, :string, limit: 10).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      name: Ekylibre::Record::Column.new(:name, :string, null: false).freeze,
      position: Ekylibre::Record::Column.new(:position, :integer).freeze,
      printed_on: Ekylibre::Record::Column.new(:printed_on, :date, null: false).freeze,
      real_credit: Ekylibre::Record::Column.new(:real_credit, :decimal, precision: 19, scale: 4, null: false, default: 0.0).freeze,
      real_currency: Ekylibre::Record::Column.new(:real_currency, :string, limit: 3, null: false).freeze,
      real_currency_rate: Ekylibre::Record::Column.new(:real_currency_rate, :decimal, precision: 19, scale: 10, null: false, default: 0.0).freeze,
      real_debit: Ekylibre::Record::Column.new(:real_debit, :decimal, precision: 19, scale: 4, null: false, default: 0.0).freeze,
      state: Ekylibre::Record::Column.new(:state, :string, limit: 30, null: false).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    journals: HashWithIndifferentAccess.new(
      closed_on: Ekylibre::Record::Column.new(:closed_on, :date, null: false).freeze,
      code: Ekylibre::Record::Column.new(:code, :string, limit: 4, null: false).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      currency: Ekylibre::Record::Column.new(:currency, :string, limit: 3).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      name: Ekylibre::Record::Column.new(:name, :string, null: false).freeze,
      nature: Ekylibre::Record::Column.new(:nature, :string, limit: 30, null: false).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    listing_node_items: HashWithIndifferentAccess.new(
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      nature: Ekylibre::Record::Column.new(:nature, :string, limit: 10, null: false).freeze,
      node_id: Ekylibre::Record::Column.new(:node_id, :integer, null: false).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze,
      value: Ekylibre::Record::Column.new(:value, :text).freeze
    ).freeze,
    listing_nodes: HashWithIndifferentAccess.new(
      attribute_name: Ekylibre::Record::Column.new(:attribute_name, :string).freeze,
      condition_operator: Ekylibre::Record::Column.new(:condition_operator, :string).freeze,
      condition_value: Ekylibre::Record::Column.new(:condition_value, :string).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      depth: Ekylibre::Record::Column.new(:depth, :integer, null: false, default: 0).freeze,
      exportable: Ekylibre::Record::Column.new(:exportable, :boolean, null: false, default: true).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      item_listing_id: Ekylibre::Record::Column.new(:item_listing_id, :integer).freeze,
      item_listing_node_id: Ekylibre::Record::Column.new(:item_listing_node_id, :integer).freeze,
      item_nature: Ekylibre::Record::Column.new(:item_nature, :string, limit: 10).freeze,
      item_value: Ekylibre::Record::Column.new(:item_value, :text).freeze,
      key: Ekylibre::Record::Column.new(:key, :string).freeze,
      label: Ekylibre::Record::Column.new(:label, :string, null: false).freeze,
      lft: Ekylibre::Record::Column.new(:lft, :integer).freeze,
      listing_id: Ekylibre::Record::Column.new(:listing_id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      name: Ekylibre::Record::Column.new(:name, :string, null: false).freeze,
      nature: Ekylibre::Record::Column.new(:nature, :string, null: false).freeze,
      parent_id: Ekylibre::Record::Column.new(:parent_id, :integer).freeze,
      position: Ekylibre::Record::Column.new(:position, :integer).freeze,
      rgt: Ekylibre::Record::Column.new(:rgt, :integer).freeze,
      sql_type: Ekylibre::Record::Column.new(:sql_type, :string).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    listings: HashWithIndifferentAccess.new(
      conditions: Ekylibre::Record::Column.new(:conditions, :text).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      description: Ekylibre::Record::Column.new(:description, :text).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      mail: Ekylibre::Record::Column.new(:mail, :text).freeze,
      name: Ekylibre::Record::Column.new(:name, :string, null: false).freeze,
      query: Ekylibre::Record::Column.new(:query, :text).freeze,
      root_model: Ekylibre::Record::Column.new(:root_model, :string, null: false).freeze,
      source: Ekylibre::Record::Column.new(:source, :text).freeze,
      story: Ekylibre::Record::Column.new(:story, :text).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    logs: HashWithIndifferentAccess.new(
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      description: Ekylibre::Record::Column.new(:description, :text).freeze,
      event: Ekylibre::Record::Column.new(:event, :string, null: false).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      observed_at: Ekylibre::Record::Column.new(:observed_at, :datetime, null: false).freeze,
      origin_id: Ekylibre::Record::Column.new(:origin_id, :integer).freeze,
      origin_object: Ekylibre::Record::Column.new(:origin_object, :text).freeze,
      origin_type: Ekylibre::Record::Column.new(:origin_type, :string).freeze,
      owner_id: Ekylibre::Record::Column.new(:owner_id, :integer, null: false).freeze,
      owner_object: Ekylibre::Record::Column.new(:owner_object, :text).freeze,
      owner_type: Ekylibre::Record::Column.new(:owner_type, :string, null: false).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    mandates: HashWithIndifferentAccess.new(
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      entity_id: Ekylibre::Record::Column.new(:entity_id, :integer, null: false).freeze,
      family: Ekylibre::Record::Column.new(:family, :string, null: false).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      organization: Ekylibre::Record::Column.new(:organization, :string, null: false).freeze,
      started_on: Ekylibre::Record::Column.new(:started_on, :date).freeze,
      stopped_on: Ekylibre::Record::Column.new(:stopped_on, :date).freeze,
      title: Ekylibre::Record::Column.new(:title, :string, null: false).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    observations: HashWithIndifferentAccess.new(
      author_id: Ekylibre::Record::Column.new(:author_id, :integer, null: false).freeze,
      content: Ekylibre::Record::Column.new(:content, :text, null: false).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      importance: Ekylibre::Record::Column.new(:importance, :string, limit: 10, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      observed_at: Ekylibre::Record::Column.new(:observed_at, :datetime, null: false).freeze,
      subject_id: Ekylibre::Record::Column.new(:subject_id, :integer, null: false).freeze,
      subject_type: Ekylibre::Record::Column.new(:subject_type, :string, null: false).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    operation_tasks: HashWithIndifferentAccess.new(
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      expression: Ekylibre::Record::Column.new(:expression, :text).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      indicator_datum_id: Ekylibre::Record::Column.new(:indicator_datum_id, :integer).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      operand_id: Ekylibre::Record::Column.new(:operand_id, :integer).freeze,
      operand_quantity: Ekylibre::Record::Column.new(:operand_quantity, :decimal, precision: 19, scale: 4).freeze,
      operation_id: Ekylibre::Record::Column.new(:operation_id, :integer, null: false).freeze,
      parent_id: Ekylibre::Record::Column.new(:parent_id, :integer).freeze,
      prorated: Ekylibre::Record::Column.new(:prorated, :boolean, null: false).freeze,
      subject_id: Ekylibre::Record::Column.new(:subject_id, :integer, null: false).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze,
      verb: Ekylibre::Record::Column.new(:verb, :string, null: false).freeze
    ).freeze,
    operations: HashWithIndifferentAccess.new(
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      duration: Ekylibre::Record::Column.new(:duration, :integer).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      intervention_id: Ekylibre::Record::Column.new(:intervention_id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      position: Ekylibre::Record::Column.new(:position, :integer).freeze,
      started_at: Ekylibre::Record::Column.new(:started_at, :datetime, null: false).freeze,
      stopped_at: Ekylibre::Record::Column.new(:stopped_at, :datetime, null: false).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    outgoing_deliveries: HashWithIndifferentAccess.new(
      address_id: Ekylibre::Record::Column.new(:address_id, :integer).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      mode_id: Ekylibre::Record::Column.new(:mode_id, :integer).freeze,
      number: Ekylibre::Record::Column.new(:number, :string).freeze,
      recipient_id: Ekylibre::Record::Column.new(:recipient_id, :integer, null: false).freeze,
      reference_number: Ekylibre::Record::Column.new(:reference_number, :string).freeze,
      sale_id: Ekylibre::Record::Column.new(:sale_id, :integer).freeze,
      sent_at: Ekylibre::Record::Column.new(:sent_at, :datetime).freeze,
      transport_id: Ekylibre::Record::Column.new(:transport_id, :integer).freeze,
      transporter_id: Ekylibre::Record::Column.new(:transporter_id, :integer).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze,
      weight: Ekylibre::Record::Column.new(:weight, :decimal, precision: 19, scale: 4).freeze
    ).freeze,
    outgoing_delivery_items: HashWithIndifferentAccess.new(
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      delivery_id: Ekylibre::Record::Column.new(:delivery_id, :integer, null: false).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      product_id: Ekylibre::Record::Column.new(:product_id, :integer, null: false).freeze,
      quantity: Ekylibre::Record::Column.new(:quantity, :decimal, precision: 19, scale: 4, null: false, default: 1.0).freeze,
      sale_item_id: Ekylibre::Record::Column.new(:sale_item_id, :integer).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    outgoing_delivery_modes: HashWithIndifferentAccess.new(
      code: Ekylibre::Record::Column.new(:code, :string, limit: 10, null: false).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      description: Ekylibre::Record::Column.new(:description, :text).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      name: Ekylibre::Record::Column.new(:name, :string, null: false).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze,
      with_transport: Ekylibre::Record::Column.new(:with_transport, :boolean, null: false).freeze
    ).freeze,
    outgoing_payment_modes: HashWithIndifferentAccess.new(
      active: Ekylibre::Record::Column.new(:active, :boolean, null: false).freeze,
      attorney_journal_id: Ekylibre::Record::Column.new(:attorney_journal_id, :integer).freeze,
      cash_id: Ekylibre::Record::Column.new(:cash_id, :integer).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      name: Ekylibre::Record::Column.new(:name, :string, limit: 50, null: false).freeze,
      position: Ekylibre::Record::Column.new(:position, :integer).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze,
      with_accounting: Ekylibre::Record::Column.new(:with_accounting, :boolean, null: false).freeze
    ).freeze,
    outgoing_payments: HashWithIndifferentAccess.new(
      accounted_at: Ekylibre::Record::Column.new(:accounted_at, :datetime).freeze,
      affair_id: Ekylibre::Record::Column.new(:affair_id, :integer).freeze,
      amount: Ekylibre::Record::Column.new(:amount, :decimal, precision: 19, scale: 4, null: false, default: 0.0).freeze,
      bank_check_number: Ekylibre::Record::Column.new(:bank_check_number, :string).freeze,
      cash_id: Ekylibre::Record::Column.new(:cash_id, :integer, null: false).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      created_on: Ekylibre::Record::Column.new(:created_on, :date).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      currency: Ekylibre::Record::Column.new(:currency, :string, limit: 3, null: false).freeze,
      delivered: Ekylibre::Record::Column.new(:delivered, :boolean, null: false, default: true).freeze,
      downpayment: Ekylibre::Record::Column.new(:downpayment, :boolean, null: false, default: true).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      journal_entry_id: Ekylibre::Record::Column.new(:journal_entry_id, :integer).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      mode_id: Ekylibre::Record::Column.new(:mode_id, :integer, null: false).freeze,
      number: Ekylibre::Record::Column.new(:number, :string).freeze,
      paid_on: Ekylibre::Record::Column.new(:paid_on, :date).freeze,
      payee_id: Ekylibre::Record::Column.new(:payee_id, :integer, null: false).freeze,
      responsible_id: Ekylibre::Record::Column.new(:responsible_id, :integer, null: false).freeze,
      to_bank_on: Ekylibre::Record::Column.new(:to_bank_on, :date, null: false).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    preferences: HashWithIndifferentAccess.new(
      boolean_value: Ekylibre::Record::Column.new(:boolean_value, :boolean).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      decimal_value: Ekylibre::Record::Column.new(:decimal_value, :decimal, precision: 19, scale: 4).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      integer_value: Ekylibre::Record::Column.new(:integer_value, :integer).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      name: Ekylibre::Record::Column.new(:name, :string, null: false).freeze,
      nature: Ekylibre::Record::Column.new(:nature, :string, limit: 10, null: false).freeze,
      record_value_id: Ekylibre::Record::Column.new(:record_value_id, :integer).freeze,
      record_value_type: Ekylibre::Record::Column.new(:record_value_type, :string).freeze,
      string_value: Ekylibre::Record::Column.new(:string_value, :text).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze,
      user_id: Ekylibre::Record::Column.new(:user_id, :integer).freeze
    ).freeze,
    prescriptions: HashWithIndifferentAccess.new(
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      delivered_on: Ekylibre::Record::Column.new(:delivered_on, :date).freeze,
      description: Ekylibre::Record::Column.new(:description, :text).freeze,
      document_id: Ekylibre::Record::Column.new(:document_id, :integer).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      prescriptor_id: Ekylibre::Record::Column.new(:prescriptor_id, :integer, null: false).freeze,
      reference_number: Ekylibre::Record::Column.new(:reference_number, :string).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    product_indicator_data: HashWithIndifferentAccess.new(
      boolean_value: Ekylibre::Record::Column.new(:boolean_value, :boolean, null: false).freeze,
      choice_value: Ekylibre::Record::Column.new(:choice_value, :string).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      decimal_value: Ekylibre::Record::Column.new(:decimal_value, :decimal, precision: 19, scale: 4).freeze,
      geometry_value: Ekylibre::Record::Column.new(:geometry_value, :spatial).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      indicator: Ekylibre::Record::Column.new(:indicator, :string, null: false).freeze,
      indicator_datatype: Ekylibre::Record::Column.new(:indicator_datatype, :string, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      measure_value_unit: Ekylibre::Record::Column.new(:measure_value_unit, :string).freeze,
      measure_value_value: Ekylibre::Record::Column.new(:measure_value_value, :decimal, precision: 19, scale: 4).freeze,
      measured_at: Ekylibre::Record::Column.new(:measured_at, :datetime, null: false).freeze,
      multi_polygon_value: Ekylibre::Record::Column.new(:multi_polygon_value, :spatial).freeze,
      point_value: Ekylibre::Record::Column.new(:point_value, :spatial).freeze,
      product_id: Ekylibre::Record::Column.new(:product_id, :integer, null: false).freeze,
      string_value: Ekylibre::Record::Column.new(:string_value, :text).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    product_links: HashWithIndifferentAccess.new(
      carried_id: Ekylibre::Record::Column.new(:carried_id, :integer, null: false).freeze,
      carrier_id: Ekylibre::Record::Column.new(:carrier_id, :integer, null: false).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      operation_task_id: Ekylibre::Record::Column.new(:operation_task_id, :integer).freeze,
      started_at: Ekylibre::Record::Column.new(:started_at, :datetime).freeze,
      stopped_at: Ekylibre::Record::Column.new(:stopped_at, :datetime).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    product_localizations: HashWithIndifferentAccess.new(
      arrival_cause: Ekylibre::Record::Column.new(:arrival_cause, :string).freeze,
      container_id: Ekylibre::Record::Column.new(:container_id, :integer).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      departure_cause: Ekylibre::Record::Column.new(:departure_cause, :string).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      nature: Ekylibre::Record::Column.new(:nature, :string, null: false).freeze,
      operation_task_id: Ekylibre::Record::Column.new(:operation_task_id, :integer).freeze,
      product_id: Ekylibre::Record::Column.new(:product_id, :integer, null: false).freeze,
      started_at: Ekylibre::Record::Column.new(:started_at, :datetime).freeze,
      stopped_at: Ekylibre::Record::Column.new(:stopped_at, :datetime).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    product_memberships: HashWithIndifferentAccess.new(
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      group_id: Ekylibre::Record::Column.new(:group_id, :integer, null: false).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      member_id: Ekylibre::Record::Column.new(:member_id, :integer, null: false).freeze,
      operation_task_id: Ekylibre::Record::Column.new(:operation_task_id, :integer).freeze,
      started_at: Ekylibre::Record::Column.new(:started_at, :datetime, null: false).freeze,
      stopped_at: Ekylibre::Record::Column.new(:stopped_at, :datetime).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    product_moves: HashWithIndifferentAccess.new(
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      initial: Ekylibre::Record::Column.new(:initial, :boolean, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      population_delta: Ekylibre::Record::Column.new(:population_delta, :decimal, precision: 19, scale: 4, null: false).freeze,
      product_id: Ekylibre::Record::Column.new(:product_id, :integer, null: false).freeze,
      started_at: Ekylibre::Record::Column.new(:started_at, :datetime).freeze,
      stopped_at: Ekylibre::Record::Column.new(:stopped_at, :datetime).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    product_nature_variant_indicator_data: HashWithIndifferentAccess.new(
      boolean_value: Ekylibre::Record::Column.new(:boolean_value, :boolean, null: false).freeze,
      choice_value: Ekylibre::Record::Column.new(:choice_value, :string).freeze,
      computation_method: Ekylibre::Record::Column.new(:computation_method, :string, null: false).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      decimal_value: Ekylibre::Record::Column.new(:decimal_value, :decimal, precision: 19, scale: 4).freeze,
      geometry_value: Ekylibre::Record::Column.new(:geometry_value, :spatial).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      indicator: Ekylibre::Record::Column.new(:indicator, :string, null: false).freeze,
      indicator_datatype: Ekylibre::Record::Column.new(:indicator_datatype, :string, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      measure_value_unit: Ekylibre::Record::Column.new(:measure_value_unit, :string).freeze,
      measure_value_value: Ekylibre::Record::Column.new(:measure_value_value, :decimal, precision: 19, scale: 4).freeze,
      multi_polygon_value: Ekylibre::Record::Column.new(:multi_polygon_value, :spatial).freeze,
      point_value: Ekylibre::Record::Column.new(:point_value, :spatial).freeze,
      string_value: Ekylibre::Record::Column.new(:string_value, :text).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze,
      variant_id: Ekylibre::Record::Column.new(:variant_id, :integer, null: false).freeze
    ).freeze,
    product_nature_variants: HashWithIndifferentAccess.new(
      active: Ekylibre::Record::Column.new(:active, :boolean, null: false).freeze,
      commercial_description: Ekylibre::Record::Column.new(:commercial_description, :text).freeze,
      commercial_name: Ekylibre::Record::Column.new(:commercial_name, :string, null: false).freeze,
      contour: Ekylibre::Record::Column.new(:contour, :string).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      frozen_indicators: Ekylibre::Record::Column.new(:frozen_indicators, :text).freeze,
      horizontal_rotation: Ekylibre::Record::Column.new(:horizontal_rotation, :integer, null: false, default: 0).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      name: Ekylibre::Record::Column.new(:name, :string).freeze,
      nature_id: Ekylibre::Record::Column.new(:nature_id, :integer, null: false).freeze,
      nature_name: Ekylibre::Record::Column.new(:nature_name, :string, null: false).freeze,
      number: Ekylibre::Record::Column.new(:number, :string).freeze,
      picture_content_type: Ekylibre::Record::Column.new(:picture_content_type, :string).freeze,
      picture_file_name: Ekylibre::Record::Column.new(:picture_file_name, :string).freeze,
      picture_file_size: Ekylibre::Record::Column.new(:picture_file_size, :integer).freeze,
      picture_updated_at: Ekylibre::Record::Column.new(:picture_updated_at, :datetime).freeze,
      unit_name: Ekylibre::Record::Column.new(:unit_name, :string, null: false).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze,
      variable_indicators: Ekylibre::Record::Column.new(:variable_indicators, :text).freeze
    ).freeze,
    product_natures: HashWithIndifferentAccess.new(
      abilities: Ekylibre::Record::Column.new(:abilities, :text).freeze,
      active: Ekylibre::Record::Column.new(:active, :boolean, null: false).freeze,
      asset_account_id: Ekylibre::Record::Column.new(:asset_account_id, :integer).freeze,
      charge_account_id: Ekylibre::Record::Column.new(:charge_account_id, :integer).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      depreciable: Ekylibre::Record::Column.new(:depreciable, :boolean, null: false).freeze,
      derivative_of: Ekylibre::Record::Column.new(:derivative_of, :string, limit: 120).freeze,
      description: Ekylibre::Record::Column.new(:description, :text).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      indicators: Ekylibre::Record::Column.new(:indicators, :text).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      name: Ekylibre::Record::Column.new(:name, :string, null: false).freeze,
      nomen: Ekylibre::Record::Column.new(:nomen, :string, limit: 120).freeze,
      number: Ekylibre::Record::Column.new(:number, :string, limit: 30, null: false).freeze,
      population_counting: Ekylibre::Record::Column.new(:population_counting, :string, null: false).freeze,
      product_account_id: Ekylibre::Record::Column.new(:product_account_id, :integer).freeze,
      purchasable: Ekylibre::Record::Column.new(:purchasable, :boolean, null: false).freeze,
      reductible: Ekylibre::Record::Column.new(:reductible, :boolean, null: false).freeze,
      saleable: Ekylibre::Record::Column.new(:saleable, :boolean, null: false).freeze,
      stock_account_id: Ekylibre::Record::Column.new(:stock_account_id, :integer).freeze,
      storable: Ekylibre::Record::Column.new(:storable, :boolean, null: false).freeze,
      subscribing: Ekylibre::Record::Column.new(:subscribing, :boolean, null: false).freeze,
      subscription_duration: Ekylibre::Record::Column.new(:subscription_duration, :string).freeze,
      subscription_nature_id: Ekylibre::Record::Column.new(:subscription_nature_id, :integer).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze,
      variety: Ekylibre::Record::Column.new(:variety, :string, limit: 120, null: false).freeze
    ).freeze,
    product_natures_purchase_taxes: HashWithIndifferentAccess.new(
      product_nature_id: Ekylibre::Record::Column.new(:product_nature_id, :integer, null: false).freeze,
      tax_id: Ekylibre::Record::Column.new(:tax_id, :integer, null: false).freeze
    ).freeze,
    product_natures_sale_taxes: HashWithIndifferentAccess.new(
      product_nature_id: Ekylibre::Record::Column.new(:product_nature_id, :integer, null: false).freeze,
      tax_id: Ekylibre::Record::Column.new(:tax_id, :integer, null: false).freeze
    ).freeze,
    product_ownerships: HashWithIndifferentAccess.new(
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      nature: Ekylibre::Record::Column.new(:nature, :string, null: false).freeze,
      owner_id: Ekylibre::Record::Column.new(:owner_id, :integer).freeze,
      product_id: Ekylibre::Record::Column.new(:product_id, :integer, null: false).freeze,
      started_at: Ekylibre::Record::Column.new(:started_at, :datetime).freeze,
      stopped_at: Ekylibre::Record::Column.new(:stopped_at, :datetime).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    product_process_phases: HashWithIndifferentAccess.new(
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      description: Ekylibre::Record::Column.new(:description, :string).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      name: Ekylibre::Record::Column.new(:name, :string, null: false).freeze,
      nature: Ekylibre::Record::Column.new(:nature, :string, null: false).freeze,
      phase_delay: Ekylibre::Record::Column.new(:phase_delay, :string).freeze,
      position: Ekylibre::Record::Column.new(:position, :integer).freeze,
      process_id: Ekylibre::Record::Column.new(:process_id, :integer, null: false).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    product_processes: HashWithIndifferentAccess.new(
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      description: Ekylibre::Record::Column.new(:description, :string).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      name: Ekylibre::Record::Column.new(:name, :string, null: false).freeze,
      nature: Ekylibre::Record::Column.new(:nature, :string, null: false).freeze,
      repeatable: Ekylibre::Record::Column.new(:repeatable, :boolean, null: false).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze,
      variety: Ekylibre::Record::Column.new(:variety, :string, limit: 120, null: false).freeze
    ).freeze,
    production_supports: HashWithIndifferentAccess.new(
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      exclusive: Ekylibre::Record::Column.new(:exclusive, :boolean, null: false).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      production_id: Ekylibre::Record::Column.new(:production_id, :integer, null: false).freeze,
      started_at: Ekylibre::Record::Column.new(:started_at, :datetime).freeze,
      stopped_at: Ekylibre::Record::Column.new(:stopped_at, :datetime).freeze,
      storage_id: Ekylibre::Record::Column.new(:storage_id, :integer, null: false).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    productions: HashWithIndifferentAccess.new(
      activity_id: Ekylibre::Record::Column.new(:activity_id, :integer, null: false).freeze,
      campaign_id: Ekylibre::Record::Column.new(:campaign_id, :integer, null: false).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      name: Ekylibre::Record::Column.new(:name, :string, null: false).freeze,
      position: Ekylibre::Record::Column.new(:position, :integer).freeze,
      product_nature_id: Ekylibre::Record::Column.new(:product_nature_id, :integer).freeze,
      started_at: Ekylibre::Record::Column.new(:started_at, :datetime).freeze,
      state: Ekylibre::Record::Column.new(:state, :string, null: false).freeze,
      static_support: Ekylibre::Record::Column.new(:static_support, :boolean, null: false).freeze,
      stopped_at: Ekylibre::Record::Column.new(:stopped_at, :datetime).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    products: HashWithIndifferentAccess.new(
      active: Ekylibre::Record::Column.new(:active, :boolean, null: false).freeze,
      address_id: Ekylibre::Record::Column.new(:address_id, :integer).freeze,
      asset_id: Ekylibre::Record::Column.new(:asset_id, :integer).freeze,
      born_at: Ekylibre::Record::Column.new(:born_at, :datetime).freeze,
      content_indicator: Ekylibre::Record::Column.new(:content_indicator, :string).freeze,
      content_indicator_unit: Ekylibre::Record::Column.new(:content_indicator_unit, :string).freeze,
      content_maximal_quantity: Ekylibre::Record::Column.new(:content_maximal_quantity, :decimal, precision: 19, scale: 4, null: false, default: 0.0).freeze,
      content_nature_id: Ekylibre::Record::Column.new(:content_nature_id, :integer).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      dead_at: Ekylibre::Record::Column.new(:dead_at, :datetime).freeze,
      default_storage_id: Ekylibre::Record::Column.new(:default_storage_id, :integer).freeze,
      derivative_of: Ekylibre::Record::Column.new(:derivative_of, :string, limit: 120).freeze,
      description: Ekylibre::Record::Column.new(:description, :text).freeze,
      external: Ekylibre::Record::Column.new(:external, :boolean, null: false).freeze,
      father_id: Ekylibre::Record::Column.new(:father_id, :integer).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      identification_number: Ekylibre::Record::Column.new(:identification_number, :string).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      mother_id: Ekylibre::Record::Column.new(:mother_id, :integer).freeze,
      name: Ekylibre::Record::Column.new(:name, :string, null: false).freeze,
      nature_id: Ekylibre::Record::Column.new(:nature_id, :integer, null: false).freeze,
      number: Ekylibre::Record::Column.new(:number, :string, null: false).freeze,
      owner_id: Ekylibre::Record::Column.new(:owner_id, :integer, null: false).freeze,
      parent_id: Ekylibre::Record::Column.new(:parent_id, :integer).freeze,
      picture_content_type: Ekylibre::Record::Column.new(:picture_content_type, :string).freeze,
      picture_file_name: Ekylibre::Record::Column.new(:picture_file_name, :string).freeze,
      picture_file_size: Ekylibre::Record::Column.new(:picture_file_size, :integer).freeze,
      picture_updated_at: Ekylibre::Record::Column.new(:picture_updated_at, :datetime).freeze,
      reservoir: Ekylibre::Record::Column.new(:reservoir, :boolean, null: false).freeze,
      tracking_id: Ekylibre::Record::Column.new(:tracking_id, :integer).freeze,
      type: Ekylibre::Record::Column.new(:type, :string).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze,
      variant_id: Ekylibre::Record::Column.new(:variant_id, :integer, null: false).freeze,
      variety: Ekylibre::Record::Column.new(:variety, :string, limit: 120, null: false).freeze,
      work_number: Ekylibre::Record::Column.new(:work_number, :string).freeze
    ).freeze,
    professions: HashWithIndifferentAccess.new(
      code: Ekylibre::Record::Column.new(:code, :string).freeze,
      commercial: Ekylibre::Record::Column.new(:commercial, :boolean, null: false).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      name: Ekylibre::Record::Column.new(:name, :string, null: false).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    purchase_items: HashWithIndifferentAccess.new(
      account_id: Ekylibre::Record::Column.new(:account_id, :integer, null: false).freeze,
      amount: Ekylibre::Record::Column.new(:amount, :decimal, precision: 19, scale: 4, null: false, default: 0.0).freeze,
      annotation: Ekylibre::Record::Column.new(:annotation, :text).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      currency: Ekylibre::Record::Column.new(:currency, :string, limit: 3).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      indicator: Ekylibre::Record::Column.new(:indicator, :string, limit: 120, null: false).freeze,
      label: Ekylibre::Record::Column.new(:label, :text).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      position: Ekylibre::Record::Column.new(:position, :integer).freeze,
      pretax_amount: Ekylibre::Record::Column.new(:pretax_amount, :decimal, precision: 19, scale: 4, null: false, default: 0.0).freeze,
      purchase_id: Ekylibre::Record::Column.new(:purchase_id, :integer, null: false).freeze,
      quantity: Ekylibre::Record::Column.new(:quantity, :decimal, precision: 19, scale: 4, null: false, default: 1.0).freeze,
      tax_id: Ekylibre::Record::Column.new(:tax_id, :integer, null: false).freeze,
      unit_price_amount: Ekylibre::Record::Column.new(:unit_price_amount, :decimal, precision: 19, scale: 4, null: false).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze,
      variant_id: Ekylibre::Record::Column.new(:variant_id, :integer, null: false).freeze
    ).freeze,
    purchase_natures: HashWithIndifferentAccess.new(
      active: Ekylibre::Record::Column.new(:active, :boolean, null: false, default: true).freeze,
      by_default: Ekylibre::Record::Column.new(:by_default, :boolean, null: false).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      currency: Ekylibre::Record::Column.new(:currency, :string, limit: 3).freeze,
      description: Ekylibre::Record::Column.new(:description, :text).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      journal_id: Ekylibre::Record::Column.new(:journal_id, :integer).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      name: Ekylibre::Record::Column.new(:name, :string).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze,
      with_accounting: Ekylibre::Record::Column.new(:with_accounting, :boolean, null: false).freeze
    ).freeze,
    purchases: HashWithIndifferentAccess.new(
      accounted_at: Ekylibre::Record::Column.new(:accounted_at, :datetime).freeze,
      affair_id: Ekylibre::Record::Column.new(:affair_id, :integer).freeze,
      amount: Ekylibre::Record::Column.new(:amount, :decimal, precision: 19, scale: 4, null: false, default: 0.0).freeze,
      confirmed_on: Ekylibre::Record::Column.new(:confirmed_on, :date).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      created_on: Ekylibre::Record::Column.new(:created_on, :date).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      currency: Ekylibre::Record::Column.new(:currency, :string, limit: 3).freeze,
      delivery_address_id: Ekylibre::Record::Column.new(:delivery_address_id, :integer).freeze,
      description: Ekylibre::Record::Column.new(:description, :text).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      invoiced_on: Ekylibre::Record::Column.new(:invoiced_on, :date).freeze,
      journal_entry_id: Ekylibre::Record::Column.new(:journal_entry_id, :integer).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      nature_id: Ekylibre::Record::Column.new(:nature_id, :integer).freeze,
      number: Ekylibre::Record::Column.new(:number, :string, limit: 60, null: false).freeze,
      planned_on: Ekylibre::Record::Column.new(:planned_on, :date).freeze,
      pretax_amount: Ekylibre::Record::Column.new(:pretax_amount, :decimal, precision: 19, scale: 4, null: false, default: 0.0).freeze,
      reference_number: Ekylibre::Record::Column.new(:reference_number, :string).freeze,
      responsible_id: Ekylibre::Record::Column.new(:responsible_id, :integer).freeze,
      state: Ekylibre::Record::Column.new(:state, :string, limit: 60).freeze,
      supplier_id: Ekylibre::Record::Column.new(:supplier_id, :integer, null: false).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    roles: HashWithIndifferentAccess.new(
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      name: Ekylibre::Record::Column.new(:name, :string, null: false).freeze,
      rights: Ekylibre::Record::Column.new(:rights, :text).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    sale_items: HashWithIndifferentAccess.new(
      account_id: Ekylibre::Record::Column.new(:account_id, :integer).freeze,
      amount: Ekylibre::Record::Column.new(:amount, :decimal, precision: 19, scale: 4, null: false, default: 0.0).freeze,
      annotation: Ekylibre::Record::Column.new(:annotation, :text).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      credited_item_id: Ekylibre::Record::Column.new(:credited_item_id, :integer).freeze,
      currency: Ekylibre::Record::Column.new(:currency, :string, limit: 3).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      indicator: Ekylibre::Record::Column.new(:indicator, :string, limit: 120, null: false).freeze,
      label: Ekylibre::Record::Column.new(:label, :text).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      position: Ekylibre::Record::Column.new(:position, :integer).freeze,
      pretax_amount: Ekylibre::Record::Column.new(:pretax_amount, :decimal, precision: 19, scale: 4, null: false, default: 0.0).freeze,
      price_id: Ekylibre::Record::Column.new(:price_id, :integer, null: false).freeze,
      quantity: Ekylibre::Record::Column.new(:quantity, :decimal, precision: 19, scale: 4, null: false, default: 1.0).freeze,
      reduced_item_id: Ekylibre::Record::Column.new(:reduced_item_id, :integer).freeze,
      reduction_percentage: Ekylibre::Record::Column.new(:reduction_percentage, :decimal, precision: 19, scale: 4, null: false, default: 0.0).freeze,
      sale_id: Ekylibre::Record::Column.new(:sale_id, :integer, null: false).freeze,
      tax_id: Ekylibre::Record::Column.new(:tax_id, :integer).freeze,
      unit_price_amount: Ekylibre::Record::Column.new(:unit_price_amount, :decimal, precision: 19, scale: 4).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze,
      variant_id: Ekylibre::Record::Column.new(:variant_id, :integer, null: false).freeze
    ).freeze,
    sale_natures: HashWithIndifferentAccess.new(
      active: Ekylibre::Record::Column.new(:active, :boolean, null: false, default: true).freeze,
      by_default: Ekylibre::Record::Column.new(:by_default, :boolean, null: false).freeze,
      catalog_id: Ekylibre::Record::Column.new(:catalog_id, :integer, null: false).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      currency: Ekylibre::Record::Column.new(:currency, :string, limit: 3, null: false).freeze,
      description: Ekylibre::Record::Column.new(:description, :text).freeze,
      downpayment: Ekylibre::Record::Column.new(:downpayment, :boolean, null: false).freeze,
      downpayment_minimum: Ekylibre::Record::Column.new(:downpayment_minimum, :decimal, precision: 19, scale: 4, default: 0.0).freeze,
      downpayment_percentage: Ekylibre::Record::Column.new(:downpayment_percentage, :decimal, precision: 19, scale: 4, default: 0.0).freeze,
      expiration_delay: Ekylibre::Record::Column.new(:expiration_delay, :string, null: false).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      journal_id: Ekylibre::Record::Column.new(:journal_id, :integer).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      name: Ekylibre::Record::Column.new(:name, :string, null: false).freeze,
      payment_delay: Ekylibre::Record::Column.new(:payment_delay, :string, null: false).freeze,
      payment_mode_complement: Ekylibre::Record::Column.new(:payment_mode_complement, :text).freeze,
      payment_mode_id: Ekylibre::Record::Column.new(:payment_mode_id, :integer).freeze,
      sales_conditions: Ekylibre::Record::Column.new(:sales_conditions, :text).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze,
      with_accounting: Ekylibre::Record::Column.new(:with_accounting, :boolean, null: false).freeze
    ).freeze,
    sales: HashWithIndifferentAccess.new(
      accounted_at: Ekylibre::Record::Column.new(:accounted_at, :datetime).freeze,
      address_id: Ekylibre::Record::Column.new(:address_id, :integer).freeze,
      affair_id: Ekylibre::Record::Column.new(:affair_id, :integer).freeze,
      amount: Ekylibre::Record::Column.new(:amount, :decimal, precision: 19, scale: 4, null: false, default: 0.0).freeze,
      annotation: Ekylibre::Record::Column.new(:annotation, :text).freeze,
      client_id: Ekylibre::Record::Column.new(:client_id, :integer, null: false).freeze,
      conclusion: Ekylibre::Record::Column.new(:conclusion, :text).freeze,
      confirmed_on: Ekylibre::Record::Column.new(:confirmed_on, :date).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      created_on: Ekylibre::Record::Column.new(:created_on, :date, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      credit: Ekylibre::Record::Column.new(:credit, :boolean, null: false).freeze,
      currency: Ekylibre::Record::Column.new(:currency, :string, limit: 3).freeze,
      delivery_address_id: Ekylibre::Record::Column.new(:delivery_address_id, :integer).freeze,
      description: Ekylibre::Record::Column.new(:description, :text).freeze,
      downpayment_amount: Ekylibre::Record::Column.new(:downpayment_amount, :decimal, precision: 19, scale: 4, null: false, default: 0.0).freeze,
      expiration_delay: Ekylibre::Record::Column.new(:expiration_delay, :string).freeze,
      expired_on: Ekylibre::Record::Column.new(:expired_on, :date).freeze,
      function_title: Ekylibre::Record::Column.new(:function_title, :string).freeze,
      has_downpayment: Ekylibre::Record::Column.new(:has_downpayment, :boolean, null: false).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      initial_number: Ekylibre::Record::Column.new(:initial_number, :string, limit: 60).freeze,
      introduction: Ekylibre::Record::Column.new(:introduction, :text).freeze,
      invoice_address_id: Ekylibre::Record::Column.new(:invoice_address_id, :integer).freeze,
      invoiced_on: Ekylibre::Record::Column.new(:invoiced_on, :date).freeze,
      journal_entry_id: Ekylibre::Record::Column.new(:journal_entry_id, :integer).freeze,
      letter_format: Ekylibre::Record::Column.new(:letter_format, :boolean, null: false, default: true).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      nature_id: Ekylibre::Record::Column.new(:nature_id, :integer).freeze,
      number: Ekylibre::Record::Column.new(:number, :string, limit: 60, null: false).freeze,
      origin_id: Ekylibre::Record::Column.new(:origin_id, :integer).freeze,
      payment_delay: Ekylibre::Record::Column.new(:payment_delay, :string, null: false).freeze,
      payment_on: Ekylibre::Record::Column.new(:payment_on, :date).freeze,
      pretax_amount: Ekylibre::Record::Column.new(:pretax_amount, :decimal, precision: 19, scale: 4, null: false, default: 0.0).freeze,
      reference_number: Ekylibre::Record::Column.new(:reference_number, :string).freeze,
      responsible_id: Ekylibre::Record::Column.new(:responsible_id, :integer).freeze,
      state: Ekylibre::Record::Column.new(:state, :string, limit: 60, null: false).freeze,
      subject: Ekylibre::Record::Column.new(:subject, :string).freeze,
      transporter_id: Ekylibre::Record::Column.new(:transporter_id, :integer).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    schema_migrations: HashWithIndifferentAccess.new(
      version: Ekylibre::Record::Column.new(:version, :string, null: false).freeze
    ).freeze,
    sequences: HashWithIndifferentAccess.new(
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      last_cweek: Ekylibre::Record::Column.new(:last_cweek, :integer).freeze,
      last_month: Ekylibre::Record::Column.new(:last_month, :integer).freeze,
      last_number: Ekylibre::Record::Column.new(:last_number, :integer).freeze,
      last_year: Ekylibre::Record::Column.new(:last_year, :integer).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      name: Ekylibre::Record::Column.new(:name, :string, null: false).freeze,
      number_format: Ekylibre::Record::Column.new(:number_format, :string, null: false).freeze,
      number_increment: Ekylibre::Record::Column.new(:number_increment, :integer, null: false, default: 1).freeze,
      number_start: Ekylibre::Record::Column.new(:number_start, :integer, null: false, default: 1).freeze,
      period: Ekylibre::Record::Column.new(:period, :string, null: false, default: "number").freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze,
      usage: Ekylibre::Record::Column.new(:usage, :string).freeze
    ).freeze,
    spatial_ref_sys: HashWithIndifferentAccess.new(
      auth_name: Ekylibre::Record::Column.new(:auth_name, :string, limit: 256).freeze,
      auth_srid: Ekylibre::Record::Column.new(:auth_srid, :integer).freeze,
      proj4text: Ekylibre::Record::Column.new(:proj4text, :string, limit: 2048).freeze,
      srid: Ekylibre::Record::Column.new(:srid, :integer, null: false).freeze,
      srtext: Ekylibre::Record::Column.new(:srtext, :string, limit: 2048).freeze
    ).freeze,
    subscription_natures: HashWithIndifferentAccess.new(
      actual_number: Ekylibre::Record::Column.new(:actual_number, :integer).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      description: Ekylibre::Record::Column.new(:description, :text).freeze,
      entity_link_direction: Ekylibre::Record::Column.new(:entity_link_direction, :string, limit: 30).freeze,
      entity_link_nature: Ekylibre::Record::Column.new(:entity_link_nature, :string, limit: 120).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      name: Ekylibre::Record::Column.new(:name, :string, null: false).freeze,
      nature: Ekylibre::Record::Column.new(:nature, :string, null: false).freeze,
      reduction_percentage: Ekylibre::Record::Column.new(:reduction_percentage, :decimal, precision: 19, scale: 4).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    subscriptions: HashWithIndifferentAccess.new(
      address_id: Ekylibre::Record::Column.new(:address_id, :integer).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      description: Ekylibre::Record::Column.new(:description, :text).freeze,
      first_number: Ekylibre::Record::Column.new(:first_number, :integer).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      last_number: Ekylibre::Record::Column.new(:last_number, :integer).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      nature_id: Ekylibre::Record::Column.new(:nature_id, :integer).freeze,
      number: Ekylibre::Record::Column.new(:number, :string).freeze,
      product_nature_id: Ekylibre::Record::Column.new(:product_nature_id, :integer).freeze,
      quantity: Ekylibre::Record::Column.new(:quantity, :decimal, precision: 19, scale: 4).freeze,
      sale_id: Ekylibre::Record::Column.new(:sale_id, :integer).freeze,
      sale_item_id: Ekylibre::Record::Column.new(:sale_item_id, :integer).freeze,
      started_on: Ekylibre::Record::Column.new(:started_on, :date).freeze,
      stopped_on: Ekylibre::Record::Column.new(:stopped_on, :date).freeze,
      subscriber_id: Ekylibre::Record::Column.new(:subscriber_id, :integer).freeze,
      suspended: Ekylibre::Record::Column.new(:suspended, :boolean, null: false).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    tax_declarations: HashWithIndifferentAccess.new(
      accounted_at: Ekylibre::Record::Column.new(:accounted_at, :datetime).freeze,
      acquisition_amount: Ekylibre::Record::Column.new(:acquisition_amount, :decimal, precision: 19, scale: 4).freeze,
      address: Ekylibre::Record::Column.new(:address, :string).freeze,
      amount: Ekylibre::Record::Column.new(:amount, :decimal, precision: 19, scale: 4).freeze,
      assimilated_taxes_amount: Ekylibre::Record::Column.new(:assimilated_taxes_amount, :decimal, precision: 19, scale: 4).freeze,
      balance_amount: Ekylibre::Record::Column.new(:balance_amount, :decimal, precision: 19, scale: 4).freeze,
      collected_amount: Ekylibre::Record::Column.new(:collected_amount, :decimal, precision: 19, scale: 4).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      declared_on: Ekylibre::Record::Column.new(:declared_on, :date).freeze,
      deferred_payment: Ekylibre::Record::Column.new(:deferred_payment, :boolean).freeze,
      financial_year_id: Ekylibre::Record::Column.new(:financial_year_id, :integer).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      journal_entry_id: Ekylibre::Record::Column.new(:journal_entry_id, :integer).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      nature: Ekylibre::Record::Column.new(:nature, :string, null: false, default: "normal").freeze,
      paid_amount: Ekylibre::Record::Column.new(:paid_amount, :decimal, precision: 19, scale: 4).freeze,
      paid_on: Ekylibre::Record::Column.new(:paid_on, :date).freeze,
      started_on: Ekylibre::Record::Column.new(:started_on, :date).freeze,
      stopped_on: Ekylibre::Record::Column.new(:stopped_on, :date).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    taxes: HashWithIndifferentAccess.new(
      amount: Ekylibre::Record::Column.new(:amount, :decimal, precision: 19, scale: 4, null: false, default: 0.0).freeze,
      collect_account_id: Ekylibre::Record::Column.new(:collect_account_id, :integer).freeze,
      computation_method: Ekylibre::Record::Column.new(:computation_method, :string, limit: 20, null: false).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      deduction_account_id: Ekylibre::Record::Column.new(:deduction_account_id, :integer).freeze,
      description: Ekylibre::Record::Column.new(:description, :text).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      included: Ekylibre::Record::Column.new(:included, :boolean, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      name: Ekylibre::Record::Column.new(:name, :string, null: false).freeze,
      nomen: Ekylibre::Record::Column.new(:nomen, :string, limit: 120).freeze,
      reductible: Ekylibre::Record::Column.new(:reductible, :boolean, null: false, default: true).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    teams: HashWithIndifferentAccess.new(
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      depth: Ekylibre::Record::Column.new(:depth, :integer, null: false, default: 0).freeze,
      description: Ekylibre::Record::Column.new(:description, :text).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      lft: Ekylibre::Record::Column.new(:lft, :integer).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      name: Ekylibre::Record::Column.new(:name, :string, null: false).freeze,
      parent_id: Ekylibre::Record::Column.new(:parent_id, :integer).freeze,
      rgt: Ekylibre::Record::Column.new(:rgt, :integer).freeze,
      sales_conditions: Ekylibre::Record::Column.new(:sales_conditions, :text).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    trackings: HashWithIndifferentAccess.new(
      active: Ekylibre::Record::Column.new(:active, :boolean, null: false, default: true).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      description: Ekylibre::Record::Column.new(:description, :text).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      name: Ekylibre::Record::Column.new(:name, :string, null: false).freeze,
      producer_id: Ekylibre::Record::Column.new(:producer_id, :integer).freeze,
      product_id: Ekylibre::Record::Column.new(:product_id, :integer).freeze,
      serial: Ekylibre::Record::Column.new(:serial, :string).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    transfers: HashWithIndifferentAccess.new(
      accounted_at: Ekylibre::Record::Column.new(:accounted_at, :datetime).freeze,
      affair_id: Ekylibre::Record::Column.new(:affair_id, :integer).freeze,
      amount: Ekylibre::Record::Column.new(:amount, :decimal, precision: 19, scale: 4, null: false, default: 0.0).freeze,
      client_id: Ekylibre::Record::Column.new(:client_id, :integer, null: false).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      created_on: Ekylibre::Record::Column.new(:created_on, :date).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      currency: Ekylibre::Record::Column.new(:currency, :string, limit: 3, null: false).freeze,
      description: Ekylibre::Record::Column.new(:description, :string).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      journal_entry_id: Ekylibre::Record::Column.new(:journal_entry_id, :integer).freeze,
      label: Ekylibre::Record::Column.new(:label, :string).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      started_on: Ekylibre::Record::Column.new(:started_on, :date).freeze,
      stopped_on: Ekylibre::Record::Column.new(:stopped_on, :date).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze,
    transports: HashWithIndifferentAccess.new(
      amount: Ekylibre::Record::Column.new(:amount, :decimal, precision: 19, scale: 4, null: false, default: 0.0).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      created_on: Ekylibre::Record::Column.new(:created_on, :date).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      description: Ekylibre::Record::Column.new(:description, :text).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      number: Ekylibre::Record::Column.new(:number, :string).freeze,
      pretax_amount: Ekylibre::Record::Column.new(:pretax_amount, :decimal, precision: 19, scale: 4, null: false, default: 0.0).freeze,
      purchase_id: Ekylibre::Record::Column.new(:purchase_id, :integer).freeze,
      reference_number: Ekylibre::Record::Column.new(:reference_number, :string).freeze,
      responsible_id: Ekylibre::Record::Column.new(:responsible_id, :integer).freeze,
      transport_on: Ekylibre::Record::Column.new(:transport_on, :date).freeze,
      transporter_id: Ekylibre::Record::Column.new(:transporter_id, :integer, null: false).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze,
      weight: Ekylibre::Record::Column.new(:weight, :decimal, precision: 19, scale: 4).freeze
    ).freeze,
    users: HashWithIndifferentAccess.new(
      administrator: Ekylibre::Record::Column.new(:administrator, :boolean, null: false, default: true).freeze,
      arrived_on: Ekylibre::Record::Column.new(:arrived_on, :date).freeze,
      authentication_token: Ekylibre::Record::Column.new(:authentication_token, :string).freeze,
      commercial: Ekylibre::Record::Column.new(:commercial, :boolean).freeze,
      confirmation_sent_at: Ekylibre::Record::Column.new(:confirmation_sent_at, :datetime).freeze,
      confirmation_token: Ekylibre::Record::Column.new(:confirmation_token, :string).freeze,
      confirmed_at: Ekylibre::Record::Column.new(:confirmed_at, :datetime).freeze,
      created_at: Ekylibre::Record::Column.new(:created_at, :datetime, null: false).freeze,
      creator_id: Ekylibre::Record::Column.new(:creator_id, :integer).freeze,
      current_sign_in_at: Ekylibre::Record::Column.new(:current_sign_in_at, :datetime).freeze,
      current_sign_in_ip: Ekylibre::Record::Column.new(:current_sign_in_ip, :string).freeze,
      departed_at: Ekylibre::Record::Column.new(:departed_at, :datetime).freeze,
      department_id: Ekylibre::Record::Column.new(:department_id, :integer).freeze,
      description: Ekylibre::Record::Column.new(:description, :text).freeze,
      email: Ekylibre::Record::Column.new(:email, :string, null: false).freeze,
      employed: Ekylibre::Record::Column.new(:employed, :boolean, null: false).freeze,
      employment: Ekylibre::Record::Column.new(:employment, :string).freeze,
      encrypted_password: Ekylibre::Record::Column.new(:encrypted_password, :string, null: false, default: "").freeze,
      establishment_id: Ekylibre::Record::Column.new(:establishment_id, :integer).freeze,
      failed_attempts: Ekylibre::Record::Column.new(:failed_attempts, :integer, default: 0).freeze,
      first_name: Ekylibre::Record::Column.new(:first_name, :string, null: false).freeze,
      id: Ekylibre::Record::Column.new(:id, :integer, null: false).freeze,
      language: Ekylibre::Record::Column.new(:language, :string, limit: 3, null: false).freeze,
      last_name: Ekylibre::Record::Column.new(:last_name, :string, null: false).freeze,
      last_sign_in_at: Ekylibre::Record::Column.new(:last_sign_in_at, :datetime).freeze,
      last_sign_in_ip: Ekylibre::Record::Column.new(:last_sign_in_ip, :string).freeze,
      lock_version: Ekylibre::Record::Column.new(:lock_version, :integer, null: false, default: 0).freeze,
      locked: Ekylibre::Record::Column.new(:locked, :boolean, null: false).freeze,
      locked_at: Ekylibre::Record::Column.new(:locked_at, :datetime).freeze,
      maximal_grantable_reduction_percentage: Ekylibre::Record::Column.new(:maximal_grantable_reduction_percentage, :decimal, precision: 19, scale: 4, null: false, default: 5.0).freeze,
      office: Ekylibre::Record::Column.new(:office, :string).freeze,
      person_id: Ekylibre::Record::Column.new(:person_id, :integer).freeze,
      profession_id: Ekylibre::Record::Column.new(:profession_id, :integer).freeze,
      remember_created_at: Ekylibre::Record::Column.new(:remember_created_at, :datetime).freeze,
      reset_password_sent_at: Ekylibre::Record::Column.new(:reset_password_sent_at, :datetime).freeze,
      reset_password_token: Ekylibre::Record::Column.new(:reset_password_token, :string).freeze,
      rights: Ekylibre::Record::Column.new(:rights, :text).freeze,
      role_id: Ekylibre::Record::Column.new(:role_id, :integer, null: false).freeze,
      sign_in_count: Ekylibre::Record::Column.new(:sign_in_count, :integer, default: 0).freeze,
      unconfirmed_email: Ekylibre::Record::Column.new(:unconfirmed_email, :string).freeze,
      unlock_token: Ekylibre::Record::Column.new(:unlock_token, :string).freeze,
      updated_at: Ekylibre::Record::Column.new(:updated_at, :datetime, null: false).freeze,
      updater_id: Ekylibre::Record::Column.new(:updater_id, :integer).freeze
    ).freeze
  ).freeze
  def self.schema
    Ekylibre::SCHEMA
  end

end
