h1. Controleur and Vues

Nous disposons maintenant d'un modele pour nos animaux ainsi que d'une migration.
Nous allons donc créer un controlleur et les vues associés pour pouvoir interagir enfin avec nos données.

h2. 1 - Ajout d'un controleur standard

Tout ce passe dans le repertoire app/controler

>>créer un fichier comme ci-dessous

<pre><code class="ruby">
#app/controllers/animals_controller.rb
class AnimalsController < AdminController
  
  # va créer automatiquement les actions (new / edit / update / destroy / create)
  manage_restfully
  
  # Décrit les champs que nous voulons dans la page d'accueil des animaux
  # url=>{:action=>:show} permet de créer un lien vers la fiche de l'animal
  #:through=>:animal_group, :url=>true permet de créer un lien vers la catégorie de l'animal (autre modele)
  #t.action va créer un bouton avec l'option vers la fonction
  list do |t|
    t.column :identification_number, :url=>{:action=>:show}
    t.column :name, :url=>true
    t.column :name, :through=>:group, :url=>true
    t.column :born_on
    t.column :sex
    t.column :comment
    t.column :description
    t.column :income_on
    t.column :outgone_on
    t.action :show, :url=>{:format=>:pdf}, :image=>:print
    t.action :edit
    t.action :destroy, :if=>"RECORD.destroyable\?"
  end
  
  # Montrer une page d'accueil avec une liste d'animaux décrite ci-dessus
  def index
  end
  
  # Montre la fiche d'un animal identifié par son id en paramètre 
  def show
    return unless @animal = find_and_check
    session[:current_animal_id] = @animal.id   
    t3e @animal
  end
  
end
</code></pre>

Voilà un controleur à minima qui va nous permettre d'afficher nos animaux et de faire du CRUD.
Comme vous venez de le remarquer, nous avons juste à écrire notre fonction show et les champs voulus dans la partie list

bq. _*Controleurs_Conventions*_
nom de fichier - animals_controller.rb
nom de classe - AnimalsController
manage_restfully gère (new / edit / update / destroy / create)
au minimum une fontion list,index et show

bq. _*Official Doc*_
Controller http://guides.rubyonrails.org/action_controller_overview.html

h2. 2 - Ajout des vues standards

Tout ce passe dans le repertoire app/views
nous allons créer un repertoire animals pour nos animaux
le langage utilisé pour les vues est le langage HAML http://haml.info/
le composant utilisé pour les formulaires dans les vues est SimpleForm https://github.com/plataformatec/simple_form

>>créer le repertoire animals dans app/views

h3. A - vue index

Nous allons d'abord créer la vue d'accueil de notre partie Animaux

>>créer le fichier index.html.haml dans le répertoire app/views/animals

<pre><code class="ruby">
=kujaku
=toolbar do |t|
  -t.link :new
=list
</code></pre>

on appelle une toolbar avec un bouton New puis une "list" (défini dans notre controleur).
Test de notre application

>>démarrer votre server
<pre><code class="ruby">
rails s
</code></pre>

Si on teste notre application http://localhost:3000/animals
vous devriez obtenir une page avec une liste vide.

h3. B - vue show

Nous allons ensuite créer la vue permettant de montrer un animal

>>créer le fichier show.html.haml dans le répertoire app/views/animals

<pre><code class="ruby">
=toolbar do |t|
  -# action edit d'un animal
  -t.edit @animal
  -# action print d'un animal
  -t.print_entity @animal
  -# action destroy d'un animal avec demande de confirmation
  -t.destroy(@animal, :method=>:delete, "data-confirm" => tg(:are_you_sure_you_want_to_delete)) if @animal.destroyable?

=attributes_list(@animal) do |l| # liste des champs à afficher 
  -l.attribute :name
  -l.attribute :group, :url => true # on affiche l'attribut name de l'entité AnimalGroup associé par l'attribut group de l'entité courante Animal avec un lien vers ce groupe 
  -l.attribute :sex
  -l.attribute :identification_number
  -l.attribute :income_on
  -l.attribute :outgone_on
  -l.attribute :purchased_on
  -l.attribute :comment
</code></pre>

on appelle une toolbar avec des boutons (actions) Edit,Print et Destroy.
 puis une "list" avec des champs de notre modele animal (:name, etc..)

h3. C - vue _search

Nous allons ensuite créer la vue permettant de rechercher un animal

>>créer le fichier _search.html.haml dans le répertoire app/views/animals

<pre><code class="ruby">
=kujaku(:controller=>:animals, :action=>:index)
</code></pre>

On appelle notre controller pour qu'il renvoit l'action index , cad la liste des animaux

h3. D - vue _form 

Nous allons enfin créer la vue permettant de créer/éditer la fiche d'un animal

>>créer le fichier _form.html.haml dans le répertoire app/views/animals

<pre><code class="ruby">
=field_set(@animal, :general_informations) do |f| # partie info general de l entité animal
  =f.error :animal # affiche les erreurs renvoyés par le model
  =f.hint 'Selectionner la catégorie' # affiche une infos
  =f.association :animal_group # affiche un menu deroulant construit par la relation animal_group_id vers le champ name de l entité animal_group
  =f.input :name , :hint => "le nom de votre animal"# affiche le champ name de l entité animal avec une infos derriere
  =f.input :sexe, :collection => ["M", "F"], :as => :radio_buttons # affiche le champ sexe sous forme de radio avec une collection de proposition (M ou F) de l entité animal
  =f.input :born_on
  =f.input :ident_number
  =f.input :comment, :field=>:textarea # affiche le champ comment formaté en zone de texte

=field_set(@animal, :stocks_informations) do |f| # partie entrée sortie de l entité animal
  =f.input :in_on
  =f.input :out_on
  =f.input :purchased_on
</code></pre>

On affiche divers champs mis en forme grace aux composants internes dans deux parties distinctes de l'ecran

>>tester votre formulaire en vous rendant sur http://localhost:3000/animals/new

vous devriez voir cela

!https://github.com/ekylibre/ekylibre/raw/master/doc/guides/fra/contribute/images/animals_view_edit.png!

A ce stade, vous avez réalisé une migration , un modèle avec deux entités en relations, un controleur et les vues associés.
Vous avez réalisé le plus dur.

bq. _*Views_Conventions*_
nom du fichier - xxxx.html.haml
variable entité - @model

bq. _*Official Doc*_
HAML http://haml.info/
SimpleForm https://github.com/plataformatec/simple_form

Ekylibre - Tutorial for Agricultural ERP project on Ekylibre
Copyright (C) 2012 - Author : David JOULIN