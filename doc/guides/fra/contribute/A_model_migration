h1. Modeles et Migrations

Nous avons un projet de gestion de troupeaux avec comme objectif l'ecran ci-dessous

!https://github.com/ekylibre/ekylibre/raw/master/doc/mockups/animal_husbandry/index.png!

h2. Intro

Au départ, nous allons juste chercher à créer des ecrans avec les fonctions de bases (CRUD - 
create / read / update  and delete) sur un animal.
Nous allons donc nous baser sur le modele suivant

Source
[Animal|name;identification_number;born_on;sex;description;comment;income_on;outgone_on;purchase_on;ceded_on|+Create();+Read();+Update();+Delete]
[AnimalGroup|name;description;comment|+Create();+Read();+Update();+Delete]
[AnimalGroup]<>-1..*>[Animal]

!http://yuml.me/diagram/class/207f0cdf.png!

Dans ce diagramme de classe, nous n'avons pas mentionné les clefs primaires ou étrangères comme group_id
Le framework le fera pour nous avec la relation belongs_to

bq. les clefs primaires sont identifiées par *id*
les clefs étrangères se terminent par *_id*
toute les tables doivent avoir un champ "name"

h2. 1 - Créer une migration

Dans le but de créer nos tables dans notre base de données, nous devons ecrire une migration
Voiçi notre première migration.

>>taper
<pre><code class="ruby">
#in /ekylibre
rails g migration CreateAnimals
</code></pre>

Cette action va créer un fichier débutant par un horodatage (ex:  20121013140801_create_animals.rb ) dans db/migrate

Nous nommons les relations d'un champ portant la relation avec belongs_to
ex: group correspondra à la relation 1-N avec animal_groups.

<pre><code class="ruby">
#db/migrate/20121013140801_create_animals.rb
class CreateAnimals < ActiveRecord::Migration
  def change
    create_table :animals do |t|
      t.belongs_to :group,               :null=>false
      t.string     :name,                  :null=>false
      t.string     :identification_number,                :null=>false
      t.date       :born_on,            :null=>false
      t.string     :sex,                :null=>false, :limit=>1, :default=>'M'
      t.text       :description
      t.text       :comment
      t.date       :outgone_on,  :null=>false
      t.date       :income_on, :null=>false
      t.date       :purchased_on,          :null=>false
      t.date       :ceded_on
      t.stamps
    end
    add_stamps_indexes :animals
    add_index :animals, :name
    add_index :animals, :group_id
    
    create_table :animal_groups do |t|
       t.string     :name,                  :null=>false
       t.text       :description
       t.text       :comment
       t.stamps
    end
    add_stamps_indexes :animal_groups
    
  end
end
</code></pre>

Cette migration va créer deux tables avec leurs indexations respectives
Vous remarquerez la façon dont on donne le type du champ et ses options.
l'indication t.stamps permet de créer automatiquement certains champs (created_at,update_at,creator_id,updater_id,lock_version)
Pour réaliser cette migration, nous allons executer une commande en ligne de commande à la racine de l'application ekylibre

>>taper
<pre><code class="ruby">
#in /ekylibre
rake db:migrate
</code></pre>

Après avoir passé cette commande, regarder le fichier db/schema.rb
C'est le fichier qui représente le schéma global de votre application, il ne faut jamais le modifer à la main car c'est Rails qui s'en charge
Ce fichier permet, entre autre,de créer une base de données vide lors de l'appel de db:create par exemple.

<pre><code class="ruby">
   create_table "animals", :force => true do |t|
    t.integer  "group_id",                                            :null => false
    t.string   "name",                                                :null => false
    t.string   "identification_number",                               :null => false
    t.date     "born_on",                                             :null => false
    t.string   "sex",                   :limit => 1, :default => "M", :null => false
    t.text     "description"
    t.text     "comment"
    t.date     "outgone_on",                                          :null => false
    t.date     "income_on",                                           :null => false
    t.date     "purchased_on",                                        :null => false
    t.date     "ceded_on"
    t.datetime "created_at",                                          :null => false
    t.datetime "updated_at",                                          :null => false
    t.integer  "creator_id"
    t.integer  "updater_id"
    t.integer  "lock_version",                       :default => 0,   :null => false
  end

  add_index "animals", ["created_at"], :name => "index_animals_on_created_at"
  add_index "animals", ["creator_id"], :name => "index_animals_on_creator_id"
  add_index "animals", ["group_id"], :name => "index_animals_on_group_id"
  add_index "animals", ["name"], :name => "index_animals_on_name"
  add_index "animals", ["updated_at"], :name => "index_animals_on_updated_at"
  add_index "animals", ["updater_id"], :name => "index_animals_on_updater_id"
</code></pre>

si vous avez oublié un champ ou une option, vous pouvez annuler votre migration par un "rollback"

>>taper
<pre><code class="ruby">
#in /ekylibre
rake db:rollback
</code></pre>

vous pouvez maintenant modifier votre fichier de migration et repasser votre migration

>>taper
<pre><code class="ruby">
#in /ekylibre
rake db:migrate
</code></pre>

Voilà, vous connaissez maintenant les rudiments sur les migrations.

bq. _*Migrations_Conventions*_
rails g migration ActionModels permet de générer un squellette vide
rake db:migrate et rake db:rollback permmettent de passer ou annuler une migration vers votre base de données
nom du fichier - YYYYMMDDHHMMSS_action_models.rb
nom des classes - ActionModels
nom des tables - models
nom des champs - t.type :name, :option1=>value1, :option2=>value2
t.stamps permet la création des champs created_at,update_at,creator_id,updater_id,lock_version

bq. _*Official Doc*_
Migrations http://guides.rubyonrails.org/migrations.html

h2. 2 - Le modèle de base

Maintenant que nous avons nos tables, nous allons pouvoir les "mapper" avec nos classes du modeles

>>créer un fichier dans app/models qui s'appelle animal.rb

<pre><code class="ruby">
#app/models/animal.rb
class Animal < CompanyRecord
end
</code></pre>

>>passer la commande suivante
<pre><code class="ruby">
rake clean:models clean:validations
</code></pre>

vous devriez obtenir le fichier suivant,qui contient des validations automatiquement ajoutées.

<pre><code class="ruby">
#app/models/animal.rb
class Animal < CompanyRecord
  #[VALIDATORS[ Do not edit these lines directly. Use `rake clean:validations`.
  validates_length_of :sexe, :allow_nil => true, :maximum => 1
  validates_length_of :ident_number, :name, :allow_nil => true, :maximum => 255
  validates_presence_of :born_on, :company, :ident_number, :in_on, :name, :out_on, :purchased_on, :sexe
  #]VALIDATORS]
end
</code></pre>

Nous n'avons plus qu'à rajouter nos relations et nos validations complémentaires
relations 1-N entre Animal et AnimalGroup 

(nous voulons un champ name unique et un champ identification_number unique pour chaque animal)
Il ne faut jamais modifier les validations automatiques qui se situent entre les balises
#[VALIDATORS et TO VALIDATORS]

>>Ajouter les validations comme ci-dessous

<pre><code class="ruby">
#app/models/animal.rb
class Animal < CompanyRecord
  belongs_to :group, :class_name => "AnimalGroup" # c'est l'attribut group qui porte la relation N-1 dans l'entité Animal
  #[VALIDATORS[ Do not edit these lines directly. Use `rake clean:validations`.
  validates_length_of :sex, :allow_nil => true, :maximum => 1
  validates_length_of :identification_number, :name, :allow_nil => true, :maximum => 255
  validates_presence_of :born_on, :group, :identification_number, :income_on, :name, :outgone_on, :purchased_on, :sex
  #]VALIDATORS]
  validates_uniqueness_of :name, :identification_number
end
</code></pre>

nous avons également à faire une autre classe car nous avons une autre table

>>refaite les mêmes démarches pour obtenir un fichier animal_group.rb comme ci-dessous

<pre><code class="ruby">
#app/models/animal_group.rb
class AnimalGroup < CompanyRecord
  has_many :animals, :foreign_key => :group_id # c'est le champ group_id de la table animals qui porte la relation dans l'entité Animal
  #[VALIDATORS[ Do not edit these lines directly. Use `rake clean:validations`.
  validates_length_of :name, :allow_nil => true, :maximum => 255
  validates_presence_of :name
  #]VALIDATORS]
   validates_uniqueness_of :name
end
</code></pre>

Voilà, vous connaissez maintenant les rudiments sur les modèles.

bq. _*Models_Conventions*_
nom du fichier - model.rb
Nom de classe - Model ou ModelOne
relations avec - belong_to :model
validations avec - validates_uniqueness_of :column
rake clean:models clean:validations pour générer les validations automatiques

bq. _*Official Doc*_
Associations http://guides.rubyonrails.org/association_basics.html
Validations http://guides.rubyonrails.org/active_record_validations_callbacks.html

Ekylibre - Tutorial for Agricultural ERP project on Ekylibre
Copyright (C) 2012 - Author : David JOULIN