= Resource


== Models and Migrations

Assuming we have a project dealing with animals husbandry 

=== Introduction

In the beginning, we just want a view to create,read, update and delete (CRUD) an animal,
so we are going to create our models base on this http://yuml.me/edit/3f50e6c6

In this diagram class, we haven't mentionned primary key like id or other key like company_id or animal_group_id
this is rails conventions. Rails are going to create table as a magic.

* primary key for a table is *id*
* strangers keys finished by *_id*

=== Migration

In order to make table on our database we have to write some migrations.
So let's begin to write our first migration

in our case 20121013140801_create_animals.rb in db/migrate
we make strangers keys with belongs_to

  # db/migrate/20121013140801_create_animals.rb
  class CreateAnimals < ActiveRecord::Migration
    def change
      create_table :animals do |t|
        t.string     :name,                  null: false
        t.string     :identification_number, null: false
        t.date       :born_on,               null: false
        t.string     :sex,                   null: false
        t.date       :purchased_on,          null: false
        t.date       :ceded_on
        t.stamps
        t.index :name
      end    
    end
  end

This migration will create two tables with indexes (animals and animal_groups) in your database
in order to commit this migration, just passed in a command line:

  rake db:migrate

After that you could see that +db/schema.rb+ has been updates with our modifications.

If something is still wrong because you forgot a column for example, you could canceled with this command

  rake db:rollback

And modify your migration and commit by rake db:migrate etc...

==== Notes
* +t.stamps+ generates created_at, update_at, creator_id, updater_id, lock_version, and all the indexes fr these columns.
* {Migrations}[http://guides.rubyonrails.org/migrations.html]

=== The model

After having our tables, we are going to make our class.

  # app/models/animal.rb
  class Animal < Ekylibre::Record::Base
  end

and with the following command line:

  rake clean

you will obtain

  # app/models/animal.rb
  class Animal < Ekylibre::Record::Base
    #[VALIDATORS[ Do not edit these lines directly. Use `rake clean:validations`.
    validates_length_of :sex, :allow_nil => true, :maximum => 1
    validates_length_of :identification_number, :name, :allow_nil => true, :maximum => 255
    validates_presence_of :born_on, :company, :identification_number, :in_on, :name, :out_on, :purchased_on, :sexe
    #]VALIDATORS]
  end

so we just have to add relationship and other validations (we want a unique name and identification_number for our animal)
and we want company_id be just readable. Take care to NOT MODIFY OR ADDING DIRECTLY FROM #[VALIDATORS TO VALIDATORS]

  # app/models/animal.rb
  class Animal < Ekylibre::Record::Base
    belongs_to :animal_group
    #[VALIDATORS[ Do not edit these lines directly. Use `rake clean:validations`.
    validates_length_of :sexe, :allow_nil => true, :maximum => 1
    validates_length_of :identification_number, :name, :allow_nil => true, :maximum => 255
    validates_presence_of :animal_group, :born_on, :company, :identification_number, :in_on, :name, :out_on, :purchased_on, :sex
    #]VALIDATORS]
    validates_uniqueness_of :name, :identification_number
  end


== Controller and Views

=== Adding a standard controller

  rails g backend_scaffold Animal

  # app/controllers/backend/animals_controller.rb
  class Backend::AnimalsController < BackendController
    manage_restfully
  
    unroll
    
    list do |t|
      t.column :identification_number, url: true
      t.column :name
      t.column :sex
      t.action :edit
      t.action :destroy
    end
    
  end

`manage_restfully` will managed all our actions magically (index, show, new, create, edit, update, and destroy).
We just have to write the list parameters.

== Adding Translation

Translations are stored in YAML files in `config/locales/<locale>`. Locale codes use [ISO 639-3](http://en.wikipedia.org/wiki/ISO_639-3) list.

=== YAML syntax

* escape caracter : \_
* using variable : %{toto}
* YAML is space sensitive

=== Files
==== i18n.rb
==== support.yml
==== actions.yml
==== models.yml

  activerecord:
    attributes:
      animal:

=== Title pages

Ekylibre is looking for +fra.actions.<controller>.<action>+.
So I add +index: "Gestion des animaux"+ to set a title for a controller "backend/animals".

  # config/locales/fra/actions.yml
  fra:
    actions:
      backend/accounts:
        edit: "Modifier le compte\_: %{number} - %{name}"
        index: "Plan de comptes"
        load: "Charger un plan de compte"
        mark: "Lettrage du compte\_: %{number} - %{name}"
        new: "Créer un nouveau compte"
        reconciliation: "Lettrage de comptes"
        show: "Compte\_: %{number} - %{name}"
        unmark: "Délettrer un compte"
      backend/animals:
        index: "Gestion des animaux"

=== Label of attributes

You have to add attributes to make understandable your form but you can use label which are already here.
Take care, you have to put in in alphabetical order.

ex: for my animal's list

  # config/locales/fra/models.yml
  fra:
    attributes:
      identication_number: "Numéro d'identification"

== Adding routes

The route permit to match a request to a controller.

  #config/routes.rb
    ...
    resources :animals, concern: [:list, :unroll]
    ...

== Adding right

The resource must be defined in nomenclature *Enterprise Resource*.

  # config/rights.rb
  animals:
    read:
    - "backend/animals#new"
    - "backend/animals#list"

=== Official Documentation

* {Associations}[http://guides.rubyonrails.org/association_basics.html]
* {Validations}[http://guides.rubyonrails.org/active_record_validations_callbacks.html]

Copyright (C) 2012-2014 David JOULIN, Brice TEXIER
