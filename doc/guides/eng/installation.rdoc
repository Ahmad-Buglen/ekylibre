= Installation for developers

This a short explanation on installation steps for developers.

== 1. Dependencies

* Before all, install all distribution dependencies:

    sudo apt-get install postgresql-9.3 postgresql-server-dev-9.3 libpq-dev libqtwebkit-dev libmagic-dev libxml2-dev libxslt1-dev libgdal1-dev libjson0-dev zlib1g-dev build-essential wget openjdk-7-jdk graphicsmagick tesseract-ocr tesseract-ocr-fra tesseract-ocr-eng tesseract-ocr-spa pdftk libreoffice poppler-utils poppler-data ghostscript

* Install PostGIS (≥ 2.1) from source:
  * Download and install Geos (≥ 3.4) from http://trac.osgeo.org/geos:
      wget http://download.osgeo.org/geos/geos-3.4.2.tar.bz2
      tar xjvf geos-3.4.2.tar.bz2
      cd geos-3.4.2
      ./configure
      make
      sudo make install
    Or in one line:
      wget http://download.osgeo.org/geos/geos-3.4.2.tar.bz2 && tar xjvf geos-3.4.2.tar.bz2 && cd geos-3.4.2 && ./configure && make && sudo make install
  * Download and install Proj4 (≥ 4.8) from http://trac.osgeo.org/proj:
      wget http://download.osgeo.org/proj/proj-4.8.0.tar.gz
      tar xzvf proj-4.8.0.tar.gz
      cd proj-4.8.0
      ./configure
      make
      sudo make install
    Or in one line:
      wget http://download.osgeo.org/proj/proj-4.8.0.tar.gz && tar xzvf proj-4.8.0.tar.gz && cd proj-4.8.0 && ./configure && make && sudo make install
  * Download and install PostGIS (≥ 2.1) from http://postgis.net:
      wget http://download.osgeo.org/postgis/source/postgis-2.1.4.tar.gz
      tar xzvf postgis-2.1.4.tar.gz
      cd postgis-2.1.4
      ./configure
      make
      sudo make install
    Or in one line:
      wget http://download.osgeo.org/postgis/source/postgis-2.1.4.tar.gz && tar xzvf postgis-2.1.4.tar.gz && cd postgis-2.1.4 && ./configure && make && sudo make install

== 2. Ruby

* Install Ruby 2.0 or later. If your distribution isn't up-to-date, see {RVM}[https://rvm.io] or {RbEnv}[https://github.com/sstephenson/rbenv] to install the good version, else:
    sudo apt-get install ruby2.0 ruby2.0-dev ruby-dev

  Or compile it from source. In one line:
    wget ftp://ftp.ruby-lang.org/pub/ruby/2.0/ruby-2.0.0-p481.tar.gz && tar xzvf ruby-2.0.0-p481.tar.gz && cd ruby-2.0.0-p481 && ./configure && make && sudo make install
  
  NOTE : we advise you to take the RBENV method
  
== 3. Configuration

* Configure a DB superuser as default user in your +config/database.yml+.
  In production mode, you'll need to use a normal user without SUPERUSER not CREATEDB right.

* Install bundler with rubygems:
    gem install bundler

* Move to Ekylibre directory root and install gems with bundler:
    cd /path/to/ekylibre
    JAVA_HOME=/usr/lib/jvm/java-7-openjdk NOKOGIRI_USE_SYSTEM_LIBRARIES=1 bundle install
    
  Or you can add the following lines in your +~/.bash_profile+ in your home directory and run +bundle install+ after:
    
    export JAVA_HOME=/usr/lib/jvm/java-7-openjdk
    export NOKOGIRI_USE_SYSTEM_LIBRARIES=1

* Create your +database.yml+ in +config/+

    default: &default
      adapter: postgis
      encoding: unicode
      pool: 5
      postgis_extension: []
      schema_search_path: public,postgis
      username: ekylibre
      password: ekylibre
      host: 127.0.0.1

    development:
      <<: *default
      database: ekylibre_development

* Create and migrate database:
    rake db:create db:migrate

* Optionally, it's possible to load anonymized data of a real (french polycultural-cattling) farm, just replace <<instance>> by 'demo':
    rake first_run max=50 name=<<instance>>

* Add in +/etc/hosts+ a line to configure a factive subdomain corresponding to your instance:
     127.0.0.1 <<instance>>.ekylibre.lan

* Launch server:
    rails server

* Open your web browser and go to 'http://<<instance>>.ekylibre.lan:3000'
