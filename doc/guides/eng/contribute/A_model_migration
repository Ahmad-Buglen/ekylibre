h1. Models and Migrations

assuming we have a project dealing with animals husbandry (gestion de troupeau)
see 

!https://github.com/ekylibre/ekylibre/blob/master/doc/mockups/animal_husbandry/index.png!


h2. Intro

In the beginning, we just want a view to create / read /update  and delete (CRUD) an animal
so we are going to create our models base on this http://yuml.me/edit/3f50e6c6

In this diagram class, we haven't mentionned primary key like id or other key like company_id or animal_group_id
this is rails conventions. Rails are going to create table as a magic.
>primary key for a table is *id*
>strangers keys finished by *_id*

h2. 1 - the migration

In order to make table on our database we have to write some migrations.
So let's begin to write our first migration

in our case 20121013140801_create_animals.rb in db/migrate
we make strangers keys with belongs_to

<pre><code class="ruby">
#db/migrate/20121013140801_create_animals.rb
class CreateAnimals < ActiveRecord::Migration
  def change
    create_table :animals do |t|
      t.belongs_to :company,               :null=>false
      t.belongs_to :animal_group,               :null=>false
      t.string     :name,                  :null=>false
      t.string     :ident_number,                :null=>false
      t.date       :born_on,            :null=>false
      t.string     :sexe,                :null=>false, :limit=>1, :default=>'M'
      t.text       :description
      t.text       :comment
      t.date       :in_on,  :null=>false
      t.date       :out_on, :null=>false
      t.date       :purchased_on,          :null=>false
      t.date       :ceded_on
      t.stamps
    end
    add_stamps_indexes :animals
    add_index :animals, :name
    add_index :animals, :animal_group_id
    
    create_table :animal_groups do |t|
       t.belongs_to :company,               :null=>false
       t.string     :name,                  :null=>false
       t.text       :description
       t.text       :comment
       t.stamps
    end
    add_stamps_indexes :animal_groups
    
  end
end
</code></pre>

This migration will create two tables with indexes (animals and animal_groups) in your database
in order to commit this migration, just passed in a command line:

<pre><code class="ruby">
#in /ekylibre
rake db:migrate
</code></pre>

After that you could see that db/schema.rb has your instructions.

<pre><code class="ruby">
  create_table "animals", :force => true do |t|
    t.integer  "company_id",                                    :null => false
    t.integer  "animal_group_id",                               :null => false
    t.string   "name",                                          :null => false
    t.string   "ident_number",                                  :null => false
    t.date     "born_on",                                       :null => false
    t.string   "sexe",            :limit => 1, :default => "M", :null => false
    t.text     "description"
    t.text     "comment"
    t.date     "in_on",                                         :null => false
    t.date     "out_on",                                        :null => false
    t.date     "purchased_on",                                  :null => false
    t.date     "ceded_on"
    t.datetime "created_at",                                    :null => false
    t.datetime "updated_at",                                    :null => false
    t.integer  "creator_id"
    t.integer  "updater_id"
    t.integer  "lock_version",                 :default => 0,   :null => false
  end

  add_index "animals", ["animal_group_id"], :name => "index_animals_on_animal_group_id"
  add_index "animals", ["created_at"], :name => "index_animals_on_created_at"
  add_index "animals", ["creator_id"], :name => "index_animals_on_creator_id"
  add_index "animals", ["name"], :name => "index_animals_on_name"
  add_index "animals", ["updated_at"], :name => "index_animals_on_updated_at"
  add_index "animals", ["updater_id"], :name => "index_animals_on_updater_id"
</code></pre>

if something is still wrong because you forgot a column for example, you could canceled with this command

<pre><code class="ruby">
#in a command line at the root of ekylibre
rake db:rollback
</code></pre>

and modify your migration and commit by rake db:migrate etc...

bq. _*Migrations_Conventions*_
YYYYMMDDHHMMSS_action_models.rb
Class name ActionModels
Table name models
Column name t.type :name, :option1=>value1, :option2=>value2
t.stamps generate created_at,update_at,creator_id,updater_id,lock_version
rake db:migrate or rake db:rollback

bq. _*Official Doc*_
Migrations http://guides.rubyonrails.org/migrations.html

h2. 2 - the basic model

After having our tables, we are going to make our Class

creating a file in app/models calling animal.rb

<pre><code class="ruby">
#app/models/animal.rb
class Animal < CompanyRecord
end
</code></pre>

and for the command line 

<pre><code class="ruby">
rake clean:models
rake clean:validations
#or in one line
rake clean:models clean:validations
</code></pre>

you will obtains

<pre><code class="ruby">
#app/models/animal.rb
class Animal < CompanyRecord
  #[VALIDATORS[ Do not edit these lines directly. Use `rake clean:validations`.
  validates_length_of :sexe, :allow_nil => true, :maximum => 1
  validates_length_of :ident_number, :name, :allow_nil => true, :maximum => 255
  validates_presence_of :born_on, :company, :ident_number, :in_on, :name, :out_on, :purchased_on, :sexe
  #]VALIDATORS]
end
</code></pre>

so we just have to add relationship and other validations (we want a unique name and ident_number for our animal)
and we want company_id be just readable.Take care to NOT MODIFY OR ADDING DIRECTLY FROM #[VALIDATORS TO VALIDATORS]

<pre><code class="ruby">
#app/models/animal.rb
class Animal < CompanyRecord
  belongs_to :animal_group
  belongs_to :company
  #[VALIDATORS[ Do not edit these lines directly. Use `rake clean:validations`.
  validates_length_of :sexe, :allow_nil => true, :maximum => 1
  validates_length_of :ident_number, :name, :allow_nil => true, :maximum => 255
  validates_presence_of :animal_group, :born_on, :company, :ident_number, :in_on, :name, :out_on, :purchased_on, :sexe
  #]VALIDATORS]
  attr_readonly :company_id
  validates_uniqueness_of :name, :ident_number
end
</code></pre>

we just make the same thing for animal_group.rb

<pre><code class="ruby">
#app/models/animal_group.rb
class AnimalGroup < CompanyRecord
  belongs_to :company
  has_many :animals
  #[VALIDATORS[ Do not edit these lines directly. Use `rake clean:validations`.
  #]VALIDATORS]
   validates_uniqueness_of :name
</code></pre>
end

bq. _*Models_Conventions*_
model.rb
Class name Model or ModelOne
relationship with belong_to :model
validations with validates_uniqueness_of :column
rake clean:models clean:validations

bq. _*Official Doc*_
Associations http://guides.rubyonrails.org/association_basics.html
Validations http://guides.rubyonrails.org/active_record_validations_callbacks.html

Agrilibre - Agricultural ERP project on Ekylibre
Copyright (C) 2012 - Author : David JOULIN