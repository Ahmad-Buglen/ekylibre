#!/usr/bin/env ruby
require 'active_support/core_ext'
require 'optparse'
require 'pathname'
require 'fileutils'

STDOUT.sync = true

@simulate = false

def execute(command)
  puts command
  unless @simulate
    system(command)
  end
end

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: #{$PROGRAM_NAME} [options]"

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end
  opts.on_tail("-s", "--simulate", "Simulate changes") do
    options[:simulate] = true
    @simulate = true
  end
  opts.on_tail("-m", "--migration", "Generate migration file") do
    options[:migrate] = true
  end
end.parse!

old_table = ARGV.shift
new_table = ARGV.shift

unless $PROGRAM_NAME.match(/^(.\/)?script\//)
  puts "Script must be started from Rails root."
  exit 0
end

root = Pathname.new(".")

# db/migrate
if options[:migrate]
  name = "rename_#{old_table}_to_#{new_table}"
  file = root.join("db", "migrate", Time.now.strftime('%Y%m%d%H%M%S') + "_" + name + ".rb")
  puts "Write #{file}"
  unless @simulate
    FileUtils.mkdir_p(file.dirname)
    File.open(file, "wb") do |f|
      code  = "class #{name.camelcase} < ActiveRecord::Migration\n\n"
      code << "  def up\n"      
      code << "    rename_table :#{old_table}, :#{new_table}\n"      
      code << "  end\n\n"      
      code << "  def down\n"      
      code << "    rename_table :#{new_table}, :#{old_table}\n"      
      code << "  end\n\n"      
      code << "end\n"      
      f.write code
    end
  end
end

# app/models
of = root.join("app", "models", "#{old_table.singularize}.rb")
nf = root.join("app", "models", "#{new_table.singularize}.rb")
if File.exist?(of)
  execute("git mv #{of} #{nf}")
  execute("sed -i 's/class #{old_table.classify} /class #{new_table.classify} /' #{nf}")  
end

# app/controllers
of = root.join("app", "controllers", "#{old_table}_controller.rb")
nf = root.join("app", "controllers", "#{new_table}_controller.rb")
if File.exist?(of)
  execute("git mv #{of} #{nf}")
  execute("sed -i 's/class #{old_table.camelcase}Controller /class #{new_table.camelcase}Controller /' #{nf}")  
end

# app/views
of = root.join("app", "views", old_table)
nf = root.join("app", "views", new_table)
if File.exist?(of)
  execute("git mv #{of} #{nf}")
end

# app/helpers
of = root.join("app", "helpers", "#{old_table}_helper.rb")
nf = root.join("app", "helpers", "#{new_table}_helper.rb")
if File.exist?(of)
  execute("git mv #{of} #{nf}")
  execute("sed -i 's/module #{old_table.camelcase}Helper/module #{new_table.camelcase}Helper/' #{nf}")  
end

# config/locales/*/models.yml
for file in Dir[root.join("config", "locales", "*", "models.yml")].sort
  lf = Pathname(file)
  tr = YAML.load_file(lf)
  locale = tr.keys.first
  if tr[locale]["activerecord"]
    if tr[locale]["activerecord"]["attributes"]
      if tr[locale]["activerecord"]["attributes"][old_table.singularize]
        tr[locale]["activerecord"]["attributes"][new_table.singularize] = tr[locale]["activerecord"]["attributes"][old_table.singularize]
      end
    end
    if tr[locale]["activerecord"]["errors"]
      if tr[locale]["activerecord"]["errors"]["models"]
        if tr[locale]["activerecord"]["errors"]["models"][old_table.singularize]
          tr[locale]["activerecord"]["errors"]["models"][new_table.singularize] = tr[locale]["activerecord"]["errors"]["models"][old_table.singularize]
        end
      end
    end
    if tr[locale]["activerecord"]["models"]
      if tr[locale]["activerecord"]["models"][old_table.singularize]
        tr[locale]["activerecord"]["models"][new_table.singularize] = tr[locale]["activerecord"]["models"][old_table.singularize]
      end
    end
  end
  if tr[locale]["enumerize"]
    if tr[locale]["enumerize"][old_table.singularize]
      tr[locale]["enumerize"][new_table.singularize] = tr[locale]["enumerize"][old_table.singularize]
    end
    end
  if tr[locale]["models"]
    if tr[locale]["models"][old_table.singularize]
      tr[locale]["models"][new_table.singularize] = tr[locale]["models"][old_table.singularize]
    end
  end
  
  code = tr.to_yaml
  
  puts "Update #{lf}"
  unless @simulate
    File.open(lf, "wb") do |f|
      f.write code
    end
  end
end


# config/locales/*/action.yml
for file in Dir[root.join("config", "locales", "*", "action.yml")].sort
  lf = Pathname(file)
  tr = YAML.load_file(lf)
  locale = tr.keys.first
  if tr[locale]["actions"]
    if tr[locale]["actions"][old_table]
      tr[locale]["actions"][new_table] = tr[locale]["actions"][old_table]
    end
  end
  if tr[locale]["controllers"]
    if tr[locale]["controllers"][old_table]
      tr[locale]["controllers"][new_table] = tr[locale]["controllers"][old_table]
    end
  end
  if tr[locale]["unroll"]
    if tr[locale]["unroll"][old_table]
      tr[locale]["unroll"][new_table] = tr[locale]["unroll"][old_table]
    end
  end
  
  code = tr.to_yaml
  
  puts "Update #{lf}"
  unless @simulate
    File.open(lf, "wb") do |f|
      f.write code
    end
  end
end


# config/menu
nf = root.join("config", "menu.xml")
puts "Update #{nf}"
source = nil
File.open(nf, "rb") do |f|
  source = f.read
end
unless @simulate
  source.gsub!(/(\")#{old_table}(\#)/, '\1' + new_table + '\2')
  File.open(nf, "wb") do |f|
    f.write source
  end
end

# config/rights
nf = root.join("config", "rights.yml")
puts "Update #{nf}"
source = nil
File.open(nf, "rb") do |f|
  source = f.read
end
unless @simulate
  source.gsub!(/(\")#{old_table}(\:\:)/, '\1' + new_table + '\2')
  File.open(nf, "wb") do |f|
    f.write source
  end
end

# config/rights
nf = root.join("config", "routes.rb")
puts "Update #{nf}"
source = nil
File.open(nf, "rb") do |f|
  source = f.read
end
unless @simulate
  source.gsub!(/(resources\ )+:#{old_table}(\,|\s|$)/, '\1:' + new_table + '\2')
  File.open(nf, "wb") do |f|
    f.write source
  end
end



# test/fixtures
of = root.join("test", "fixtures", "#{old_table}.yml")
nf = root.join("test", "fixtures", "#{new_table}.yml")
if File.exist?(of)
  execute("git mv #{of} #{nf}")
  unless @simulate
    source = nil
    File.open(nf, "rb") do |f|
      source = f.read
    end
    source.gsub!(/^#{old_table}_(\d+)\:/, new_table+'_\1:')
    File.open(nf, "wb") do |f|
      f.write source
    end
  end
end

# test/unit
of = root.join("test", "unit", "#{old_table.singularize}_test.rb")
nf = root.join("test", "unit", "#{new_table.singularize}_test.rb")
if File.exist?(of)
  execute("git mv #{of} #{nf}")
  execute("sed -i 's/class #{old_table.classify}Test /class #{new_table.classify}Test /' #{nf}")  
end

# test/unit/helpers
of = root.join("test", "unit", "helpers", "#{old_table}_helper_test.rb")
nf = root.join("test", "unit", "helpers", "#{new_table}_helper_test.rb")
if File.exist?(of)
  execute("git mv #{of} #{nf}")
  execute("sed -i 's/class #{old_table.camelcase}HelperTest /class #{new_table.camelcase}HelperTest /' #{nf}")  
end

# test/functional
of = root.join("test", "functional", "#{old_table}_controller_test.rb")
nf = root.join("test", "functional", "#{new_table}_controller_test.rb")
if File.exist?(of)
  execute("git mv #{of} #{nf}")
  execute("sed -i 's/class #{old_table.camelcase}ControllerTest /class #{new_table.camelcase}ControllerTest /' #{nf}")  
end

# General replacing
print "replace "
for file in Dir[root.join("app", "**", "*.rb")] + Dir[root.join("app", "**", "*.yml")]
  source = nil
  File.open(file, "rb") do |f|
    source = f.read
  end
  ns = source.dup
  ns.gsub!(/([^a-zA-Z0-9\_]|^)#{old_table.classify}([^a-zA-Z0-9\_]|$)/, '\1' + new_table.classify + '\2')
  ns.gsub!(/^(\ +)has\_many\ \:#{old_table}(\s?)$/, '\1has_many :' + old_table + ', :class_name => "'+ new_table.classify + '"')
  ns.gsub!(/^(\ +)belongs\_to\ \:#{old_table.singularize}(\s?)$/, '\1belongs_to :' + old_table.singularize + ', :class_name => "'+ new_table.classify + '"')
  ns.gsub!(/:model\ *\=\>\ *:#{old_table}([^a-z\_]|$)/, ':model => :' + new_table + '\1')
  ns.gsub!(/:model\ *\=\>\ *:#{old_table.singularize}([^a-z\_]|$)/, ':model => :' + new_table.singularize + '\1')
  ns.gsub!(/(search\_conditions[\ \(]+):#{old_table}(\ *\=\>)/, '\1:' + new_table + '\2')
  ns.gsub!(/(search\_conditions[\ \(]+):#{old_table.singularize}(\ *\=\>)/, '\1:' + new_table.singularize + '\2')
  ns.gsub!(/(find\_and\_check[\(\ ]+):#{old_table}\s*(\)|\,|$)/, '\1:' + new_table + '\2')
  ns.gsub!(/(find\_and\_check[\(\ ]+):#{old_table.singularize}\s*(\)|\,|$)/, '\1:' + new_table.singularize + '\2')
  ns.gsub!(/(list[\(\ ]+):#{old_table}\s*(\)|\,|$)/, '\1:' + new_table + '\2')
  ns.gsub!(/(list[\(\ ]+):#{old_table.singularize}\s*(\)|\,|$)/, '\1:' + new_table.singularize + '\2')

  ns.gsub!(/^(\ +)(search\_for)/, '\1# \2')
  # ns.gsub!(/(search\_for[\(\ ]+:[a-z\_]+\ *\,)\ *#{old_table}\s*(\)|\,|$)/, '\1 ' + new_table + '\2')
  # ns.gsub!(/(search\_for[\(\ ]+:[a-z\_]+\ *\,)\ *#{old_table.singularize}\s*(\)|\,|$)/, '\1 ' + new_table.singularize + '\2')
  # ns.gsub!(/(search\_for[\(\ ]+:)#{old_table}\s*(\)|\,|$)/, '\1:' + new_table + '\2')
  # ns.gsub!(/(search\_for[\(\ ]+:)#{old_table.singularize}\s*(\)|\,|$)/, '\1:' + new_table.singularize + '\2')

  if ns != source
    unless @simulate
      File.open(file, "wb") do |f|
        f.write ns
      end    
    end
    print "+"
  else
    print "."
  end
end
puts "!"

puts "Clean with `rake clean` at the end"
